var e={116:e=>{e.exports="data:font/woff2;charset=utf-8;base64,"},154:e=>{e.exports="data:font/woff2;charset=utf-8;base64,"},309:e=>{e.exports="data:font/woff2;charset=utf-8;base64,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"},363:e=>{e.exports="data:font/woff2;charset=utf-8;base64,"},438:e=>{e.exports="data:font/woff2;charset=utf-8;base64,"},540:e=>{e.exports=function insertStyleElement(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},978:e=>{e.exports="data:font/woff2;charset=utf-8;base64,"},1113:e=>{e.exports=function styleTagTransform(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},1418:e=>{e.exports="data:font/woff2;charset=utf-8;base64,"},1601:e=>{e.exports=function(e){return e[1]}},1812:e=>{e.exports="data:font/woff2;charset=utf-8;base64,"},1916:e=>{e.exports="data:font/woff2;charset=utf-8;base64,"},2709:e=>{e.exports="data:font/woff2;charset=utf-8;base64,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"},2899:e=>{e.exports="data:font/woff2;charset=utf-8;base64,"},2908:e=>{e.exports="data:font/woff2;charset=utf-8;base64,"},3021:e=>{e.exports="data:font/woff2;charset=utf-8;base64,"},3779:e=>{e.exports="data:font/woff2;charset=utf-8;base64,"},4417:e=>{e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]|(%20)/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},4931:e=>{e.exports="data:font/woff2;charset=utf-8;base64,"},5056:(e,t,n)=>{e.exports=function setAttributesWithoutAttributes(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},5072:e=>{var t=[];function getIndexByIdentifier(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function modulesToDom(e,n){for(var r={},a=[],o=0;o<e.length;o++){var s=e[o],c=n.base?s[0]+n.base:s[0],l=r[c]||0,f="".concat(c," ").concat(l);r[c]=l+1;var u=getIndexByIdentifier(f),d={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==u)t[u].references++,t[u].updater(d);else{var p=addElementStyle(d,n);n.byIndex=o,t.splice(o,0,{identifier:f,updater:p,references:1})}a.push(f)}return a}function addElementStyle(e,t){var n=t.domAPI(t);n.update(e);return function updater(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,n){var r=modulesToDom(e=e||[],n=n||{});return function update(e){e=e||[];for(var a=0;a<r.length;a++){var o=getIndexByIdentifier(r[a]);t[o].references--}for(var s=modulesToDom(e,n),c=0;c<r.length;c++){var l=getIndexByIdentifier(r[c]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}r=s}}},5901:e=>{e.exports="data:font/woff2;charset=utf-8;base64,"},6014:e=>{e.exports="data:font/woff2;charset=utf-8;base64,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"},6023:e=>{e.exports="data:font/woff2;charset=utf-8;base64,"},6059:e=>{e.exports="data:font/woff2;charset=utf-8;base64,"},6259:e=>{e.exports="data:font/woff2;charset=utf-8;base64,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"},6314:e=>{e.exports=function(e){var t=[];return t.toString=function toString(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function i(e,n,r,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var s={};if(r)for(var c=0;c<this.length;c++){var l=this[c][0];null!=l&&(s[l]=!0)}for(var f=0;f<e.length;f++){var u=[].concat(e[f]);r&&s[u[0]]||(void 0!==o&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=o),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),a&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=a):u[4]="".concat(a)),t.push(u))}},t}},7142:e=>{e.exports="data:font/woff2;charset=utf-8;base64,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"},7414:e=>{e.exports="data:font/woff2;charset=utf-8;base64,"},7464:e=>{e.exports="data:font/woff2;charset=utf-8;base64,"},7568:(e,t,n)=>{n.d(t,{A:()=>c});var r=n(1601),a=n.n(r),o=n(6314),s=n.n(o)()(a());s.push([e.id,'::backdrop\n{\n    background-color: rgb(241, 241, 241);\n}\n\nhtml, body {\n    background-color: rgb(241, 241, 241);\n    font-family: \'Open Sans\';\n    width:100vw;\n    height:100vh;\n}\n\nbody .room{\n    height:100vh;\n}\n\n.trial-prompt {\n    font-size: 48px;\n    font-weight: 800;\n}\n.instructions {\n            background-color: white;\n            max-width: 720px;\n            margin: 36px auto 200px;\n            \n            font-family: \'Open Sans\';\n            padding: 24px 36px;\n\n            text-align: left;\n            font-weight: 300;\n            box-shadow: 1px 1px 8px rgba(160, 160, 160, 0.513);\n            font-weight: 200;\n                font-size: 16px;\n            \n            & p {\n                font-weight: 200;\n                font-size: 16px;\n                \n                & strong {\n                font-weight:800;\n            }\n            }\n        }\n\n        .minor-text{\n            font-size:12px;\n        }\n\n        .timeline-container{\n            max-width: 100%;\n            display:flex;\n            flex-direction: column;\n            gap:16px;\n            background-color: white;\n            padding:12px;\n\n        }\n\n        .timeline {\n            display: flex;\n            flex-direction: row;\n            height: 48px;\n            padding:12px;\n            background-color: rgb(255, 255, 255);\n            border: solid black 1px;\n            gap:8px;\n            align-items: center;\n            justify-content: center;\n\n        }\n\n        .timeline-container .room{\n            height:100%;\n        }\n\n        .image{\n            max-width: 580px;\n            width:580px;\n            \n        }\n        div[data-image-focus]:hover{\n            cursor: pointer;\n            opacity:50%;\n        }\n\n        div[data-image-focus="true"]{\n            outline:rgb(0, 209, 38) 3px solid;\n        }\n\n        .focused-timeline{\n            height:180px;\n        }\n\n        .timeline-description{\n            font-size:0.8em;\n            background-color: white;\n            max-width: 580px;\n            margin:auto;\n            text-align: left;\n            border-top:lightgrey 1px solid;\n            border-bottom:lightgrey 1px solid;\n            \n\n        \n        }\n\n\n.sound-selector{\n    display:flex;\n    flex-direction: row;\n    justify-content: space-around;\n    width:max-content;\n    align-items: center;\n\n    background-color: black;\n    border-radius: 34px;\n    padding:2px 32px 2px 4px;\n    overflow: hidden;\n    height:64px;\n    gap:24px;\n\n}\n\n.sound-button{\n    all:unset;\n    width:60px;\n    height:60px;\n    border-radius: 30px;\n    padding:12px;\n    box-sizing: border-box;\n    display:flex;\n    align-items: center;\n    justify-content: center;\n\n    background-color: rgb(223, 223, 223);\n    cursor: pointer;\n    transition-duration: 500ms;\n}\n\n.sound-button:hover{\n    background-color: white;\n}\n\n.sound-button>svg{\n    stroke:rgb(0, 0, 0);\n}\n\n.sound-selector>input[type=\'range\']{ \n    accent-color: rgb(197, 197, 197); \n    width:200px;\n}\n\n\n\n.slide-show-gen{\n    font-weight: 600;\n    padding:12px;\n    background-color: rgb(240, 240, 240);\n    border: 2px black solid;\n    cursor: pointer;\n    border-radius: 12px;;\n}\n\n.instructions[data-selected="yes"]  .slide-show-gen[data-trial="yes"]{\n   background-color: black;\n   color:white;\n}\n\n.instructions[data-selected="no"]  .slide-show-gen[data-trial="no"]{\n    background-color: black;\n   color:white;\n }\n\n .redirect-widget{\n    background-color: white;\n    padding:24px 16px;\n    position:fixed;\n     bottom:20px;\n     right:20px;\n     max-width: 200px;\n     border-radius: 8px;\n     width:min-content;\n     display:flex;\n     flex-direction: column;\n     gap:12px;\n     box-shadow: 1px 1px 8px rgba(160, 160, 160, 0.513);\n\n     \n\n }\n\n .redirect-link{\n     all:unset;\n     background-color: rgb(18, 49, 190);\n     font-size: 16px;\n     padding:8px 12px;\n     color:white;\n     cursor: pointer;\n     border-radius: 6px;\n     width:max-content;\n     box-shadow: 1px 1px 8px rgba(160, 160, 160, 0.513);\n\n\n }\n\n .redirect-link:hover{\n     opacity:50%;\n }\n\n .hidden-button{\n    visibility: hidden;\n }',""]);const c=s},7659:e=>{var t={};e.exports=function insertBySelector(e,n){var r=function getTarget(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},7677:e=>{e.exports="data:font/woff2;charset=utf-8;base64,"},7825:e=>{e.exports=function domAPI(e){if("undefined"==typeof document)return{update:function update(){},remove:function remove(){}};var t=e.insertStyleElement(e);return{update:function update(n){!function apply(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,a&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function remove(){!function removeStyleElement(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},8044:e=>{e.exports="data:font/woff2;charset=utf-8;base64,"},8426:e=>{e.exports="data:font/woff2;charset=utf-8;base64,"},8760:e=>{e.exports="data:font/woff2;charset=utf-8;base64,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"},8912:e=>{e.exports="data:font/woff2;charset=utf-8;base64,"},8989:e=>{e.exports="data:font/woff2;charset=utf-8;base64,"},9128:e=>{e.exports="data:font/woff2;charset=utf-8;base64,d09GMgABAAAAAA8MABIAAAAAG7gAAA6qAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGjIbgS4cPAZgP1NUQVRWADwIgjgJnxQREAqCRIJKCwoAATYCJAMQBCAFhQYHIAyGFht5GjOj9pCzkg/wXyZwYwjUR3oj0EaIEKr2oWFH9QUOBucuH+kIUKnBFRy0VhX15KXlCY3z41D0nG7Dzr8RTqeEEZLM+r069N/pJGMSF3BSnisVgPTqIoEL5OLYuTNPE8LYZfZPdNq/CQpoNq3jbilvUpm5+5DzRQ0PwP3y/Qo8S/AATDuBqkWaTbABN5zpfZ9+bpPs+d/e3KpoGuqdSOq0QI0wBtxkqQ9OE+1/1tK6TTheIC181V/WTBgG0DAUW2o7iXp6YPFMcErqp/Z0f1ps7w1rpOo+nZ/trGSffUQ9YlFSd2XlmdXK3h3LJ++R1v58hP+zdKhDSriiil5PRNWlTZV0Keo6XV50iiyMjX2a+AO0qI/hanXRSgmKcdvHUBDW6cr9KQcYUct0oC8XcIQ4jOWPSU2RijuOjE8HatnJ1AO1ZSrqgNpVlDJAnUrkjUDhANCSMIBw5npA51xnm8GIyoAQ3cEYluLDSIyMo4VMYSChydKUpHLvABWFcno2uSTapTb5G2pQeB+nMNWeyFLFI8fr+vp8n+/zS/zTgveWOJV1H3BBDznK5gPYghMboX8kHS7BspHgcy9YJEWhQ5yA31eb/e8CIL6ypgHoTfGBOfcOAA8xlZl8zb2hzzMC66VcXo0Q4MK2Wo4A9A88FnG8pEo7HODAAsq9dwDUZ9131nxHsV8xr2pmgqdzDAFD0pQ3Kmuw7trtc0ibhWmBZnIHmMTNOFUctF+L+Rbu/d+EHNPGefINgA1AHpxo+HKlpQmnT7E27UQ/yr5JS26t9S9waMHU/r1HrHtGrSl9Bm070+ncplmj1iybdha8YTzgQjBuTYtbt9sd6JrebfTPtmDLnhPXdRkzb92xK8+o0KhTvykbKrUZMGbWih0Hzih0mrRozZ4z1z1r1rINbfb7b+s1Yqrj327TvnNP+one0GvYhEVbARdFQ7AO4xat2rHvWqIBvdNHoi7izdpjnwfHbm6sr42PjY4MDw0O9Pf19nR3dXa0t8FWuYxpaW5qbKivq62prrIs08k4G6X+8aOHJ8eJs0eHD4aDXvdgf2+30241G/X33yqsrRbjkKUVrkzWSsUopFmFK+ulYgxTIWJ8F6wwhNCzutO3tarS2inWCBBXi3enY9nDrDnVUaeFUfN6nQF3eomlmuycsXrpkBLKbLrGV1gCrrbDfLNPv8CC3HalhSLjFr0qE9CVZhww77AdQQVC3l1XzzZhhXGM3YY12wk/FWJsdA995T0uf7WYGuCK8iIa+UPZEec0pxIL66eu2bEDcw7RkEGOy/wl/qU8bEYE43jUtdIN2smKNr1v+bV3KelmTc7l7cNk/ZVYl4qBUQ5l/HRVCPHTNYnNiwj26Vr7C9NcxZddGIRXELB+8BinJHh2brQk7vS9uMepPND92hN2nx1ZTqD7MZyWCQWuF8Y8j6jggjRCCiGFuFAXh4jYKwadYo4i3ILABtTOe91bW7y3cm/13sbc5pwKRNa/zFf8ixAlFP2a02YMQe33e3Kq3/MPqZyAFdmipgfU4XsC43RlNfcICn/Jg1Icuy6xv+bYJAUhy5SDZygVa4GXG27aFZ+AHQDU551iEihN2ocwsPK9XmnnYlftpxb2GcnyRLELvV+Qk7VQFCodqXpJe5OfoWHX0rveSLOjxpZw4YamoFwr47qn9TLEOd0qJ9khTbfbm7SXCnWhtGyWpvhZeCmweieQvBPfie4E4qUNpOWkjKwsc2fdje56BqIOUF/P3+Ua1+iVj2UPj4gQunampi6FzRA4hZRlFQRlrd0rcalItYB9Uy0VO70QDkz32FaB5pA0Vdq/8G6apedhVa1YC/uRZbXqUqVqJO/upZlnlWtOqtQMvOs8TmmM0IM4Agac2iRJ932GiZV8L495YEO4J7soSxVlTsmmzOs91VIxdhBdsjhCqc3M9XvnsmkwNLfRyPOI+PCw/nbF2aynzNxiuW1Swj7tk8VcG7MorqXrOFX1raaxazZPF107cYJr0w6Ccga6pLhJKRJOPA8j72Zb6SNTj+d6iDsjN+tJ+SkahxWOOiP2WinqEYkt8A0GpALRgIbWSabOUrCDaX9YFO2xZEdKO4jXhrS6ysRa1dpDcdyofQ0m0Fqrwa5IadRd8o68R2BVrFUsdIumaQOjodd0y4Th9MSSS2VNv4XrR72I1lpyMmFdITo731LtkPlP0wYGFlDSsLyLN0FcvSFD0B7Gt0A8mZOG0wmst1mzQumRWhcPkcZ9qsba0Sw7f5Lz+nLGCPi9MilTwjZvoN2O9BR7XTae4mEhgvjs0BvWVKA6VXecqgo5wrTm2N2UQLicOKlDRqd4HDNh2/I71GDecsIkmBD7kQT0LVaKcbSA7nfKgPtdI5ADElqdXCyVZaFE4pbvhWC10rCDwGuXSF6mlTxSVJCCMS7wdJhnP1OG2UR+DgnE8XEjlVYlYqIihXolvnWlSQcqOlUIHGQuIq6nI09oiZvwg69EKgQM+hBSjo9SefvQxmbW82ydywLHxiiVVM9ypkLT4+qxO4hbjbyMW8XIsThdOMo34qpYl2vnhx5s5+1D3pNndSNup3JPeqbqe7APDtbHKaOlUdwRZadNWW+PI3VstWa9rADBQ1PCGiN7yld/4tl6e4TA7CSK6xzVobcMXooAbsZAT2RBKwZrKc7wL4w45mtXSAYGpmVQ3wHpqMLmhuxht8WPv6z7dy1wTd2CySGQiOS1Pc4bBoZ2US24y07jcaFa2UMkFG6I4hc0Im+aeC4J3eUMBoyEUK6+kvJ+aFYMQsxZxAm/KV6uY8Vcfb6S2m0IWJ/TrtueFurXVprhrRW2bfVSl/sdrP9zSN11RJ5yKv2z/6oBuuY5psqrHdrCRFnVNd06qAt8/rt5Y0lEYFhJ0s3lLfnvKoVyBA764FEiSgNxTLRot0w91v429TnoTTggpyg/8ldNQELLGQQ2sUL6sq+zVkWJA+n7De2CWnRIPRWg3A2f9vp1RLVYppEmR+96GrhLmvXvANoOnCIK0Q7mw8IJ8YXANVMqSrPSwb3iCoc3T6qmG5uwZKgusT+tkFX7MDrlmqQRDDsD7b77f9y5gzjnePoOUJyuVxCPfSYdmcP0RQ/7iwfPvE4f2u/IW+5/cCyopb2OjXIfWZTtfOsJs7Orv+Na3FKJ0ZpEH6eQKma70+POptSBRw50TpoUMCkaHMrUXlm2099DfoNBYrlA8a3o1gFRxMcaR1mCOAtkrzvQzrz9ioxZtFrXiPsNxVJhB06LfQ60C3fNKgoz/RATjJfEDD9bpJGlEmQ25mTJAOKPymprS6+t6kHWvX5hRAzpyILKHB/xl9of/XI84q801I9h6cRSXwXIsfe6k4aepjyi2nJoIRIAgnMtpd3+TDUNvHE5E2HjH8i7eFfeKghr26Wf4AuJNeRRsQ3PqNlZ2gLJaLPS8juuAZwZLCv7/WWrbGbNBPPmR+WJaLDVhviHt/zeUYx5rGANm1huCV0EEwRRjOklJs6JQuRilmb+a7L6vLjx4ufy/Xv80491mfWf/6P+ujl5Rqxg7e+pzBXZW+v/r3WjG60Ha8OrYf3TE+JVnn7pf+jPU+4rXxj4i9g0vOU/2f33BeP8Seorfbcrxt+KG9XQ4v/Z7r9Kfq3ntsuxN2Ob2P4NgqLUxA6vDeXO93jPYXcQ41qcl9DrtUmuv0r8Rj6hetri9LcsC51qbKvuVTF+cN2UUVv1lGENqq5JDOAnRTsLhVIH56TPS9lctvVrrjxwgoIzAMpAXe8jawQAPGu+VQ3kKt9pshljUL8HwUBAS13vZFkBmgjBeoKRe7COKpdrbWFhqDWAALaG0UM3CW2h9xyt70ZL3KSugADKnNfl4MkiXf/f1DTVAAB+/T7yCgDw78Ux+V/b/95NXsv7gc1gAEDwE7E4uWeU/zV6QvSl1wS/t8RKDydv6M56YT7eQ69AAPGciTZcrCCxBVRbdxjYc6vDS6wZq+/Zr8BC0tO1hayvBxYqM7y6UAwL9BZqAwPfhYYP0hd0mhB0rYQAeXDDQgRpcI/mYMXHtIUUX/x+GNSCd4Vp0qwTo0aVanIUmjR2lPSqqHBJmmPdKC5NiWjZ1sl9rkktxmUvF6I11tV1ZmSMs0bcurnifEmerSo1UsjdV0qsbJsGDsa6yfbVq1CZLdlITkai7Eay89VccuJCNfXuK0eJMV2SZ2uUcSMmDZfgJ0oSRg0/DdVzQzTn5rOX9uyWdshUMXNNvi+lLJ+/tdBD6tyWKasHbvYAi3W7emIVTFoiSaR4WRLWlc7KuNynOc2cmIobaKHlfWxof/WPtxPRrt8wNGu3Vo+rOSsRErw8MXhpUuDFieCFSYnnx3iJuTECzw5LzPR6eLr/a0x1PniyY/BER/B4p8BjXRUebQkeqTTxcGWEhxpisFJgoCL6A5S4L5DoDVSgJzAWd/srcZc/0elHdPhF4HbfQtzmq0CrLyH3tsYy72Uw3kRLXG72iZt88Fdo9AnGDV5EvWd/uc4zrvUY5RqPuNqDd1SVRyyudJf/VhXuRLk7g8vcHXEpHYtL9pQTviAeF0qPMuJhpnSSEsfRsiQiXELYZMBRTBy2RDxDhj9g6BMDf1nfL0RKQHRD4iBU2g9ccYJH7LpExyHaJtEyBzRtpYZN1C2iNkbgoIAkBAZkwsc7Ap4ehfCQ2vHyS7bu/ILOBG1oy8vPbF2xlGeJJaIkiEUUFvGIokDB8AMwX0zZ5HuUAXbGxHs2sXC098QO9g7Y3oZgVx7OU31tIu62Fw+JNS8I/TvX0NUgQ3LVy5BzxByOzmta5jmS08Xplx+ErUt0ZnQ6ok0qQoZOTppjcj6YHwwLXBP0w42CqR8iBeKEjiuaxzmc08Xq5x+YrYf5ELjorngBawVxv4ikxt2UJG+5iSbgBtDdCim5N5kJICM3L/tmQnNu9MkTWIfONz1fk32Lgsg69Hozs8JWZd8s7DkXKgMBGIFApvJmwQSKE0CXolAyMJaxEpI8uhlY1EUFipo/0ayYuZNA+TV/NWYA"},9132:e=>{e.exports="data:font/woff2;charset=utf-8;base64,"},9210:e=>{e.exports="data:font/woff2;charset=utf-8;base64,"},9829:(e,t,n)=>{n.d(t,{A:()=>ve});var r=n(1601),a=n.n(r),o=n(6314),s=n.n(o),c=n(4417),l=n.n(c),f=new URL(n(7414),n.b),u=new URL(n(3021),n.b),d=new URL(n(8760),n.b),p=new URL(n(7464),n.b),h=new URL(n(438),n.b),m=new URL(n(9132),n.b),g=new URL(n(2709),n.b),b=new URL(n(1812),n.b),A=new URL(n(8912),n.b),y=new URL(n(1418),n.b),w=new URL(n(9128),n.b),v=new URL(n(116),n.b),x=new URL(n(6023),n.b),k=new URL(n(2899),n.b),S=new URL(n(154),n.b),M=new URL(n(8426),n.b),E=new URL(n(6259),n.b),U=new URL(n(9210),n.b),C=new URL(n(309),n.b),R=new URL(n(5901),n.b),T=new URL(n(8989),n.b),N=new URL(n(2908),n.b),I=new URL(n(7677),n.b),L=new URL(n(6059),n.b),V=new URL(n(6014),n.b),B=new URL(n(4931),n.b),W=new URL(n(7142),n.b),q=new URL(n(978),n.b),F=new URL(n(3779),n.b),D=new URL(n(8044),n.b),Z=new URL(n(1916),n.b),O=new URL(n(363),n.b),Y=s()(a()),j=l()(f),z=l()(u),P=l()(d),Q=l()(p),K=l()(h),G=l()(m),X=l()(g),J=l()(b),H=l()(A),_=l()(y),$=l()(w),ee=l()(v),te=l()(x),ne=l()(k),re=l()(S),ae=l()(M),ie=l()(E),oe=l()(U),se=l()(C),ce=l()(R),le=l()(T),fe=l()(N),ue=l()(I),de=l()(L),pe=l()(V),he=l()(B),me=l()(W),ge=l()(q),be=l()(F),Ae=l()(D),ye=l()(Z),we=l()(O);Y.push([e.id,`/*!*************************************************************************************************************!*\\\n  !*** css ../../node_modules/css-loader/dist/cjs.js!../../node_modules/@fontsource/open-sans/400-italic.css ***!\n  \\*************************************************************************************************************/\n/* open-sans-cyrillic-ext-400-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 400;\n  src: url(${j}) format('woff2');\n  unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;\n}\n/* open-sans-cyrillic-400-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 400;\n  src: url(${z}) format('woff2');\n  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\n}\n/* open-sans-greek-ext-400-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 400;\n  src: url(${P}) format('woff2');\n  unicode-range: U+1F00-1FFF;\n}\n/* open-sans-greek-400-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 400;\n  src: url(${Q}) format('woff2');\n  unicode-range: U+0370-03FF;\n}\n/* open-sans-hebrew-400-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 400;\n  src: url(${K}) format('woff2');\n  unicode-range: U+0590-05FF, U+20AA, U+25CC, U+FB1D-FB4F;\n}\n/* open-sans-vietnamese-400-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 400;\n  src: url(${G}) format('woff2');\n  unicode-range: U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB;\n}\n/* open-sans-latin-ext-400-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 400;\n  src: url(${X}) format('woff2');\n  unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\n}\n/* open-sans-latin-400-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 400;\n  src: url(${J}) format('woff2');\n  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n}\n\n/*!*************************************************************************************************************!*\\\n  !*** css ../../node_modules/css-loader/dist/cjs.js!../../node_modules/@fontsource/open-sans/700-italic.css ***!\n  \\*************************************************************************************************************/\n/* open-sans-cyrillic-ext-700-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 700;\n  src: url(${H}) format('woff2');\n  unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;\n}\n/* open-sans-cyrillic-700-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 700;\n  src: url(${_}) format('woff2');\n  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\n}\n/* open-sans-greek-ext-700-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 700;\n  src: url(${$}) format('woff2');\n  unicode-range: U+1F00-1FFF;\n}\n/* open-sans-greek-700-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 700;\n  src: url(${ee}) format('woff2');\n  unicode-range: U+0370-03FF;\n}\n/* open-sans-hebrew-700-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 700;\n  src: url(${te}) format('woff2');\n  unicode-range: U+0590-05FF, U+20AA, U+25CC, U+FB1D-FB4F;\n}\n/* open-sans-vietnamese-700-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 700;\n  src: url(${ne}) format('woff2');\n  unicode-range: U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB;\n}\n/* open-sans-latin-ext-700-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 700;\n  src: url(${re}) format('woff2');\n  unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\n}\n/* open-sans-latin-700-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 700;\n  src: url(${ae}) format('woff2');\n  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n}\n\n/*!******************************************************************************************************!*\\\n  !*** css ../../node_modules/css-loader/dist/cjs.js!../../node_modules/@fontsource/open-sans/400.css ***!\n  \\******************************************************************************************************/\n/* open-sans-cyrillic-ext-400-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src: url(${ie}) format('woff2');\n  unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;\n}\n/* open-sans-cyrillic-400-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src: url(${oe}) format('woff2');\n  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\n}\n/* open-sans-greek-ext-400-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src: url(${se}) format('woff2');\n  unicode-range: U+1F00-1FFF;\n}\n/* open-sans-greek-400-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src: url(${ce}) format('woff2');\n  unicode-range: U+0370-03FF;\n}\n/* open-sans-hebrew-400-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src: url(${le}) format('woff2');\n  unicode-range: U+0590-05FF, U+20AA, U+25CC, U+FB1D-FB4F;\n}\n/* open-sans-vietnamese-400-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src: url(${fe}) format('woff2');\n  unicode-range: U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB;\n}\n/* open-sans-latin-ext-400-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src: url(${ue}) format('woff2');\n  unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\n}\n/* open-sans-latin-400-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src: url(${de}) format('woff2');\n  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n}\n\n/*!******************************************************************************************************!*\\\n  !*** css ../../node_modules/css-loader/dist/cjs.js!../../node_modules/@fontsource/open-sans/700.css ***!\n  \\******************************************************************************************************/\n/* open-sans-cyrillic-ext-700-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 700;\n  src: url(${pe}) format('woff2');\n  unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;\n}\n/* open-sans-cyrillic-700-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 700;\n  src: url(${he}) format('woff2');\n  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\n}\n/* open-sans-greek-ext-700-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 700;\n  src: url(${me}) format('woff2');\n  unicode-range: U+1F00-1FFF;\n}\n/* open-sans-greek-700-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 700;\n  src: url(${ge}) format('woff2');\n  unicode-range: U+0370-03FF;\n}\n/* open-sans-hebrew-700-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 700;\n  src: url(${be}) format('woff2');\n  unicode-range: U+0590-05FF, U+20AA, U+25CC, U+FB1D-FB4F;\n}\n/* open-sans-vietnamese-700-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 700;\n  src: url(${Ae}) format('woff2');\n  unicode-range: U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB;\n}\n/* open-sans-latin-ext-700-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 700;\n  src: url(${ye}) format('woff2');\n  unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\n}\n/* open-sans-latin-700-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 700;\n  src: url(${we}) format('woff2');\n  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n}\n\n/*!*****************************************************************************************************************!*\\\n  !*** css ../../node_modules/css-loader/dist/cjs.js!../../node_modules/sass-loader/dist/cjs.js!./src/index.scss ***!\n  \\*****************************************************************************************************************/\n/*\n * CSS for jsPsych experiments.\n *\n * This stylesheet provides minimal styling to make jsPsych\n * experiments look polished without any additional styles.\n */\n/* Container holding jsPsych content */\n.jspsych-display-element {\n  display: flex;\n  flex-direction: column;\n  overflow-y: auto;\n}\n\n.jspsych-display-element:focus {\n  outline: none;\n}\n\n.jspsych-content-wrapper {\n  display: flex;\n  margin: auto;\n  flex: 1 1 100%;\n  width: 100%;\n}\n\n.jspsych-content {\n  text-align: center;\n  margin: auto; /* this is for overflowing content */\n}\n\n.jspsych-top {\n  align-items: flex-start;\n}\n\n.jspsych-middle {\n  align-items: center;\n}\n\n/* fonts and type */\n.jspsych-display-element {\n  font-family: "Open Sans", "Arial", sans-serif;\n  font-size: 18px;\n  line-height: 1.6em;\n}\n\n/* Form elements like input fields and buttons */\n.jspsych-display-element input[type=text] {\n  font-family: "Open Sans", "Arial", sans-serif;\n  font-size: 14px;\n}\n\n/* Buttons and Button Groups */\n.jspsych-btn-group-flex {\n  display: flex;\n  justify-content: center;\n}\n\n.jspsych-btn-group-grid {\n  display: grid;\n  grid-auto-columns: max-content;\n  max-width: fit-content;\n  margin-right: auto;\n  margin-left: auto;\n}\n\n.jspsych-btn {\n  display: inline-block;\n  padding: 8px 12px;\n  margin: 0.75em;\n  font-size: 14px;\n  font-weight: 400;\n  font-family: "Open Sans", "Arial", sans-serif;\n  cursor: pointer;\n  line-height: 1.4;\n  text-align: center;\n  white-space: nowrap;\n  vertical-align: middle;\n  background-image: none;\n  border: 1px solid transparent;\n  border-radius: 4px;\n  color: #333;\n  background-color: #fff;\n  border-color: #ccc;\n}\n\n/* only apply the hover style on devices with a mouse/pointer that can hover - issue #977 */\n@media (hover: hover) {\n  .jspsych-btn:hover {\n    background-color: #ddd;\n    border-color: #aaa;\n  }\n}\n.jspsych-btn:active {\n  background-color: #ddd;\n  border-color: #000000;\n}\n\n.jspsych-btn:disabled {\n  background-color: #eee;\n  color: #aaa;\n  border-color: #ccc;\n  cursor: not-allowed;\n}\n\n/* custom style for input[type="range] (slider) to improve alignment between positions and labels */\n.jspsych-slider {\n  appearance: none;\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  width: 100%;\n  background: transparent;\n}\n\n.jspsych-slider:focus {\n  outline: none;\n}\n\n.jspsych-slider::-webkit-slider-runnable-track {\n  appearance: none;\n  -webkit-appearance: none;\n  width: 100%;\n  height: 8px;\n  cursor: pointer;\n  background: #eee;\n  box-shadow: 0px 0px 0px #000000, 0px 0px 0px #0d0d0d;\n  border-radius: 2px;\n  border: 1px solid #aaa;\n}\n\n.jspsych-slider::-moz-range-track {\n  appearance: none;\n  width: 100%;\n  height: 8px;\n  cursor: pointer;\n  background: #eee;\n  box-shadow: 0px 0px 0px #000000, 0px 0px 0px #0d0d0d;\n  border-radius: 2px;\n  border: 1px solid #aaa;\n}\n\n.jspsych-slider::-ms-track {\n  appearance: none;\n  width: 99%;\n  height: 14px;\n  cursor: pointer;\n  background: #eee;\n  box-shadow: 0px 0px 0px #000000, 0px 0px 0px #0d0d0d;\n  border-radius: 2px;\n  border: 1px solid #aaa;\n}\n\n.jspsych-slider::-webkit-slider-thumb {\n  border: 1px solid #666;\n  height: 24px;\n  width: 15px;\n  border-radius: 5px;\n  background: #ffffff;\n  cursor: pointer;\n  -webkit-appearance: none;\n  margin-top: -9px;\n}\n\n.jspsych-slider::-moz-range-thumb {\n  border: 1px solid #666;\n  height: 24px;\n  width: 15px;\n  border-radius: 5px;\n  background: #ffffff;\n  cursor: pointer;\n}\n\n.jspsych-slider::-ms-thumb {\n  border: 1px solid #666;\n  height: 20px;\n  width: 15px;\n  border-radius: 5px;\n  background: #ffffff;\n  cursor: pointer;\n  margin-top: -2px;\n}\n\n/* progress bar */\n#jspsych-progressbar-container {\n  color: #555;\n  border-bottom: 1px solid #dedede;\n  background-color: #f9f9f9;\n  margin-bottom: 1em;\n  text-align: center;\n  padding: 8px 0px;\n  width: 100%;\n  line-height: 1em;\n}\n\n#jspsych-progressbar-container span {\n  font-size: 14px;\n  padding-right: 14px;\n}\n\n#jspsych-progressbar-outer {\n  background-color: #eee;\n  width: 50%;\n  margin: auto;\n  height: 14px;\n  display: inline-block;\n  vertical-align: middle;\n  box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.1);\n}\n\n#jspsych-progressbar-inner {\n  background-color: #aaa;\n  width: 0%;\n  height: 100%;\n}\n\n/* Appearance of jsPsych.data.displayData() */\n#jspsych-data-display {\n  text-align: left;\n}\n`,""]);const ve=Y}},t={};function __webpack_require__(n){var r=t[n];if(void 0!==r)return r.exports;var a=t[n]={id:n,exports:{}};return e[n](a,a.exports,__webpack_require__),a.exports}function ascending(e,t){return null==e||null==t?NaN:e<t?-1:e>t?1:e>=t?0:NaN}function descending(e,t){return null==e||null==t?NaN:t<e?-1:t>e?1:t>=e?0:NaN}function bisector(e){let t,n,r;function left(e,r,a=0,o=e.length){if(a<o){if(0!==t(r,r))return o;do{const t=a+o>>>1;n(e[t],r)<0?a=t+1:o=t}while(a<o)}return a}return 2!==e.length?(t=ascending,n=(t,n)=>ascending(e(t),n),r=(t,n)=>e(t)-n):(t=e===ascending||e===descending?e:zero,n=e,r=e),{left,center:function center(e,t,n=0,a=e.length){const o=left(e,t,n,a-1);return o>n&&r(e[o-1],t)>-r(e[o],t)?o-1:o},right:function right(e,r,a=0,o=e.length){if(a<o){if(0!==t(r,r))return o;do{const t=a+o>>>1;n(e[t],r)<=0?a=t+1:o=t}while(a<o)}return a}}}function zero(){return 0}function cross_length(e){return 0|e.length}function empty(e){return!(e>0)}function arrayify(e){return"object"!=typeof e||"length"in e?e:Array.from(e)}function cumsum(e,t){var n=0,r=0;return Float64Array.from(e,void 0===t?e=>n+=+e||0:a=>n+=+t(a,r++,e)||0)}function variance(e,t){let n,r=0,a=0,o=0;if(void 0===t)for(let t of e)null!=t&&(t=+t)>=t&&(n=t-a,a+=n/++r,o+=n*(t-a));else{let s=-1;for(let c of e)null!=(c=t(c,++s,e))&&(c=+c)>=c&&(n=c-a,a+=n/++r,o+=n*(c-a))}if(r>1)return o/(r-1)}function deviation(e,t){const n=variance(e,t);return n?Math.sqrt(n):n}function extent(e,t){let n,r;if(void 0===t)for(const t of e)null!=t&&(void 0===n?t>=t&&(n=r=t):(n>t&&(n=t),r<t&&(r=t)));else{let a=-1;for(let o of e)null!=(o=t(o,++a,e))&&(void 0===n?o>=o&&(n=r=o):(n>o&&(n=o),r<o&&(r=o)))}return[n,r]}__webpack_require__.m=e,__webpack_require__.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return __webpack_require__.d(t,{a:t}),t},__webpack_require__.d=(e,t)=>{for(var n in t)__webpack_require__.o(t,n)&&!__webpack_require__.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},__webpack_require__.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),__webpack_require__.b=new URL("./",import.meta.url),__webpack_require__.nc=void 0;class InternMap extends Map{constructor(e,t=src_keyof){if(super(),Object.defineProperties(this,{_intern:{value:new Map},_key:{value:t}}),null!=e)for(const[t,n]of e)this.set(t,n)}get(e){return super.get(intern_get(this,e))}has(e){return super.has(intern_get(this,e))}set(e,t){return super.set(intern_set(this,e),t)}delete(e){return super.delete(intern_delete(this,e))}}class InternSet extends Set{constructor(e,t=src_keyof){if(super(),Object.defineProperties(this,{_intern:{value:new Map},_key:{value:t}}),null!=e)for(const t of e)this.add(t)}has(e){return super.has(intern_get(this,e))}add(e){return super.add(intern_set(this,e))}delete(e){return super.delete(intern_delete(this,e))}}function intern_get({_intern:e,_key:t},n){const r=t(n);return e.has(r)?e.get(r):n}function intern_set({_intern:e,_key:t},n){const r=t(n);return e.has(r)?e.get(r):(e.set(r,n),n)}function intern_delete({_intern:e,_key:t},n){const r=t(n);return e.has(r)&&(n=e.get(r),e.delete(r)),n}function src_keyof(e){return null!==e&&"object"==typeof e?e.valueOf():e}function identity_identity(e){return e}function group_group(e,...t){return nest(e,identity_identity,identity_identity,t)}function rollup(e,t,...n){return nest(e,identity_identity,t,n)}function rollups(e,t,...n){return nest(e,Array.from,t,n)}function nest(e,t,n,r){return function regroup(e,a){if(a>=r.length)return n(e);const o=new InternMap,s=r[a++];let c=-1;for(const t of e){const n=s(t,++c,e),r=o.get(n);r?r.push(t):o.set(n,[t])}for(const[e,t]of o)o.set(e,regroup(t,a));return t(o)}(e,0)}function sort(e,...t){if("function"!=typeof e[Symbol.iterator])throw new TypeError("values is not iterable");e=Array.from(e);let[n]=t;if(n&&2!==n.length||t.length>1){const r=Uint32Array.from(e,((e,t)=>t));return t.length>1?(t=t.map((t=>e.map(t))),r.sort(((e,n)=>{for(const r of t){const t=sort_ascendingDefined(r[e],r[n]);if(t)return t}}))):(n=e.map(n),r.sort(((e,t)=>sort_ascendingDefined(n[e],n[t])))),function permute(e,t){return Array.from(t,(t=>e[t]))}(e,r)}return e.sort(compareDefined(n))}function compareDefined(e=ascending){if(e===ascending)return sort_ascendingDefined;if("function"!=typeof e)throw new TypeError("compare is not a function");return(t,n)=>{const r=e(t,n);return r||0===r?r:(0===e(n,n))-(0===e(t,t))}}function sort_ascendingDefined(e,t){return(null==e||!(e>=e))-(null==t||!(t>=t))||(e<t?-1:e>t?1:0)}function groupSort(e,t,n){return(2!==t.length?sort(rollup(e,t,n),(([e,t],[n,r])=>ascending(t,r)||ascending(e,n))):sort(group_group(e,n),(([e,n],[r,a])=>t(n,a)||ascending(e,r)))).map((([e])=>e))}function max(e,t){let n;if(void 0===t)for(const t of e)null!=t&&(n<t||void 0===n&&t>=t)&&(n=t);else{let r=-1;for(let a of e)null!=(a=t(a,++r,e))&&(n<a||void 0===n&&a>=a)&&(n=a)}return n}function maxIndex_maxIndex(e,t){let n,r=-1,a=-1;if(void 0===t)for(const t of e)++a,null!=t&&(n<t||void 0===n&&t>=t)&&(n=t,r=a);else for(let o of e)null!=(o=t(o,++a,e))&&(n<o||void 0===n&&o>=o)&&(n=o,r=a);return r}function mean(e,t){let n=0,r=0;if(void 0===t)for(let t of e)null!=t&&(t=+t)>=t&&(++n,r+=t);else{let a=-1;for(let o of e)null!=(o=t(o,++a,e))&&(o=+o)>=o&&(++n,r+=o)}if(n)return r/n}function min(e,t){let n;if(void 0===t)for(const t of e)null!=t&&(n>t||void 0===n&&t>=t)&&(n=t);else{let r=-1;for(let a of e)null!=(a=t(a,++r,e))&&(n>a||void 0===n&&a>=a)&&(n=a)}return n}function quickselect_quickselect(e,t,n=0,r=1/0,a){if(t=Math.floor(t),n=Math.floor(Math.max(0,n)),r=Math.floor(Math.min(e.length-1,r)),!(n<=t&&t<=r))return e;for(a=void 0===a?sort_ascendingDefined:compareDefined(a);r>n;){if(r-n>600){const o=r-n+1,s=t-n+1,c=Math.log(o),l=.5*Math.exp(2*c/3),f=.5*Math.sqrt(c*l*(o-l)/o)*(s-o/2<0?-1:1);quickselect_quickselect(e,t,Math.max(n,Math.floor(t-s*l/o+f)),Math.min(r,Math.floor(t+(o-s)*l/o+f)),a)}const o=e[t];let s=n,c=r;for(swap(e,n,t),a(e[r],o)>0&&swap(e,n,r);s<c;){for(swap(e,s,c),++s,--c;a(e[s],o)<0;)++s;for(;a(e[c],o)>0;)--c}0===a(e[n],o)?swap(e,n,c):(++c,swap(e,c,r)),c<=t&&(n=c+1),t<=c&&(r=c-1)}return e}function swap(e,t,n){const r=e[t];e[t]=e[n],e[n]=r}function number_number(e){return null===e?NaN:+e}function quantile(e,t,n){if(e=Float64Array.from(function*numbers(e,t){if(void 0===t)for(let t of e)null!=t&&(t=+t)>=t&&(yield t);else{let n=-1;for(let r of e)null!=(r=t(r,++n,e))&&(r=+r)>=r&&(yield r)}}(e,n)),(r=e.length)&&!isNaN(t=+t)){if(t<=0||r<2)return min(e);if(t>=1)return max(e);var r,a=(r-1)*t,o=Math.floor(a),s=max(quickselect_quickselect(e,o).subarray(0,o+1));return s+(min(e.subarray(o+1))-s)*(a-o)}}function quantileSorted(e,t,n=number_number){if((r=e.length)&&!isNaN(t=+t)){if(t<=0||r<2)return+n(e[0],0,e);if(t>=1)return+n(e[r-1],r-1,e);var r,a=(r-1)*t,o=Math.floor(a),s=+n(e[o],o,e);return s+(+n(e[o+1],o+1,e)-s)*(a-o)}}function median(e,t){return quantile(e,.5,t)}function minIndex_minIndex(e,t){let n,r=-1,a=-1;if(void 0===t)for(const t of e)++a,null!=t&&(n>t||void 0===n&&t>=t)&&(n=t,r=a);else for(let o of e)null!=(o=t(o,++a,e))&&(n>o||void 0===n&&o>=o)&&(n=o,r=a);return r}function mode(e,t){const n=new InternMap;if(void 0===t)for(let t of e)null!=t&&t>=t&&n.set(t,(n.get(t)||0)+1);else{let r=-1;for(let a of e)null!=(a=t(a,++r,e))&&a>=a&&n.set(a,(n.get(a)||0)+1)}let r,a=0;for(const[e,t]of n)t>a&&(a=t,r=e);return r}function pair(e,t){return[e,t]}function range_range(e,t,n){e=+e,t=+t,n=(a=arguments.length)<2?(t=e,e=0,1):a<3?1:+n;for(var r=-1,a=0|Math.max(0,Math.ceil((t-e)/n)),o=new Array(a);++r<a;)o[r]=e+r*n;return o}function greatest_greatest(e,t=ascending){let n,r=!1;if(1===t.length){let a;for(const o of e){const e=t(o);(r?ascending(e,a)>0:0===ascending(e,e))&&(n=o,a=e,r=!0)}}else for(const a of e)(r?t(a,n)>0:0===t(a,a))&&(n=a,r=!0);return n}function sum(e,t){let n=0;if(void 0===t)for(let t of e)(t=+t)&&(n+=t);else{let r=-1;for(let a of e)(a=+t(a,++r,e))&&(n+=a)}return n}const n=Math.sqrt(50),r=Math.sqrt(10),a=Math.sqrt(2);function tickSpec(e,t,o){const s=(t-e)/Math.max(0,o),c=Math.floor(Math.log10(s)),l=s/Math.pow(10,c),f=l>=n?10:l>=r?5:l>=a?2:1;let u,d,p;return c<0?(p=Math.pow(10,-c)/f,u=Math.round(e*p),d=Math.round(t*p),u/p<e&&++u,d/p>t&&--d,p=-p):(p=Math.pow(10,c)*f,u=Math.round(e/p),d=Math.round(t/p),u*p<e&&++u,d*p>t&&--d),d<u&&.5<=o&&o<2?tickSpec(e,t,2*o):[u,d,p]}function ticks(e,t,n){if(!((n=+n)>0))return[];if((e=+e)===(t=+t))return[e];const r=t<e,[a,o,s]=r?tickSpec(t,e,n):tickSpec(e,t,n);if(!(o>=a))return[];const c=o-a+1,l=new Array(c);if(r)if(s<0)for(let e=0;e<c;++e)l[e]=(o-e)/-s;else for(let e=0;e<c;++e)l[e]=(o-e)*s;else if(s<0)for(let e=0;e<c;++e)l[e]=(a+e)/-s;else for(let e=0;e<c;++e)l[e]=(a+e)*s;return l}function tickIncrement(e,t,n){return tickSpec(e=+e,t=+t,n=+n)[2]}function tickStep(e,t,n){n=+n;const r=(t=+t)<(e=+e),a=r?tickIncrement(t,e,n):tickIncrement(e,t,n);return(r?-1:1)*(a<0?1/-a:a)}function reverse_reverse(e){if("function"!=typeof e[Symbol.iterator])throw new TypeError("values is not iterable");return Array.from(e).reverse()}function src_identity(e){return e}var o=1e-6;function translateX(e){return"translate("+e+",0)"}function translateY(e){return"translate(0,"+e+")"}function axis_number(e){return t=>+e(t)}function center(e,t){return t=Math.max(0,e.bandwidth()-2*t)/2,e.round()&&(t=Math.round(t)),n=>+e(n)+t}function entering(){return!this.__axis}function axis(e,t){var n=[],r=null,a=null,s=6,c=6,l=3,f="undefined"!=typeof window&&window.devicePixelRatio>1?0:.5,u=1===e||4===e?-1:1,d=4===e||2===e?"x":"y",p=1===e||3===e?translateX:translateY;function axis(h){var m=null==r?t.ticks?t.ticks.apply(t,n):t.domain():r,g=null==a?t.tickFormat?t.tickFormat.apply(t,n):src_identity:a,b=Math.max(s,0)+l,A=t.range(),y=+A[0]+f,w=+A[A.length-1]+f,v=(t.bandwidth?center:axis_number)(t.copy(),f),x=h.selection?h.selection():h,k=x.selectAll(".domain").data([null]),S=x.selectAll(".tick").data(m,t).order(),M=S.exit(),E=S.enter().append("g").attr("class","tick"),U=S.select("line"),C=S.select("text");k=k.merge(k.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),S=S.merge(E),U=U.merge(E.append("line").attr("stroke","currentColor").attr(d+"2",u*s)),C=C.merge(E.append("text").attr("fill","currentColor").attr(d,u*b).attr("dy",1===e?"0em":3===e?"0.71em":"0.32em")),h!==x&&(k=k.transition(h),S=S.transition(h),U=U.transition(h),C=C.transition(h),M=M.transition(h).attr("opacity",o).attr("transform",(function(e){return isFinite(e=v(e))?p(e+f):this.getAttribute("transform")})),E.attr("opacity",o).attr("transform",(function(e){var t=this.parentNode.__axis;return p((t&&isFinite(t=t(e))?t:v(e))+f)}))),M.remove(),k.attr("d",4===e||2===e?c?"M"+u*c+","+y+"H"+f+"V"+w+"H"+u*c:"M"+f+","+y+"V"+w:c?"M"+y+","+u*c+"V"+f+"H"+w+"V"+u*c:"M"+y+","+f+"H"+w),S.attr("opacity",1).attr("transform",(function(e){return p(v(e)+f)})),U.attr(d+"2",u*s),C.attr(d,u*b).text(g),x.filter(entering).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",2===e?"start":4===e?"end":"middle"),x.each((function(){this.__axis=v}))}return axis.scale=function(e){return arguments.length?(t=e,axis):t},axis.ticks=function(){return n=Array.from(arguments),axis},axis.tickArguments=function(e){return arguments.length?(n=null==e?[]:Array.from(e),axis):n.slice()},axis.tickValues=function(e){return arguments.length?(r=null==e?null:Array.from(e),axis):r&&r.slice()},axis.tickFormat=function(e){return arguments.length?(a=e,axis):a},axis.tickSize=function(e){return arguments.length?(s=c=+e,axis):s},axis.tickSizeInner=function(e){return arguments.length?(s=+e,axis):s},axis.tickSizeOuter=function(e){return arguments.length?(c=+e,axis):c},axis.tickPadding=function(e){return arguments.length?(l=+e,axis):l},axis.offset=function(e){return arguments.length?(f=+e,axis):f},axis}function none(){}function selector(e){return null==e?none:function(){return this.querySelector(e)}}function selectorAll_empty(){return[]}function selectorAll(e){return null==e?selectorAll_empty:function(){return this.querySelectorAll(e)}}function arrayAll(e){return function(){return function array(e){return null==e?[]:Array.isArray(e)?e:Array.from(e)}(e.apply(this,arguments))}}function matcher(e){return function(){return this.matches(e)}}function childMatcher(e){return function(t){return t.matches(e)}}var s=Array.prototype.find;function childFirst(){return this.firstElementChild}var c=Array.prototype.filter;function children(){return Array.from(this.children)}function sparse(e){return new Array(e.length)}function EnterNode(e,t){this.ownerDocument=e.ownerDocument,this.namespaceURI=e.namespaceURI,this._next=null,this._parent=e,this.__data__=t}function bindIndex(e,t,n,r,a,o){for(var s,c=0,l=t.length,f=o.length;c<f;++c)(s=t[c])?(s.__data__=o[c],r[c]=s):n[c]=new EnterNode(e,o[c]);for(;c<l;++c)(s=t[c])&&(a[c]=s)}function bindKey(e,t,n,r,a,o,s){var c,l,f,u=new Map,d=t.length,p=o.length,h=new Array(d);for(c=0;c<d;++c)(l=t[c])&&(h[c]=f=s.call(l,l.__data__,c,t)+"",u.has(f)?a[c]=l:u.set(f,l));for(c=0;c<p;++c)f=s.call(e,o[c],c,o)+"",(l=u.get(f))?(r[c]=l,l.__data__=o[c],u.delete(f)):n[c]=new EnterNode(e,o[c]);for(c=0;c<d;++c)(l=t[c])&&u.get(h[c])===l&&(a[c]=l)}function datum(e){return e.__data__}function arraylike(e){return"object"==typeof e&&"length"in e?e:Array.from(e)}function sort_ascending(e,t){return e<t?-1:e>t?1:e>=t?0:NaN}EnterNode.prototype={constructor:EnterNode,appendChild:function(e){return this._parent.insertBefore(e,this._next)},insertBefore:function(e,t){return this._parent.insertBefore(e,t)},querySelector:function(e){return this._parent.querySelector(e)},querySelectorAll:function(e){return this._parent.querySelectorAll(e)}};var l="http://www.w3.org/1999/xhtml";const f={svg:"http://www.w3.org/2000/svg",xhtml:l,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function namespace(e){var t=e+="",n=t.indexOf(":");return n>=0&&"xmlns"!==(t=e.slice(0,n))&&(e=e.slice(n+1)),f.hasOwnProperty(t)?{space:f[t],local:e}:e}function attrRemove(e){return function(){this.removeAttribute(e)}}function attrRemoveNS(e){return function(){this.removeAttributeNS(e.space,e.local)}}function attrConstant(e,t){return function(){this.setAttribute(e,t)}}function attrConstantNS(e,t){return function(){this.setAttributeNS(e.space,e.local,t)}}function attrFunction(e,t){return function(){var n=t.apply(this,arguments);null==n?this.removeAttribute(e):this.setAttribute(e,n)}}function attrFunctionNS(e,t){return function(){var n=t.apply(this,arguments);null==n?this.removeAttributeNS(e.space,e.local):this.setAttributeNS(e.space,e.local,n)}}function src_window(e){return e.ownerDocument&&e.ownerDocument.defaultView||e.document&&e||e.defaultView}function styleRemove(e){return function(){this.style.removeProperty(e)}}function styleConstant(e,t,n){return function(){this.style.setProperty(e,t,n)}}function styleFunction(e,t,n){return function(){var r=t.apply(this,arguments);null==r?this.style.removeProperty(e):this.style.setProperty(e,r,n)}}function styleValue(e,t){return e.style.getPropertyValue(t)||src_window(e).getComputedStyle(e,null).getPropertyValue(t)}function propertyRemove(e){return function(){delete this[e]}}function propertyConstant(e,t){return function(){this[e]=t}}function propertyFunction(e,t){return function(){var n=t.apply(this,arguments);null==n?delete this[e]:this[e]=n}}function classArray(e){return e.trim().split(/^|\s+/)}function classList(e){return e.classList||new ClassList(e)}function ClassList(e){this._node=e,this._names=classArray(e.getAttribute("class")||"")}function classedAdd(e,t){for(var n=classList(e),r=-1,a=t.length;++r<a;)n.add(t[r])}function classedRemove(e,t){for(var n=classList(e),r=-1,a=t.length;++r<a;)n.remove(t[r])}function classedTrue(e){return function(){classedAdd(this,e)}}function classedFalse(e){return function(){classedRemove(this,e)}}function classedFunction(e,t){return function(){(t.apply(this,arguments)?classedAdd:classedRemove)(this,e)}}function textRemove(){this.textContent=""}function textConstant(e){return function(){this.textContent=e}}function textFunction(e){return function(){var t=e.apply(this,arguments);this.textContent=null==t?"":t}}function htmlRemove(){this.innerHTML=""}function htmlConstant(e){return function(){this.innerHTML=e}}function htmlFunction(e){return function(){var t=e.apply(this,arguments);this.innerHTML=null==t?"":t}}function raise(){this.nextSibling&&this.parentNode.appendChild(this)}function lower(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function creatorInherit(e){return function(){var t=this.ownerDocument,n=this.namespaceURI;return n===l&&t.documentElement.namespaceURI===l?t.createElement(e):t.createElementNS(n,e)}}function creatorFixed(e){return function(){return this.ownerDocument.createElementNS(e.space,e.local)}}function creator(e){var t=namespace(e);return(t.local?creatorFixed:creatorInherit)(t)}function constantNull(){return null}function remove(){var e=this.parentNode;e&&e.removeChild(this)}function selection_cloneShallow(){var e=this.cloneNode(!1),t=this.parentNode;return t?t.insertBefore(e,this.nextSibling):e}function selection_cloneDeep(){var e=this.cloneNode(!0),t=this.parentNode;return t?t.insertBefore(e,this.nextSibling):e}function onRemove(e){return function(){var t=this.__on;if(t){for(var n,r=0,a=-1,o=t.length;r<o;++r)n=t[r],e.type&&n.type!==e.type||n.name!==e.name?t[++a]=n:this.removeEventListener(n.type,n.listener,n.options);++a?t.length=a:delete this.__on}}}function onAdd(e,t,n){return function(){var r,a=this.__on,o=function contextListener(e){return function(t){e.call(this,t,this.__data__)}}(t);if(a)for(var s=0,c=a.length;s<c;++s)if((r=a[s]).type===e.type&&r.name===e.name)return this.removeEventListener(r.type,r.listener,r.options),this.addEventListener(r.type,r.listener=o,r.options=n),void(r.value=t);this.addEventListener(e.type,o,n),r={type:e.type,name:e.name,value:t,listener:o,options:n},a?a.push(r):this.__on=[r]}}function dispatchEvent(e,t,n){var r=src_window(e),a=r.CustomEvent;"function"==typeof a?a=new a(t,n):(a=r.document.createEvent("Event"),n?(a.initEvent(t,n.bubbles,n.cancelable),a.detail=n.detail):a.initEvent(t,!1,!1)),e.dispatchEvent(a)}function dispatchConstant(e,t){return function(){return dispatchEvent(this,e,t)}}function dispatchFunction(e,t){return function(){return dispatchEvent(this,e,t.apply(this,arguments))}}ClassList.prototype={add:function(e){this._names.indexOf(e)<0&&(this._names.push(e),this._node.setAttribute("class",this._names.join(" ")))},remove:function(e){var t=this._names.indexOf(e);t>=0&&(this._names.splice(t,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(e){return this._names.indexOf(e)>=0}};var u=[null];function Selection(e,t){this._groups=e,this._parents=t}function selection(){return new Selection([[document.documentElement]],u)}Selection.prototype=selection.prototype={constructor:Selection,select:function selection_select(e){"function"!=typeof e&&(e=selector(e));for(var t=this._groups,n=t.length,r=new Array(n),a=0;a<n;++a)for(var o,s,c=t[a],l=c.length,f=r[a]=new Array(l),u=0;u<l;++u)(o=c[u])&&(s=e.call(o,o.__data__,u,c))&&("__data__"in o&&(s.__data__=o.__data__),f[u]=s);return new Selection(r,this._parents)},selectAll:function selectAll(e){e="function"==typeof e?arrayAll(e):selectorAll(e);for(var t=this._groups,n=t.length,r=[],a=[],o=0;o<n;++o)for(var s,c=t[o],l=c.length,f=0;f<l;++f)(s=c[f])&&(r.push(e.call(s,s.__data__,f,c)),a.push(s));return new Selection(r,a)},selectChild:function selectChild(e){return this.select(null==e?childFirst:function childFind(e){return function(){return s.call(this.children,e)}}("function"==typeof e?e:childMatcher(e)))},selectChildren:function selectChildren(e){return this.selectAll(null==e?children:function childrenFilter(e){return function(){return c.call(this.children,e)}}("function"==typeof e?e:childMatcher(e)))},filter:function selection_filter(e){"function"!=typeof e&&(e=matcher(e));for(var t=this._groups,n=t.length,r=new Array(n),a=0;a<n;++a)for(var o,s=t[a],c=s.length,l=r[a]=[],f=0;f<c;++f)(o=s[f])&&e.call(o,o.__data__,f,s)&&l.push(o);return new Selection(r,this._parents)},data:function data(e,t){if(!arguments.length)return Array.from(this,datum);var n=t?bindKey:bindIndex,r=this._parents,a=this._groups;"function"!=typeof e&&(e=function src_constant(e){return function(){return e}}(e));for(var o=a.length,s=new Array(o),c=new Array(o),l=new Array(o),f=0;f<o;++f){var u=r[f],d=a[f],p=d.length,h=arraylike(e.call(u,u&&u.__data__,f,r)),m=h.length,g=c[f]=new Array(m),b=s[f]=new Array(m);n(u,d,g,b,l[f]=new Array(p),h,t);for(var A,y,w=0,v=0;w<m;++w)if(A=g[w]){for(w>=v&&(v=w+1);!(y=b[v])&&++v<m;);A._next=y||null}}return(s=new Selection(s,r))._enter=c,s._exit=l,s},enter:function enter(){return new Selection(this._enter||this._groups.map(sparse),this._parents)},exit:function exit(){return new Selection(this._exit||this._groups.map(sparse),this._parents)},join:function join(e,t,n){var r=this.enter(),a=this,o=this.exit();return"function"==typeof e?(r=e(r))&&(r=r.selection()):r=r.append(e+""),null!=t&&(a=t(a))&&(a=a.selection()),null==n?o.remove():n(o),r&&a?r.merge(a).order():a},merge:function merge(e){for(var t=e.selection?e.selection():e,n=this._groups,r=t._groups,a=n.length,o=r.length,s=Math.min(a,o),c=new Array(a),l=0;l<s;++l)for(var f,u=n[l],d=r[l],p=u.length,h=c[l]=new Array(p),m=0;m<p;++m)(f=u[m]||d[m])&&(h[m]=f);for(;l<a;++l)c[l]=n[l];return new Selection(c,this._parents)},selection:function selection_selection(){return this},order:function order(){for(var e=this._groups,t=-1,n=e.length;++t<n;)for(var r,a=e[t],o=a.length-1,s=a[o];--o>=0;)(r=a[o])&&(s&&4^r.compareDocumentPosition(s)&&s.parentNode.insertBefore(r,s),s=r);return this},sort:function selection_sort(e){function compareNode(t,n){return t&&n?e(t.__data__,n.__data__):!t-!n}e||(e=sort_ascending);for(var t=this._groups,n=t.length,r=new Array(n),a=0;a<n;++a){for(var o,s=t[a],c=s.length,l=r[a]=new Array(c),f=0;f<c;++f)(o=s[f])&&(l[f]=o);l.sort(compareNode)}return new Selection(r,this._parents).order()},call:function call(){var e=arguments[0];return arguments[0]=this,e.apply(null,arguments),this},nodes:function nodes(){return Array.from(this)},node:function node(){for(var e=this._groups,t=0,n=e.length;t<n;++t)for(var r=e[t],a=0,o=r.length;a<o;++a){var s=r[a];if(s)return s}return null},size:function size(){let e=0;for(const t of this)++e;return e},empty:function selection_empty(){return!this.node()},each:function each(e){for(var t=this._groups,n=0,r=t.length;n<r;++n)for(var a,o=t[n],s=0,c=o.length;s<c;++s)(a=o[s])&&e.call(a,a.__data__,s,o);return this},attr:function attr(e,t){var n=namespace(e);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==t?n.local?attrRemoveNS:attrRemove:"function"==typeof t?n.local?attrFunctionNS:attrFunction:n.local?attrConstantNS:attrConstant)(n,t))},style:function style(e,t,n){return arguments.length>1?this.each((null==t?styleRemove:"function"==typeof t?styleFunction:styleConstant)(e,t,null==n?"":n)):styleValue(this.node(),e)},property:function property(e,t){return arguments.length>1?this.each((null==t?propertyRemove:"function"==typeof t?propertyFunction:propertyConstant)(e,t)):this.node()[e]},classed:function classed(e,t){var n=classArray(e+"");if(arguments.length<2){for(var r=classList(this.node()),a=-1,o=n.length;++a<o;)if(!r.contains(n[a]))return!1;return!0}return this.each(("function"==typeof t?classedFunction:t?classedTrue:classedFalse)(n,t))},text:function selection_text(e){return arguments.length?this.each(null==e?textRemove:("function"==typeof e?textFunction:textConstant)(e)):this.node().textContent},html:function html(e){return arguments.length?this.each(null==e?htmlRemove:("function"==typeof e?htmlFunction:htmlConstant)(e)):this.node().innerHTML},raise:function selection_raise(){return this.each(raise)},lower:function selection_lower(){return this.each(lower)},append:function append(e){var t="function"==typeof e?e:creator(e);return this.select((function(){return this.appendChild(t.apply(this,arguments))}))},insert:function insert(e,t){var n="function"==typeof e?e:creator(e),r=null==t?constantNull:"function"==typeof t?t:selector(t);return this.select((function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function selection_remove(){return this.each(remove)},clone:function clone(e){return this.select(e?selection_cloneDeep:selection_cloneShallow)},datum:function selection_datum(e){return arguments.length?this.property("__data__",e):this.node().__data__},on:function on(e,t,n){var r,a,o=function parseTypenames(e){return e.trim().split(/^|\s+/).map((function(e){var t="",n=e.indexOf(".");return n>=0&&(t=e.slice(n+1),e=e.slice(0,n)),{type:e,name:t}}))}(e+""),s=o.length;if(!(arguments.length<2)){for(c=t?onAdd:onRemove,r=0;r<s;++r)this.each(c(o[r],t,n));return this}var c=this.node().__on;if(c)for(var l,f=0,u=c.length;f<u;++f)for(r=0,l=c[f];r<s;++r)if((a=o[r]).type===l.type&&a.name===l.name)return l.value},dispatch:function selection_dispatch(e,t){return this.each(("function"==typeof t?dispatchFunction:dispatchConstant)(e,t))},[Symbol.iterator]:function*iterator(){for(var e=this._groups,t=0,n=e.length;t<n;++t)for(var r,a=e[t],o=0,s=a.length;o<s;++o)(r=a[o])&&(yield r)}};const d=selection;var p={value:()=>{}};function dispatch_dispatch(){for(var e,t=0,n=arguments.length,r={};t<n;++t){if(!(e=arguments[t]+"")||e in r||/[\s.]/.test(e))throw new Error("illegal type: "+e);r[e]=[]}return new Dispatch(r)}function Dispatch(e){this._=e}function get(e,t){for(var n,r=0,a=e.length;r<a;++r)if((n=e[r]).name===t)return n.value}function set(e,t,n){for(var r=0,a=e.length;r<a;++r)if(e[r].name===t){e[r]=p,e=e.slice(0,r).concat(e.slice(r+1));break}return null!=n&&e.push({name:t,value:n}),e}Dispatch.prototype=dispatch_dispatch.prototype={constructor:Dispatch,on:function(e,t){var n,r=this._,a=function dispatch_parseTypenames(e,t){return e.trim().split(/^|\s+/).map((function(e){var n="",r=e.indexOf(".");if(r>=0&&(n=e.slice(r+1),e=e.slice(0,r)),e&&!t.hasOwnProperty(e))throw new Error("unknown type: "+e);return{type:e,name:n}}))}(e+"",r),o=-1,s=a.length;if(!(arguments.length<2)){if(null!=t&&"function"!=typeof t)throw new Error("invalid callback: "+t);for(;++o<s;)if(n=(e=a[o]).type)r[n]=set(r[n],e.name,t);else if(null==t)for(n in r)r[n]=set(r[n],e.name,null);return this}for(;++o<s;)if((n=(e=a[o]).type)&&(n=get(r[n],e.name)))return n},copy:function(){var e={},t=this._;for(var n in t)e[n]=t[n].slice();return new Dispatch(e)},call:function(e,t){if((n=arguments.length-2)>0)for(var n,r,a=new Array(n),o=0;o<n;++o)a[o]=arguments[o+2];if(!this._.hasOwnProperty(e))throw new Error("unknown type: "+e);for(o=0,n=(r=this._[e]).length;o<n;++o)r[o].value.apply(t,a)},apply:function(e,t,n){if(!this._.hasOwnProperty(e))throw new Error("unknown type: "+e);for(var r=this._[e],a=0,o=r.length;a<o;++a)r[a].value.apply(t,n)}};const h=dispatch_dispatch;var m,g,b=0,A=0,y=0,w=0,v=0,x=0,k="object"==typeof performance&&performance.now?performance:Date,S="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(e){setTimeout(e,17)};function now(){return v||(S(clearNow),v=k.now()+x)}function clearNow(){v=0}function Timer(){this._call=this._time=this._next=null}function timer(e,t,n){var r=new Timer;return r.restart(e,t,n),r}function wake(){v=(w=k.now())+x,b=A=0;try{!function timerFlush(){now(),++b;for(var e,t=m;t;)(e=v-t._time)>=0&&t._call.call(void 0,e),t=t._next;--b}()}finally{b=0,function nap(){var e,t,n=m,r=1/0;for(;n;)n._call?(r>n._time&&(r=n._time),e=n,n=n._next):(t=n._next,n._next=null,n=e?e._next=t:m=t);g=e,sleep(r)}(),v=0}}function poke(){var e=k.now(),t=e-w;t>1e3&&(x-=t,w=e)}function sleep(e){b||(A&&(A=clearTimeout(A)),e-v>24?(e<1/0&&(A=setTimeout(wake,e-k.now()-x)),y&&(y=clearInterval(y))):(y||(w=k.now(),y=setInterval(poke,1e3)),b=1,S(wake)))}function src_timeout(e,t,n){var r=new Timer;return t=null==t?0:+t,r.restart((n=>{r.stop(),e(n+t)}),t,n),r}Timer.prototype=timer.prototype={constructor:Timer,restart:function(e,t,n){if("function"!=typeof e)throw new TypeError("callback is not a function");n=(null==n?now():+n)+(null==t?0:+t),this._next||g===this||(g?g._next=this:m=this,g=this),this._call=e,this._time=n,sleep()},stop:function(){this._call&&(this._call=null,this._time=1/0,sleep())}};var M=h("start","end","cancel","interrupt"),E=[];function schedule(e,t,n,r,a,o){var s=e.__transition;if(s){if(n in s)return}else e.__transition={};!function create(e,t,n){var r,a=e.__transition;function schedule(e){n.state=1,n.timer.restart(start,n.delay,n.time),n.delay<=e&&start(e-n.delay)}function start(o){var s,c,l,f;if(1!==n.state)return stop();for(s in a)if((f=a[s]).name===n.name){if(3===f.state)return src_timeout(start);4===f.state?(f.state=6,f.timer.stop(),f.on.call("interrupt",e,e.__data__,f.index,f.group),delete a[s]):+s<t&&(f.state=6,f.timer.stop(),f.on.call("cancel",e,e.__data__,f.index,f.group),delete a[s])}if(src_timeout((function(){3===n.state&&(n.state=4,n.timer.restart(tick,n.delay,n.time),tick(o))})),n.state=2,n.on.call("start",e,e.__data__,n.index,n.group),2===n.state){for(n.state=3,r=new Array(l=n.tween.length),s=0,c=-1;s<l;++s)(f=n.tween[s].value.call(e,e.__data__,n.index,n.group))&&(r[++c]=f);r.length=c+1}}function tick(t){for(var a=t<n.duration?n.ease.call(null,t/n.duration):(n.timer.restart(stop),n.state=5,1),o=-1,s=r.length;++o<s;)r[o].call(e,a);5===n.state&&(n.on.call("end",e,e.__data__,n.index,n.group),stop())}function stop(){for(var r in n.state=6,n.timer.stop(),delete a[t],a)return;delete e.__transition}a[t]=n,n.timer=timer(schedule,0,n.time)}(e,n,{name:t,index:r,group:a,on:M,tween:E,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:0})}function init(e,t){var n=schedule_get(e,t);if(n.state>0)throw new Error("too late; already scheduled");return n}function schedule_set(e,t){var n=schedule_get(e,t);if(n.state>3)throw new Error("too late; already running");return n}function schedule_get(e,t){var n=e.__transition;if(!n||!(n=n[t]))throw new Error("transition not found");return n}function src_number(e,t){return e=+e,t=+t,function(n){return e*(1-n)+t*n}}var U,C=180/Math.PI,R={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function decompose(e,t,n,r,a,o){var s,c,l;return(s=Math.sqrt(e*e+t*t))&&(e/=s,t/=s),(l=e*n+t*r)&&(n-=e*l,r-=t*l),(c=Math.sqrt(n*n+r*r))&&(n/=c,r/=c,l/=c),e*r<t*n&&(e=-e,t=-t,l=-l,s=-s),{translateX:a,translateY:o,rotate:Math.atan2(t,e)*C,skewX:Math.atan(l)*C,scaleX:s,scaleY:c}}function interpolateTransform(e,t,n,r){function pop(e){return e.length?e.pop()+" ":""}return function(a,o){var s=[],c=[];return a=e(a),o=e(o),function translate(e,r,a,o,s,c){if(e!==a||r!==o){var l=s.push("translate(",null,t,null,n);c.push({i:l-4,x:src_number(e,a)},{i:l-2,x:src_number(r,o)})}else(a||o)&&s.push("translate("+a+t+o+n)}(a.translateX,a.translateY,o.translateX,o.translateY,s,c),function rotate(e,t,n,a){e!==t?(e-t>180?t+=360:t-e>180&&(e+=360),a.push({i:n.push(pop(n)+"rotate(",null,r)-2,x:src_number(e,t)})):t&&n.push(pop(n)+"rotate("+t+r)}(a.rotate,o.rotate,s,c),function skewX(e,t,n,a){e!==t?a.push({i:n.push(pop(n)+"skewX(",null,r)-2,x:src_number(e,t)}):t&&n.push(pop(n)+"skewX("+t+r)}(a.skewX,o.skewX,s,c),function scale(e,t,n,r,a,o){if(e!==n||t!==r){var s=a.push(pop(a)+"scale(",null,",",null,")");o.push({i:s-4,x:src_number(e,n)},{i:s-2,x:src_number(t,r)})}else 1===n&&1===r||a.push(pop(a)+"scale("+n+","+r+")")}(a.scaleX,a.scaleY,o.scaleX,o.scaleY,s,c),a=o=null,function(e){for(var t,n=-1,r=c.length;++n<r;)s[(t=c[n]).i]=t.x(e);return s.join("")}}}var T=interpolateTransform((function parseCss(e){const t=new("function"==typeof DOMMatrix?DOMMatrix:WebKitCSSMatrix)(e+"");return t.isIdentity?R:decompose(t.a,t.b,t.c,t.d,t.e,t.f)}),"px, ","px)","deg)"),N=interpolateTransform((function parseSvg(e){return null==e?R:(U||(U=document.createElementNS("http://www.w3.org/2000/svg","g")),U.setAttribute("transform",e),(e=U.transform.baseVal.consolidate())?decompose((e=e.matrix).a,e.b,e.c,e.d,e.e,e.f):R)}),", ",")",")");function tweenRemove(e,t){var n,r;return function(){var a=schedule_set(this,e),o=a.tween;if(o!==n)for(var s=0,c=(r=n=o).length;s<c;++s)if(r[s].name===t){(r=r.slice()).splice(s,1);break}a.tween=r}}function tweenFunction(e,t,n){var r,a;if("function"!=typeof n)throw new Error;return function(){var o=schedule_set(this,e),s=o.tween;if(s!==r){a=(r=s).slice();for(var c={name:t,value:n},l=0,f=a.length;l<f;++l)if(a[l].name===t){a[l]=c;break}l===f&&a.push(c)}o.tween=a}}function tweenValue(e,t,n){var r=e._id;return e.each((function(){var e=schedule_set(this,r);(e.value||(e.value={}))[t]=n.apply(this,arguments)})),function(e){return schedule_get(e,r).value[t]}}function src_define(e,t,n){e.prototype=t.prototype=n,n.constructor=e}function extend(e,t){var n=Object.create(e.prototype);for(var r in t)n[r]=t[r];return n}function Color(){}var I=.7,L=1/I,V="\\s*([+-]?\\d+)\\s*",B="\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*",W="\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*",q=/^#([0-9a-f]{3,8})$/,F=new RegExp(`^rgb\\(${V},${V},${V}\\)$`),D=new RegExp(`^rgb\\(${W},${W},${W}\\)$`),Z=new RegExp(`^rgba\\(${V},${V},${V},${B}\\)$`),O=new RegExp(`^rgba\\(${W},${W},${W},${B}\\)$`),Y=new RegExp(`^hsl\\(${B},${W},${W}\\)$`),j=new RegExp(`^hsla\\(${B},${W},${W},${B}\\)$`),z={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function color_formatHex(){return this.rgb().formatHex()}function color_formatRgb(){return this.rgb().formatRgb()}function color(e){var t,n;return e=(e+"").trim().toLowerCase(),(t=q.exec(e))?(n=t[1].length,t=parseInt(t[1],16),6===n?rgbn(t):3===n?new Rgb(t>>8&15|t>>4&240,t>>4&15|240&t,(15&t)<<4|15&t,1):8===n?rgba(t>>24&255,t>>16&255,t>>8&255,(255&t)/255):4===n?rgba(t>>12&15|t>>8&240,t>>8&15|t>>4&240,t>>4&15|240&t,((15&t)<<4|15&t)/255):null):(t=F.exec(e))?new Rgb(t[1],t[2],t[3],1):(t=D.exec(e))?new Rgb(255*t[1]/100,255*t[2]/100,255*t[3]/100,1):(t=Z.exec(e))?rgba(t[1],t[2],t[3],t[4]):(t=O.exec(e))?rgba(255*t[1]/100,255*t[2]/100,255*t[3]/100,t[4]):(t=Y.exec(e))?hsla(t[1],t[2]/100,t[3]/100,1):(t=j.exec(e))?hsla(t[1],t[2]/100,t[3]/100,t[4]):z.hasOwnProperty(e)?rgbn(z[e]):"transparent"===e?new Rgb(NaN,NaN,NaN,0):null}function rgbn(e){return new Rgb(e>>16&255,e>>8&255,255&e,1)}function rgba(e,t,n,r){return r<=0&&(e=t=n=NaN),new Rgb(e,t,n,r)}function rgbConvert(e){return e instanceof Color||(e=color(e)),e?new Rgb((e=e.rgb()).r,e.g,e.b,e.opacity):new Rgb}function color_rgb(e,t,n,r){return 1===arguments.length?rgbConvert(e):new Rgb(e,t,n,null==r?1:r)}function Rgb(e,t,n,r){this.r=+e,this.g=+t,this.b=+n,this.opacity=+r}function rgb_formatHex(){return`#${hex(this.r)}${hex(this.g)}${hex(this.b)}`}function rgb_formatRgb(){const e=clampa(this.opacity);return`${1===e?"rgb(":"rgba("}${clampi(this.r)}, ${clampi(this.g)}, ${clampi(this.b)}${1===e?")":`, ${e})`}`}function clampa(e){return isNaN(e)?1:Math.max(0,Math.min(1,e))}function clampi(e){return Math.max(0,Math.min(255,Math.round(e)||0))}function hex(e){return((e=clampi(e))<16?"0":"")+e.toString(16)}function hsla(e,t,n,r){return r<=0?e=t=n=NaN:n<=0||n>=1?e=t=NaN:t<=0&&(e=NaN),new Hsl(e,t,n,r)}function hslConvert(e){if(e instanceof Hsl)return new Hsl(e.h,e.s,e.l,e.opacity);if(e instanceof Color||(e=color(e)),!e)return new Hsl;if(e instanceof Hsl)return e;var t=(e=e.rgb()).r/255,n=e.g/255,r=e.b/255,a=Math.min(t,n,r),o=Math.max(t,n,r),s=NaN,c=o-a,l=(o+a)/2;return c?(s=t===o?(n-r)/c+6*(n<r):n===o?(r-t)/c+2:(t-n)/c+4,c/=l<.5?o+a:2-o-a,s*=60):c=l>0&&l<1?0:s,new Hsl(s,c,l,e.opacity)}function hsl(e,t,n,r){return 1===arguments.length?hslConvert(e):new Hsl(e,t,n,null==r?1:r)}function Hsl(e,t,n,r){this.h=+e,this.s=+t,this.l=+n,this.opacity=+r}function clamph(e){return(e=(e||0)%360)<0?e+360:e}function clampt(e){return Math.max(0,Math.min(1,e||0))}function hsl2rgb(e,t,n){return 255*(e<60?t+(n-t)*e/60:e<180?n:e<240?t+(n-t)*(240-e)/60:t)}function basis(e,t,n,r,a){var o=e*e,s=o*e;return((1-3*e+3*o-s)*t+(4-6*o+3*s)*n+(1+3*e+3*o-3*s)*r+s*a)/6}src_define(Color,color,{copy(e){return Object.assign(new this.constructor,this,e)},displayable(){return this.rgb().displayable()},hex:color_formatHex,formatHex:color_formatHex,formatHex8:function color_formatHex8(){return this.rgb().formatHex8()},formatHsl:function color_formatHsl(){return hslConvert(this).formatHsl()},formatRgb:color_formatRgb,toString:color_formatRgb}),src_define(Rgb,color_rgb,extend(Color,{brighter(e){return e=null==e?L:Math.pow(L,e),new Rgb(this.r*e,this.g*e,this.b*e,this.opacity)},darker(e){return e=null==e?I:Math.pow(I,e),new Rgb(this.r*e,this.g*e,this.b*e,this.opacity)},rgb(){return this},clamp(){return new Rgb(clampi(this.r),clampi(this.g),clampi(this.b),clampa(this.opacity))},displayable(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:rgb_formatHex,formatHex:rgb_formatHex,formatHex8:function rgb_formatHex8(){return`#${hex(this.r)}${hex(this.g)}${hex(this.b)}${hex(255*(isNaN(this.opacity)?1:this.opacity))}`},formatRgb:rgb_formatRgb,toString:rgb_formatRgb})),src_define(Hsl,hsl,extend(Color,{brighter(e){return e=null==e?L:Math.pow(L,e),new Hsl(this.h,this.s,this.l*e,this.opacity)},darker(e){return e=null==e?I:Math.pow(I,e),new Hsl(this.h,this.s,this.l*e,this.opacity)},rgb(){var e=this.h%360+360*(this.h<0),t=isNaN(e)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*t,a=2*n-r;return new Rgb(hsl2rgb(e>=240?e-240:e+120,a,r),hsl2rgb(e,a,r),hsl2rgb(e<120?e+240:e-120,a,r),this.opacity)},clamp(){return new Hsl(clamph(this.h),clampt(this.s),clampt(this.l),clampa(this.opacity))},displayable(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl(){const e=clampa(this.opacity);return`${1===e?"hsl(":"hsla("}${clamph(this.h)}, ${100*clampt(this.s)}%, ${100*clampt(this.l)}%${1===e?")":`, ${e})`}`}}));const d3_interpolate_src_constant=e=>()=>e;function linear(e,t){return function(n){return e+n*t}}function hue(e,t){var n=t-e;return n?linear(e,n>180||n<-180?n-360*Math.round(n/360):n):d3_interpolate_src_constant(isNaN(e)?t:e)}function gamma(e){return 1==(e=+e)?nogamma:function(t,n){return n-t?function exponential(e,t,n){return e=Math.pow(e,n),t=Math.pow(t,n)-e,n=1/n,function(r){return Math.pow(e+r*t,n)}}(t,n,e):d3_interpolate_src_constant(isNaN(t)?n:t)}}function nogamma(e,t){var n=t-e;return n?linear(e,n):d3_interpolate_src_constant(isNaN(e)?t:e)}const P=function rgbGamma(e){var t=gamma(e);function rgb(e,n){var r=t((e=color_rgb(e)).r,(n=color_rgb(n)).r),a=t(e.g,n.g),o=t(e.b,n.b),s=nogamma(e.opacity,n.opacity);return function(t){return e.r=r(t),e.g=a(t),e.b=o(t),e.opacity=s(t),e+""}}return rgb.gamma=rgbGamma,rgb}(1);function rgbSpline(e){return function(t){var n,r,a=t.length,o=new Array(a),s=new Array(a),c=new Array(a);for(n=0;n<a;++n)r=color_rgb(t[n]),o[n]=r.r||0,s[n]=r.g||0,c[n]=r.b||0;return o=e(o),s=e(s),c=e(c),r.opacity=1,function(e){return r.r=o(e),r.g=s(e),r.b=c(e),r+""}}}var Q=rgbSpline((function src_basis(e){var t=e.length-1;return function(n){var r=n<=0?n=0:n>=1?(n=1,t-1):Math.floor(n*t),a=e[r],o=e[r+1],s=r>0?e[r-1]:2*a-o,c=r<t-1?e[r+2]:2*o-a;return basis((n-r/t)*t,s,a,o,c)}})),K=(rgbSpline((function basisClosed(e){var t=e.length;return function(n){var r=Math.floor(((n%=1)<0?++n:n)*t),a=e[(r+t-1)%t],o=e[r%t],s=e[(r+1)%t],c=e[(r+2)%t];return basis((n-r/t)*t,a,o,s,c)}})),/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g),G=new RegExp(K.source,"g");function string(e,t){var n,r,a,o=K.lastIndex=G.lastIndex=0,s=-1,c=[],l=[];for(e+="",t+="";(n=K.exec(e))&&(r=G.exec(t));)(a=r.index)>o&&(a=t.slice(o,a),c[s]?c[s]+=a:c[++s]=a),(n=n[0])===(r=r[0])?c[s]?c[s]+=r:c[++s]=r:(c[++s]=null,l.push({i:s,x:src_number(n,r)})),o=G.lastIndex;return o<t.length&&(a=t.slice(o),c[s]?c[s]+=a:c[++s]=a),c.length<2?l[0]?function one(e){return function(t){return e(t)+""}}(l[0].x):function string_zero(e){return function(){return e}}(t):(t=l.length,function(e){for(var n,r=0;r<t;++r)c[(n=l[r]).i]=n.x(e);return c.join("")})}function transition_interpolate(e,t){var n;return("number"==typeof t?src_number:t instanceof color?P:(n=color(t))?(t=n,P):string)(e,t)}function attr_attrRemove(e){return function(){this.removeAttribute(e)}}function attr_attrRemoveNS(e){return function(){this.removeAttributeNS(e.space,e.local)}}function attr_attrConstant(e,t,n){var r,a,o=n+"";return function(){var s=this.getAttribute(e);return s===o?null:s===r?a:a=t(r=s,n)}}function attr_attrConstantNS(e,t,n){var r,a,o=n+"";return function(){var s=this.getAttributeNS(e.space,e.local);return s===o?null:s===r?a:a=t(r=s,n)}}function attr_attrFunction(e,t,n){var r,a,o;return function(){var s,c,l=n(this);if(null!=l)return(s=this.getAttribute(e))===(c=l+"")?null:s===r&&c===a?o:(a=c,o=t(r=s,l));this.removeAttribute(e)}}function attr_attrFunctionNS(e,t,n){var r,a,o;return function(){var s,c,l=n(this);if(null!=l)return(s=this.getAttributeNS(e.space,e.local))===(c=l+"")?null:s===r&&c===a?o:(a=c,o=t(r=s,l));this.removeAttributeNS(e.space,e.local)}}function attrTweenNS(e,t){var n,r;function tween(){var a=t.apply(this,arguments);return a!==r&&(n=(r=a)&&function attrInterpolateNS(e,t){return function(n){this.setAttributeNS(e.space,e.local,t.call(this,n))}}(e,a)),n}return tween._value=t,tween}function attrTween(e,t){var n,r;function tween(){var a=t.apply(this,arguments);return a!==r&&(n=(r=a)&&function attrInterpolate(e,t){return function(n){this.setAttribute(e,t.call(this,n))}}(e,a)),n}return tween._value=t,tween}function delayFunction(e,t){return function(){init(this,e).delay=+t.apply(this,arguments)}}function delayConstant(e,t){return t=+t,function(){init(this,e).delay=t}}function durationFunction(e,t){return function(){schedule_set(this,e).duration=+t.apply(this,arguments)}}function durationConstant(e,t){return t=+t,function(){schedule_set(this,e).duration=t}}var X=d.prototype.constructor;function style_styleRemove(e){return function(){this.style.removeProperty(e)}}var J=0;function Transition(e,t,n,r){this._groups=e,this._parents=t,this._name=n,this._id=r}function newId(){return++J}var H=d.prototype;Transition.prototype=function transition_transition(e){return d().transition(e)}.prototype={constructor:Transition,select:function transition_select(e){var t=this._name,n=this._id;"function"!=typeof e&&(e=selector(e));for(var r=this._groups,a=r.length,o=new Array(a),s=0;s<a;++s)for(var c,l,f=r[s],u=f.length,d=o[s]=new Array(u),p=0;p<u;++p)(c=f[p])&&(l=e.call(c,c.__data__,p,f))&&("__data__"in c&&(l.__data__=c.__data__),d[p]=l,schedule(d[p],t,n,p,d,schedule_get(c,n)));return new Transition(o,this._parents,t,n)},selectAll:function transition_selectAll(e){var t=this._name,n=this._id;"function"!=typeof e&&(e=selectorAll(e));for(var r=this._groups,a=r.length,o=[],s=[],c=0;c<a;++c)for(var l,f=r[c],u=f.length,d=0;d<u;++d)if(l=f[d]){for(var p,h=e.call(l,l.__data__,d,f),m=schedule_get(l,n),g=0,b=h.length;g<b;++g)(p=h[g])&&schedule(p,t,n,g,h,m);o.push(h),s.push(l)}return new Transition(o,s,t,n)},selectChild:H.selectChild,selectChildren:H.selectChildren,filter:function transition_filter(e){"function"!=typeof e&&(e=matcher(e));for(var t=this._groups,n=t.length,r=new Array(n),a=0;a<n;++a)for(var o,s=t[a],c=s.length,l=r[a]=[],f=0;f<c;++f)(o=s[f])&&e.call(o,o.__data__,f,s)&&l.push(o);return new Transition(r,this._parents,this._name,this._id)},merge:function transition_merge(e){if(e._id!==this._id)throw new Error;for(var t=this._groups,n=e._groups,r=t.length,a=n.length,o=Math.min(r,a),s=new Array(r),c=0;c<o;++c)for(var l,f=t[c],u=n[c],d=f.length,p=s[c]=new Array(d),h=0;h<d;++h)(l=f[h]||u[h])&&(p[h]=l);for(;c<r;++c)s[c]=t[c];return new Transition(s,this._parents,this._name,this._id)},selection:function transition_selection(){return new X(this._groups,this._parents)},transition:function transition(){for(var e=this._name,t=this._id,n=newId(),r=this._groups,a=r.length,o=0;o<a;++o)for(var s,c=r[o],l=c.length,f=0;f<l;++f)if(s=c[f]){var u=schedule_get(s,t);schedule(s,e,n,f,c,{time:u.time+u.delay+u.duration,delay:0,duration:u.duration,ease:u.ease})}return new Transition(r,this._parents,e,n)},call:H.call,nodes:H.nodes,node:H.node,size:H.size,empty:H.empty,each:H.each,on:function transition_on(e,t){var n=this._id;return arguments.length<2?schedule_get(this.node(),n).on.on(e):this.each(function onFunction(e,t,n){var r,a,o=function start(e){return(e+"").trim().split(/^|\s+/).every((function(e){var t=e.indexOf(".");return t>=0&&(e=e.slice(0,t)),!e||"start"===e}))}(t)?init:schedule_set;return function(){var s=o(this,e),c=s.on;c!==r&&(a=(r=c).copy()).on(t,n),s.on=a}}(n,e,t))},attr:function transition_attr(e,t){var n=namespace(e),r="transform"===n?N:transition_interpolate;return this.attrTween(e,"function"==typeof t?(n.local?attr_attrFunctionNS:attr_attrFunction)(n,r,tweenValue(this,"attr."+e,t)):null==t?(n.local?attr_attrRemoveNS:attr_attrRemove)(n):(n.local?attr_attrConstantNS:attr_attrConstant)(n,r,t))},attrTween:function transition_attrTween(e,t){var n="attr."+e;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==t)return this.tween(n,null);if("function"!=typeof t)throw new Error;var r=namespace(e);return this.tween(n,(r.local?attrTweenNS:attrTween)(r,t))},style:function transition_style(e,t,n){var r="transform"==(e+="")?T:transition_interpolate;return null==t?this.styleTween(e,function styleNull(e,t){var n,r,a;return function(){var o=styleValue(this,e),s=(this.style.removeProperty(e),styleValue(this,e));return o===s?null:o===n&&s===r?a:a=t(n=o,r=s)}}(e,r)).on("end.style."+e,style_styleRemove(e)):"function"==typeof t?this.styleTween(e,function style_styleFunction(e,t,n){var r,a,o;return function(){var s=styleValue(this,e),c=n(this),l=c+"";return null==c&&(this.style.removeProperty(e),l=c=styleValue(this,e)),s===l?null:s===r&&l===a?o:(a=l,o=t(r=s,c))}}(e,r,tweenValue(this,"style."+e,t))).each(function styleMaybeRemove(e,t){var n,r,a,o,s="style."+t,c="end."+s;return function(){var l=schedule_set(this,e),f=l.on,u=null==l.value[s]?o||(o=style_styleRemove(t)):void 0;f===n&&a===u||(r=(n=f).copy()).on(c,a=u),l.on=r}}(this._id,e)):this.styleTween(e,function style_styleConstant(e,t,n){var r,a,o=n+"";return function(){var s=styleValue(this,e);return s===o?null:s===r?a:a=t(r=s,n)}}(e,r,t),n).on("end.style."+e,null)},styleTween:function transition_styleTween(e,t,n){var r="style."+(e+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==t)return this.tween(r,null);if("function"!=typeof t)throw new Error;return this.tween(r,function styleTween(e,t,n){var r,a;function tween(){var o=t.apply(this,arguments);return o!==a&&(r=(a=o)&&function styleInterpolate(e,t,n){return function(r){this.style.setProperty(e,t.call(this,r),n)}}(e,o,n)),r}return tween._value=t,tween}(e,t,null==n?"":n))},text:function transition_text(e){return this.tween("text","function"==typeof e?function text_textFunction(e){return function(){var t=e(this);this.textContent=null==t?"":t}}(tweenValue(this,"text",e)):function text_textConstant(e){return function(){this.textContent=e}}(null==e?"":e+""))},textTween:function transition_textTween(e){var t="text";if(arguments.length<1)return(t=this.tween(t))&&t._value;if(null==e)return this.tween(t,null);if("function"!=typeof e)throw new Error;return this.tween(t,function textTween(e){var t,n;function tween(){var r=e.apply(this,arguments);return r!==n&&(t=(n=r)&&function textInterpolate(e){return function(t){this.textContent=e.call(this,t)}}(r)),t}return tween._value=e,tween}(e))},remove:function transition_remove(){return this.on("end.remove",function removeFunction(e){return function(){var t=this.parentNode;for(var n in this.__transition)if(+n!==e)return;t&&t.removeChild(this)}}(this._id))},tween:function tween(e,t){var n=this._id;if(e+="",arguments.length<2){for(var r,a=schedule_get(this.node(),n).tween,o=0,s=a.length;o<s;++o)if((r=a[o]).name===e)return r.value;return null}return this.each((null==t?tweenRemove:tweenFunction)(n,e,t))},delay:function delay(e){var t=this._id;return arguments.length?this.each(("function"==typeof e?delayFunction:delayConstant)(t,e)):schedule_get(this.node(),t).delay},duration:function duration(e){var t=this._id;return arguments.length?this.each(("function"==typeof e?durationFunction:durationConstant)(t,e)):schedule_get(this.node(),t).duration},ease:function ease(e){var t=this._id;return arguments.length?this.each(function easeConstant(e,t){if("function"!=typeof t)throw new Error;return function(){schedule_set(this,e).ease=t}}(t,e)):schedule_get(this.node(),t).ease},easeVarying:function transition_easeVarying(e){if("function"!=typeof e)throw new Error;return this.each(function easeVarying(e,t){return function(){var n=t.apply(this,arguments);if("function"!=typeof n)throw new Error;schedule_set(this,e).ease=n}}(this._id,e))},end:function end(){var e,t,n=this,r=n._id,a=n.size();return new Promise((function(o,s){var c={value:s},l={value:function(){0==--a&&o()}};n.each((function(){var n=schedule_set(this,r),a=n.on;a!==e&&((t=(e=a).copy())._.cancel.push(c),t._.interrupt.push(c),t._.end.push(l)),n.on=t})),0===a&&o()}))},[Symbol.iterator]:H[Symbol.iterator]};var _={time:null,delay:0,duration:250,ease:function cubicInOut(e){return((e*=2)<=1?e*e*e:(e-=2)*e*e+2)/2}};function inherit(e,t){for(var n;!(n=e.__transition)||!(n=n[t]);)if(!(e=e.parentNode))throw new Error(`transition ${t} not found`);return n}d.prototype.interrupt=function selection_interrupt(e){return this.each((function(){!function src_interrupt(e,t){var n,r,a,o=e.__transition,s=!0;if(o){for(a in t=null==t?null:t+"",o)(n=o[a]).name===t?(r=n.state>2&&n.state<5,n.state=6,n.timer.stop(),n.on.call(r?"interrupt":"cancel",e,e.__data__,n.index,n.group),delete o[a]):s=!1;s&&delete e.__transition}}(this,e)}))},d.prototype.transition=function selection_transition(e){var t,n;e instanceof Transition?(t=e._id,e=e._name):(t=newId(),(n=_).time=now(),e=null==e?null:e+"");for(var r=this._groups,a=r.length,o=0;o<a;++o)for(var s,c=r[o],l=c.length,f=0;f<l;++f)(s=c[f])&&schedule(s,e,t,f,c,n||inherit(s,t));return new Transition(r,this._parents,e,t)};const{abs:$,max:ee,min:te}=Math;function number1(e){return[+e[0],+e[1]]}function number2(e){return[number1(e[0]),number1(e[1])]}["w","e"].map(type),["n","s"].map(type),["n","w","e","s","nw","ne","sw","se"].map(type);function type(e){return{type:e}}function formatDecimalParts(e,t){if((n=(e=t?e.toExponential(t-1):e.toExponential()).indexOf("e"))<0)return null;var n,r=e.slice(0,n);return[r.length>1?r[0]+r.slice(2):r,+e.slice(n+1)]}function exponent(e){return(e=formatDecimalParts(Math.abs(e)))?e[1]:NaN}var ne,re=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function formatSpecifier(e){if(!(t=re.exec(e)))throw new Error("invalid format: "+e);var t;return new FormatSpecifier({fill:t[1],align:t[2],sign:t[3],symbol:t[4],zero:t[5],width:t[6],comma:t[7],precision:t[8]&&t[8].slice(1),trim:t[9],type:t[10]})}function FormatSpecifier(e){this.fill=void 0===e.fill?" ":e.fill+"",this.align=void 0===e.align?">":e.align+"",this.sign=void 0===e.sign?"-":e.sign+"",this.symbol=void 0===e.symbol?"":e.symbol+"",this.zero=!!e.zero,this.width=void 0===e.width?void 0:+e.width,this.comma=!!e.comma,this.precision=void 0===e.precision?void 0:+e.precision,this.trim=!!e.trim,this.type=void 0===e.type?"":e.type+""}function formatRounded(e,t){var n=formatDecimalParts(e,t);if(!n)return e+"";var r=n[0],a=n[1];return a<0?"0."+new Array(-a).join("0")+r:r.length>a+1?r.slice(0,a+1)+"."+r.slice(a+1):r+new Array(a-r.length+2).join("0")}formatSpecifier.prototype=FormatSpecifier.prototype,FormatSpecifier.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};const ae={"%":(e,t)=>(100*e).toFixed(t),b:e=>Math.round(e).toString(2),c:e=>e+"",d:function formatDecimal(e){return Math.abs(e=Math.round(e))>=1e21?e.toLocaleString("en").replace(/,/g,""):e.toString(10)},e:(e,t)=>e.toExponential(t),f:(e,t)=>e.toFixed(t),g:(e,t)=>e.toPrecision(t),o:e=>Math.round(e).toString(8),p:(e,t)=>formatRounded(100*e,t),r:formatRounded,s:function formatPrefixAuto(e,t){var n=formatDecimalParts(e,t);if(!n)return e+"";var r=n[0],a=n[1],o=a-(ne=3*Math.max(-8,Math.min(8,Math.floor(a/3))))+1,s=r.length;return o===s?r:o>s?r+new Array(o-s+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+formatDecimalParts(e,Math.max(0,t+o-1))[0]},X:e=>Math.round(e).toString(16).toUpperCase(),x:e=>Math.round(e).toString(16)};function d3_format_src_identity(e){return e}var ie,oe,se,ce=Array.prototype.map,le=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];function locale(e){var t=void 0===e.grouping||void 0===e.thousands?d3_format_src_identity:function formatGroup(e,t){return function(n,r){for(var a=n.length,o=[],s=0,c=e[0],l=0;a>0&&c>0&&(l+c+1>r&&(c=Math.max(1,r-l)),o.push(n.substring(a-=c,a+c)),!((l+=c+1)>r));)c=e[s=(s+1)%e.length];return o.reverse().join(t)}}(ce.call(e.grouping,Number),e.thousands+""),n=void 0===e.currency?"":e.currency[0]+"",r=void 0===e.currency?"":e.currency[1]+"",a=void 0===e.decimal?".":e.decimal+"",o=void 0===e.numerals?d3_format_src_identity:function formatNumerals(e){return function(t){return t.replace(/[0-9]/g,(function(t){return e[+t]}))}}(ce.call(e.numerals,String)),s=void 0===e.percent?"%":e.percent+"",c=void 0===e.minus?"−":e.minus+"",l=void 0===e.nan?"NaN":e.nan+"";function newFormat(e){var f=(e=formatSpecifier(e)).fill,u=e.align,d=e.sign,p=e.symbol,h=e.zero,m=e.width,g=e.comma,b=e.precision,A=e.trim,y=e.type;"n"===y?(g=!0,y="g"):ae[y]||(void 0===b&&(b=12),A=!0,y="g"),(h||"0"===f&&"="===u)&&(h=!0,f="0",u="=");var w="$"===p?n:"#"===p&&/[boxX]/.test(y)?"0"+y.toLowerCase():"",v="$"===p?r:/[%p]/.test(y)?s:"",x=ae[y],k=/[defgprs%]/.test(y);function format(e){var n,r,s,p=w,S=v;if("c"===y)S=x(e)+S,e="";else{var M=(e=+e)<0||1/e<0;if(e=isNaN(e)?l:x(Math.abs(e),b),A&&(e=function formatTrim(e){e:for(var t,n=e.length,r=1,a=-1;r<n;++r)switch(e[r]){case".":a=t=r;break;case"0":0===a&&(a=r),t=r;break;default:if(!+e[r])break e;a>0&&(a=0)}return a>0?e.slice(0,a)+e.slice(t+1):e}(e)),M&&0==+e&&"+"!==d&&(M=!1),p=(M?"("===d?d:c:"-"===d||"("===d?"":d)+p,S=("s"===y?le[8+ne/3]:"")+S+(M&&"("===d?")":""),k)for(n=-1,r=e.length;++n<r;)if(48>(s=e.charCodeAt(n))||s>57){S=(46===s?a+e.slice(n+1):e.slice(n))+S,e=e.slice(0,n);break}}g&&!h&&(e=t(e,1/0));var E=p.length+e.length+S.length,U=E<m?new Array(m-E+1).join(f):"";switch(g&&h&&(e=t(U+e,U.length?m-S.length:1/0),U=""),u){case"<":e=p+e+S+U;break;case"=":e=p+U+e+S;break;case"^":e=U.slice(0,E=U.length>>1)+p+e+S+U.slice(E);break;default:e=U+p+e+S}return o(e)}return b=void 0===b?6:/[gprs]/.test(y)?Math.max(1,Math.min(21,b)):Math.max(0,Math.min(20,b)),format.toString=function(){return e+""},format}return{format:newFormat,formatPrefix:function formatPrefix(e,t){var n=newFormat(((e=formatSpecifier(e)).type="f",e)),r=3*Math.max(-8,Math.min(8,Math.floor(exponent(t)/3))),a=Math.pow(10,-r),o=le[8+r/3];return function(e){return n(a*e)+o}}}}!function defaultLocale(e){return ie=locale(e),oe=ie.format,se=ie.formatPrefix,ie}({thousands:",",grouping:[3],currency:["$",""]});var fe=1e-6,ue=Math.PI,de=ue/2,pe=ue/4,he=2*ue,me=180/ue,ge=ue/180,be=Math.abs,Ae=Math.atan,ye=Math.atan2,we=Math.cos,ve=(Math.ceil,Math.exp),xe=(Math.floor,Math.hypot,Math.log),ke=Math.pow,Se=Math.sin,Me=Math.sign||function(e){return e>0?1:e<0?-1:0},Ee=Math.sqrt,Ue=Math.tan;function acos(e){return e>1?0:e<-1?ue:Math.acos(e)}function asin(e){return e>1?de:e<-1?-de:Math.asin(e)}function noop_noop(){}function buffer(){var e,t=[];return{point:function(t,n,r){e.push([t,n,r])},lineStart:function(){t.push(e=[])},lineEnd:noop_noop,rejoin:function(){t.length>1&&t.push(t.pop().concat(t.shift()))},result:function(){var n=t;return t=[],e=null,n}}}function pointEqual(e,t){return be(e[0]-t[0])<fe&&be(e[1]-t[1])<fe}function Intersection(e,t,n,r){this.x=e,this.z=t,this.o=n,this.e=r,this.v=!1,this.n=this.p=null}function rejoin(e,t,n,r,a){var o,s,c=[],l=[];if(e.forEach((function(e){if(!((t=e.length-1)<=0)){var t,n,r=e[0],s=e[t];if(pointEqual(r,s)){if(!r[2]&&!s[2]){for(a.lineStart(),o=0;o<t;++o)a.point((r=e[o])[0],r[1]);return void a.lineEnd()}s[0]+=2e-6}c.push(n=new Intersection(r,e,null,!0)),l.push(n.o=new Intersection(r,null,n,!1)),c.push(n=new Intersection(s,e,null,!1)),l.push(n.o=new Intersection(s,null,n,!0))}})),c.length){for(l.sort(t),rejoin_link(c),rejoin_link(l),o=0,s=l.length;o<s;++o)l[o].e=n=!n;for(var f,u,d=c[0];;){for(var p=d,h=!0;p.v;)if((p=p.n)===d)return;f=p.z,a.lineStart();do{if(p.v=p.o.v=!0,p.e){if(h)for(o=0,s=f.length;o<s;++o)a.point((u=f[o])[0],u[1]);else r(p.x,p.n.x,1,a);p=p.n}else{if(h)for(f=p.p.z,o=f.length-1;o>=0;--o)a.point((u=f[o])[0],u[1]);else r(p.x,p.p.x,-1,a);p=p.p}f=(p=p.o).z,h=!h}while(!p.v);a.lineEnd()}}}function rejoin_link(e){if(t=e.length){for(var t,n,r=0,a=e[0];++r<t;)a.n=n=e[r],n.p=a,a=n;a.n=n=e[0],n.p=a}}function merge_merge(e){return Array.from(function*merge_flatten(e){for(const t of e)yield*t}(e))}var Ce=1e9,Re=-Ce;function clipRectangle(e,t,n,r){function visible(a,o){return e<=a&&a<=n&&t<=o&&o<=r}function interpolate(a,o,s,c){var l=0,f=0;if(null==a||(l=corner(a,s))!==(f=corner(o,s))||comparePoint(a,o)<0^s>0)do{c.point(0===l||3===l?e:n,l>1?r:t)}while((l=(l+s+4)%4)!==f);else c.point(o[0],o[1])}function corner(r,a){return be(r[0]-e)<fe?a>0?0:3:be(r[0]-n)<fe?a>0?2:1:be(r[1]-t)<fe?a>0?1:0:a>0?3:2}function compareIntersection(e,t){return comparePoint(e.x,t.x)}function comparePoint(e,t){var n=corner(e,1),r=corner(t,1);return n!==r?n-r:0===n?t[1]-e[1]:1===n?e[0]-t[0]:2===n?e[1]-t[1]:t[0]-e[0]}return function(a){var o,s,c,l,f,u,d,p,h,m,g,b=a,A=buffer(),y={point,lineStart:function lineStart(){y.point=linePoint,s&&s.push(c=[]);m=!0,h=!1,d=p=NaN},lineEnd:function lineEnd(){o&&(linePoint(l,f),u&&h&&A.rejoin(),o.push(A.result()));y.point=point,h&&b.lineEnd()},polygonStart:function polygonStart(){b=A,o=[],s=[],g=!0},polygonEnd:function polygonEnd(){var t=function polygonInside(){for(var t=0,n=0,a=s.length;n<a;++n)for(var o,c,l=s[n],f=1,u=l.length,d=l[0],p=d[0],h=d[1];f<u;++f)o=p,c=h,p=(d=l[f])[0],h=d[1],c<=r?h>r&&(p-o)*(r-c)>(h-c)*(e-o)&&++t:h<=r&&(p-o)*(r-c)<(h-c)*(e-o)&&--t;return t}(),n=g&&t,l=(o=merge_merge(o)).length;(n||l)&&(a.polygonStart(),n&&(a.lineStart(),interpolate(null,null,1,a),a.lineEnd()),l&&rejoin(o,compareIntersection,t,interpolate,a),a.polygonEnd());b=a,o=s=c=null}};function point(e,t){visible(e,t)&&b.point(e,t)}function linePoint(a,o){var A=visible(a,o);if(s&&c.push([a,o]),m)l=a,f=o,u=A,m=!1,A&&(b.lineStart(),b.point(a,o));else if(A&&h)b.point(a,o);else{var y=[d=Math.max(Re,Math.min(Ce,d)),p=Math.max(Re,Math.min(Ce,p))],w=[a=Math.max(Re,Math.min(Ce,a)),o=Math.max(Re,Math.min(Ce,o))];!function line(e,t,n,r,a,o){var s,c=e[0],l=e[1],f=0,u=1,d=t[0]-c,p=t[1]-l;if(s=n-c,d||!(s>0)){if(s/=d,d<0){if(s<f)return;s<u&&(u=s)}else if(d>0){if(s>u)return;s>f&&(f=s)}if(s=a-c,d||!(s<0)){if(s/=d,d<0){if(s>u)return;s>f&&(f=s)}else if(d>0){if(s<f)return;s<u&&(u=s)}if(s=r-l,p||!(s>0)){if(s/=p,p<0){if(s<f)return;s<u&&(u=s)}else if(p>0){if(s>u)return;s>f&&(f=s)}if(s=o-l,p||!(s<0)){if(s/=p,p<0){if(s>u)return;s>f&&(f=s)}else if(p>0){if(s<f)return;s<u&&(u=s)}return f>0&&(e[0]=c+f*d,e[1]=l+f*p),u<1&&(t[0]=c+u*d,t[1]=l+u*p),!0}}}}}(y,w,e,t,n,r)?A&&(b.lineStart(),b.point(a,o),g=!1):(h||(b.lineStart(),b.point(y[0],y[1])),b.point(w[0],w[1]),A||b.lineEnd(),g=!1)}d=a,p=o,h=A}return y}}const d3_geo_src_identity=e=>e;function streamGeometry(e,t){e&&Ne.hasOwnProperty(e.type)&&Ne[e.type](e,t)}var Te={Feature:function(e,t){streamGeometry(e.geometry,t)},FeatureCollection:function(e,t){for(var n=e.features,r=-1,a=n.length;++r<a;)streamGeometry(n[r].geometry,t)}},Ne={Sphere:function(e,t){t.sphere()},Point:function(e,t){e=e.coordinates,t.point(e[0],e[1],e[2])},MultiPoint:function(e,t){for(var n=e.coordinates,r=-1,a=n.length;++r<a;)e=n[r],t.point(e[0],e[1],e[2])},LineString:function(e,t){streamLine(e.coordinates,t,0)},MultiLineString:function(e,t){for(var n=e.coordinates,r=-1,a=n.length;++r<a;)streamLine(n[r],t,0)},Polygon:function(e,t){streamPolygon(e.coordinates,t)},MultiPolygon:function(e,t){for(var n=e.coordinates,r=-1,a=n.length;++r<a;)streamPolygon(n[r],t)},GeometryCollection:function(e,t){for(var n=e.geometries,r=-1,a=n.length;++r<a;)streamGeometry(n[r],t)}};function streamLine(e,t,n){var r,a=-1,o=e.length-n;for(t.lineStart();++a<o;)r=e[a],t.point(r[0],r[1],r[2]);t.lineEnd()}function streamPolygon(e,t){var n=-1,r=e.length;for(t.polygonStart();++n<r;)streamLine(e[n],t,1);t.polygonEnd()}function stream(e,t){e&&Te.hasOwnProperty(e.type)?Te[e.type](e,t):streamGeometry(e,t)}class Adder{constructor(){this._partials=new Float64Array(32),this._n=0}add(e){const t=this._partials;let n=0;for(let r=0;r<this._n&&r<32;r++){const a=t[r],o=e+a,s=Math.abs(e)<Math.abs(a)?e-(o-a):a-(o-e);s&&(t[n++]=s),e=o}return t[n]=e,this._n=n+1,this}valueOf(){const e=this._partials;let t,n,r,a=this._n,o=0;if(a>0){for(o=e[--a];a>0&&(t=o,n=e[--a],o=t+n,r=n-(o-t),!r););a>0&&(r<0&&e[a-1]<0||r>0&&e[a-1]>0)&&(n=2*r,t=o+n,n==t-o&&(o=t))}return o}}var Ie,Le,Ve,Be,We=new Adder,qe=new Adder,Fe={point:noop_noop,lineStart:noop_noop,lineEnd:noop_noop,polygonStart:function(){Fe.lineStart=areaRingStart,Fe.lineEnd=areaRingEnd},polygonEnd:function(){Fe.lineStart=Fe.lineEnd=Fe.point=noop_noop,We.add(be(qe)),qe=new Adder},result:function(){var e=We/2;return We=new Adder,e}};function areaRingStart(){Fe.point=areaPointFirst}function areaPointFirst(e,t){Fe.point=areaPoint,Ie=Ve=e,Le=Be=t}function areaPoint(e,t){qe.add(Be*e-Ve*t),Ve=e,Be=t}function areaRingEnd(){areaPoint(Ie,Le)}const De=Fe;var Ze=1/0,Oe=Ze,Ye=-Ze,je=Ye,ze={point:function boundsPoint(e,t){e<Ze&&(Ze=e);e>Ye&&(Ye=e);t<Oe&&(Oe=t);t>je&&(je=t)},lineStart:noop_noop,lineEnd:noop_noop,polygonStart:noop_noop,polygonEnd:noop_noop,result:function(){var e=[[Ze,Oe],[Ye,je]];return Ye=je=-(Oe=Ze=1/0),e}};const Pe=ze;var Qe,Ke,Ge,Xe,Je=0,He=0,_e=0,$e=0,et=0,tt=0,nt=0,rt=0,at=0,ot={point:centroidPoint,lineStart:centroidLineStart,lineEnd:centroidLineEnd,polygonStart:function(){ot.lineStart=centroidRingStart,ot.lineEnd=centroidRingEnd},polygonEnd:function(){ot.point=centroidPoint,ot.lineStart=centroidLineStart,ot.lineEnd=centroidLineEnd},result:function(){var e=at?[nt/at,rt/at]:tt?[$e/tt,et/tt]:_e?[Je/_e,He/_e]:[NaN,NaN];return Je=He=_e=$e=et=tt=nt=rt=at=0,e}};function centroidPoint(e,t){Je+=e,He+=t,++_e}function centroidLineStart(){ot.point=centroidPointFirstLine}function centroidPointFirstLine(e,t){ot.point=centroidPointLine,centroidPoint(Ge=e,Xe=t)}function centroidPointLine(e,t){var n=e-Ge,r=t-Xe,a=Ee(n*n+r*r);$e+=a*(Ge+e)/2,et+=a*(Xe+t)/2,tt+=a,centroidPoint(Ge=e,Xe=t)}function centroidLineEnd(){ot.point=centroidPoint}function centroidRingStart(){ot.point=centroidPointFirstRing}function centroidRingEnd(){centroidPointRing(Qe,Ke)}function centroidPointFirstRing(e,t){ot.point=centroidPointRing,centroidPoint(Qe=Ge=e,Ke=Xe=t)}function centroidPointRing(e,t){var n=e-Ge,r=t-Xe,a=Ee(n*n+r*r);$e+=a*(Ge+e)/2,et+=a*(Xe+t)/2,tt+=a,nt+=(a=Xe*e-Ge*t)*(Ge+e),rt+=a*(Xe+t),at+=3*a,centroidPoint(Ge=e,Xe=t)}const st=ot;function PathContext(e){this._context=e}PathContext.prototype={_radius:4.5,pointRadius:function(e){return this._radius=e,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(e,t){switch(this._point){case 0:this._context.moveTo(e,t),this._point=1;break;case 1:this._context.lineTo(e,t);break;default:this._context.moveTo(e+this._radius,t),this._context.arc(e,t,this._radius,0,he)}},result:noop_noop};var ct,lt,ft,ut,dt,pt=new Adder,ht={point:noop_noop,lineStart:function(){ht.point=lengthPointFirst},lineEnd:function(){ct&&lengthPoint(lt,ft),ht.point=noop_noop},polygonStart:function(){ct=!0},polygonEnd:function(){ct=null},result:function(){var e=+pt;return pt=new Adder,e}};function lengthPointFirst(e,t){ht.point=lengthPoint,lt=ut=e,ft=dt=t}function lengthPoint(e,t){ut-=e,dt-=t,pt.add(Ee(ut*ut+dt*dt)),ut=e,dt=t}const mt=ht;let gt,bt,At,yt;class PathString{constructor(e){this._append=null==e?string_append:function appendRound(e){const t=Math.floor(e);if(!(t>=0))throw new RangeError(`invalid digits: ${e}`);if(t>15)return string_append;if(t!==gt){const e=10**t;gt=t,bt=function append(t){let n=1;this._+=t[0];for(const r=t.length;n<r;++n)this._+=Math.round(arguments[n]*e)/e+t[n]}}return bt}(e),this._radius=4.5,this._=""}pointRadius(e){return this._radius=+e,this}polygonStart(){this._line=0}polygonEnd(){this._line=NaN}lineStart(){this._point=0}lineEnd(){0===this._line&&(this._+="Z"),this._point=NaN}point(e,t){switch(this._point){case 0:this._append`M${e},${t}`,this._point=1;break;case 1:this._append`L${e},${t}`;break;default:if(this._append`M${e},${t}`,this._radius!==At||this._append!==bt){const e=this._radius,t=this._;this._="",this._append`m0,${e}a${e},${e} 0 1,1 0,${-2*e}a${e},${e} 0 1,1 0,${2*e}z`,At=e,bt=this._append,yt=this._,this._=t}this._+=yt}}result(){const e=this._;return this._="",e.length?e:null}}function string_append(e){let t=1;this._+=e[0];for(const n=e.length;t<n;++t)this._+=arguments[t]+e[t]}function path(e,t){let n,r,a=3,o=4.5;function path(e){return e&&("function"==typeof o&&r.pointRadius(+o.apply(this,arguments)),stream(e,n(r))),r.result()}return path.area=function(e){return stream(e,n(De)),De.result()},path.measure=function(e){return stream(e,n(mt)),mt.result()},path.bounds=function(e){return stream(e,n(Pe)),Pe.result()},path.centroid=function(e){return stream(e,n(st)),st.result()},path.projection=function(t){return arguments.length?(n=null==t?(e=null,d3_geo_src_identity):(e=t).stream,path):e},path.context=function(e){return arguments.length?(r=null==e?(t=null,new PathString(a)):new PathContext(t=e),"function"!=typeof o&&r.pointRadius(o),path):t},path.pointRadius=function(e){return arguments.length?(o="function"==typeof e?e:(r.pointRadius(+e),+e),path):o},path.digits=function(e){if(!arguments.length)return a;if(null==e)a=null;else{const t=Math.floor(e);if(!(t>=0))throw new RangeError(`invalid digits: ${e}`);a=t}return null===t&&(r=new PathString(a)),path},path.projection(e).digits(a).context(t)}function spherical(e){return[ye(e[1],e[0]),asin(e[2])]}function cartesian(e){var t=e[0],n=e[1],r=we(n);return[r*we(t),r*Se(t),Se(n)]}function cartesianDot(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]}function cartesianCross(e,t){return[e[1]*t[2]-e[2]*t[1],e[2]*t[0]-e[0]*t[2],e[0]*t[1]-e[1]*t[0]]}function cartesianAddInPlace(e,t){e[0]+=t[0],e[1]+=t[1],e[2]+=t[2]}function cartesianScale(e,t){return[e[0]*t,e[1]*t,e[2]*t]}function cartesianNormalizeInPlace(e){var t=Ee(e[0]*e[0]+e[1]*e[1]+e[2]*e[2]);e[0]/=t,e[1]/=t,e[2]/=t}function longitude(e){return be(e[0])<=ue?e[0]:Me(e[0])*((be(e[0])+ue)%he-ue)}function clip(e,t,n,r){return function(a){var o,s,c,l=t(a),f=buffer(),u=t(f),d=!1,p={point,lineStart,lineEnd,polygonStart:function(){p.point=pointRing,p.lineStart=ringStart,p.lineEnd=ringEnd,s=[],o=[]},polygonEnd:function(){p.point=point,p.lineStart=lineStart,p.lineEnd=lineEnd,s=merge_merge(s);var e=function polygonContains(e,t){var n=longitude(t),r=t[1],a=Se(r),o=[Se(n),-we(n),0],s=0,c=0,l=new Adder;1===a?r=de+fe:-1===a&&(r=-de-fe);for(var f=0,u=e.length;f<u;++f)if(p=(d=e[f]).length)for(var d,p,h=d[p-1],m=longitude(h),g=h[1]/2+pe,b=Se(g),A=we(g),y=0;y<p;++y,m=v,b=k,A=S,h=w){var w=d[y],v=longitude(w),x=w[1]/2+pe,k=Se(x),S=we(x),M=v-m,E=M>=0?1:-1,U=E*M,C=U>ue,R=b*k;if(l.add(ye(R*E*Se(U),A*S+R*we(U))),s+=C?M+E*he:M,C^m>=n^v>=n){var T=cartesianCross(cartesian(h),cartesian(w));cartesianNormalizeInPlace(T);var N=cartesianCross(o,T);cartesianNormalizeInPlace(N);var I=(C^M>=0?-1:1)*asin(N[2]);(r>I||r===I&&(T[0]||T[1]))&&(c+=C^M>=0?1:-1)}}return(s<-1e-6||s<fe&&l<-1e-12)^1&c}(o,r);s.length?(d||(a.polygonStart(),d=!0),rejoin(s,compareIntersection,e,n,a)):e&&(d||(a.polygonStart(),d=!0),a.lineStart(),n(null,null,1,a),a.lineEnd()),d&&(a.polygonEnd(),d=!1),s=o=null},sphere:function(){a.polygonStart(),a.lineStart(),n(null,null,1,a),a.lineEnd(),a.polygonEnd()}};function point(t,n){e(t,n)&&a.point(t,n)}function pointLine(e,t){l.point(e,t)}function lineStart(){p.point=pointLine,l.lineStart()}function lineEnd(){p.point=point,l.lineEnd()}function pointRing(e,t){c.push([e,t]),u.point(e,t)}function ringStart(){u.lineStart(),c=[]}function ringEnd(){pointRing(c[0][0],c[0][1]),u.lineEnd();var e,t,n,r,l=u.clean(),p=f.result(),h=p.length;if(c.pop(),o.push(c),c=null,h)if(1&l){if((t=(n=p[0]).length-1)>0){for(d||(a.polygonStart(),d=!0),a.lineStart(),e=0;e<t;++e)a.point((r=n[e])[0],r[1]);a.lineEnd()}}else h>1&&2&l&&p.push(p.pop().concat(p.shift())),s.push(p.filter(validSegment))}return p}}function validSegment(e){return e.length>1}function compareIntersection(e,t){return((e=e.x)[0]<0?e[1]-de-fe:de-e[1])-((t=t.x)[0]<0?t[1]-de-fe:de-t[1])}const wt=clip((function(){return!0}),(function clipAntimeridianLine(e){var t,n=NaN,r=NaN,a=NaN;return{lineStart:function(){e.lineStart(),t=1},point:function(o,s){var c=o>0?ue:-ue,l=be(o-n);be(l-ue)<fe?(e.point(n,r=(r+s)/2>0?de:-de),e.point(a,r),e.lineEnd(),e.lineStart(),e.point(c,r),e.point(o,r),t=0):a!==c&&l>=ue&&(be(n-a)<fe&&(n-=a*fe),be(o-c)<fe&&(o-=c*fe),r=function clipAntimeridianIntersect(e,t,n,r){var a,o,s=Se(e-n);return be(s)>fe?Ae((Se(t)*(o=we(r))*Se(n)-Se(r)*(a=we(t))*Se(e))/(a*o*s)):(t+r)/2}(n,r,o,s),e.point(a,r),e.lineEnd(),e.lineStart(),e.point(c,r),t=0),e.point(n=o,r=s),a=c},lineEnd:function(){e.lineEnd(),n=r=NaN},clean:function(){return 2-t}}}),(function clipAntimeridianInterpolate(e,t,n,r){var a;if(null==e)a=n*de,r.point(-ue,a),r.point(0,a),r.point(ue,a),r.point(ue,0),r.point(ue,-a),r.point(0,-a),r.point(-ue,-a),r.point(-ue,0),r.point(-ue,a);else if(be(e[0]-t[0])>fe){var o=e[0]<t[0]?ue:-ue;a=n*o/2,r.point(-o,a),r.point(0,a),r.point(o,a)}else r.point(t[0],t[1])}),[-ue,-de]);function circleStream(e,t,n,r,a,o){if(n){var s=we(t),c=Se(t),l=r*n;null==a?(a=t+r*he,o=t-l/2):(a=circleRadius(s,a),o=circleRadius(s,o),(r>0?a<o:a>o)&&(a+=r*he));for(var f,u=a;r>0?u>o:u<o;u-=l)f=spherical([s,-c*we(u),-c*Se(u)]),e.point(f[0],f[1])}}function circleRadius(e,t){(t=cartesian(t))[0]-=e,cartesianNormalizeInPlace(t);var n=acos(-t[1]);return((-t[2]<0?-n:n)+he-fe)%he}function compose(e,t){function compose(n,r){return n=e(n,r),t(n[0],n[1])}return e.invert&&t.invert&&(compose.invert=function(n,r){return(n=t.invert(n,r))&&e.invert(n[0],n[1])}),compose}function rotationIdentity(e,t){return be(e)>ue&&(e-=Math.round(e/he)*he),[e,t]}function rotation_rotateRadians(e,t,n){return(e%=he)?t||n?compose(rotationLambda(e),rotationPhiGamma(t,n)):rotationLambda(e):t||n?rotationPhiGamma(t,n):rotationIdentity}function forwardRotationLambda(e){return function(t,n){return be(t+=e)>ue&&(t-=Math.round(t/he)*he),[t,n]}}function rotationLambda(e){var t=forwardRotationLambda(e);return t.invert=forwardRotationLambda(-e),t}function rotationPhiGamma(e,t){var n=we(e),r=Se(e),a=we(t),o=Se(t);function rotation(e,t){var s=we(t),c=we(e)*s,l=Se(e)*s,f=Se(t),u=f*n+c*r;return[ye(l*a-u*o,c*n-f*r),asin(u*a+l*o)]}return rotation.invert=function(e,t){var s=we(t),c=we(e)*s,l=Se(e)*s,f=Se(t),u=f*a-l*o;return[ye(l*a+f*o,c*n+u*r),asin(u*n-c*r)]},rotation}function src_transform(e){return{stream:transformer(e)}}function transformer(e){return function(t){var n=new TransformStream;for(var r in e)n[r]=e[r];return n.stream=t,n}}function TransformStream(){}function fit(e,t,n){var r=e.clipExtent&&e.clipExtent();return e.scale(150).translate([0,0]),null!=r&&e.clipExtent(null),stream(n,e.stream(Pe)),t(Pe.result()),null!=r&&e.clipExtent(r),e}function fitExtent(e,t,n){return fit(e,(function(n){var r=t[1][0]-t[0][0],a=t[1][1]-t[0][1],o=Math.min(r/(n[1][0]-n[0][0]),a/(n[1][1]-n[0][1])),s=+t[0][0]+(r-o*(n[1][0]+n[0][0]))/2,c=+t[0][1]+(a-o*(n[1][1]+n[0][1]))/2;e.scale(150*o).translate([s,c])}),n)}function fitSize(e,t,n){return fitExtent(e,[[0,0],t],n)}function fitWidth(e,t,n){return fit(e,(function(n){var r=+t,a=r/(n[1][0]-n[0][0]),o=(r-a*(n[1][0]+n[0][0]))/2,s=-a*n[0][1];e.scale(150*a).translate([o,s])}),n)}function fitHeight(e,t,n){return fit(e,(function(n){var r=+t,a=r/(n[1][1]-n[0][1]),o=-a*n[0][0],s=(r-a*(n[1][1]+n[0][1]))/2;e.scale(150*a).translate([o,s])}),n)}rotationIdentity.invert=rotationIdentity,TransformStream.prototype={constructor:TransformStream,point:function(e,t){this.stream.point(e,t)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};var vt=we(30*ge);function resample(e,t){return+t?function resample_resample(e,t){function resampleLineTo(n,r,a,o,s,c,l,f,u,d,p,h,m,g){var b=l-n,A=f-r,y=b*b+A*A;if(y>4*t&&m--){var w=o+d,v=s+p,x=c+h,k=Ee(w*w+v*v+x*x),S=asin(x/=k),M=be(be(x)-1)<fe||be(a-u)<fe?(a+u)/2:ye(v,w),E=e(M,S),U=E[0],C=E[1],R=U-n,T=C-r,N=A*R-b*T;(N*N/y>t||be((b*R+A*T)/y-.5)>.3||o*d+s*p+c*h<vt)&&(resampleLineTo(n,r,a,o,s,c,U,C,M,w/=k,v/=k,x,m,g),g.point(U,C),resampleLineTo(U,C,M,w,v,x,l,f,u,d,p,h,m,g))}}return function(t){var n,r,a,o,s,c,l,f,u,d,p,h,m={point,lineStart,lineEnd,polygonStart:function(){t.polygonStart(),m.lineStart=ringStart},polygonEnd:function(){t.polygonEnd(),m.lineStart=lineStart}};function point(n,r){n=e(n,r),t.point(n[0],n[1])}function lineStart(){f=NaN,m.point=linePoint,t.lineStart()}function linePoint(n,r){var a=cartesian([n,r]),o=e(n,r);resampleLineTo(f,u,l,d,p,h,f=o[0],u=o[1],l=n,d=a[0],p=a[1],h=a[2],16,t),t.point(f,u)}function lineEnd(){m.point=point,t.lineEnd()}function ringStart(){lineStart(),m.point=ringPoint,m.lineEnd=ringEnd}function ringPoint(e,t){linePoint(n=e,t),r=f,a=u,o=d,s=p,c=h,m.point=linePoint}function ringEnd(){resampleLineTo(f,u,l,d,p,h,r,a,n,o,s,c,16,t),m.lineEnd=lineEnd,lineEnd()}return m}}(e,t):function resampleNone(e){return transformer({point:function(t,n){t=e(t,n),this.stream.point(t[0],t[1])}})}(e)}var xt=transformer({point:function(e,t){this.stream.point(e*ge,t*ge)}});function scaleTranslateRotate(e,t,n,r,a,o){if(!o)return function scaleTranslate(e,t,n,r,a){function transform(o,s){return[t+e*(o*=r),n-e*(s*=a)]}return transform.invert=function(o,s){return[(o-t)/e*r,(n-s)/e*a]},transform}(e,t,n,r,a);var s=we(o),c=Se(o),l=s*e,f=c*e,u=s/e,d=c/e,p=(c*n-s*t)/e,h=(c*t+s*n)/e;function transform(e,o){return[l*(e*=r)-f*(o*=a)+t,n-f*e-l*o]}return transform.invert=function(e,t){return[r*(u*e-d*t+p),a*(h-d*e-u*t)]},transform}function projection(e){return projectionMutator((function(){return e}))()}function projectionMutator(e){var t,n,r,a,o,s,c,l,f,u,d=150,p=480,h=250,m=0,g=0,b=0,A=0,y=0,w=0,v=1,x=1,k=null,S=wt,M=null,E=d3_geo_src_identity,U=.5;function projection(e){return l(e[0]*ge,e[1]*ge)}function invert(e){return(e=l.invert(e[0],e[1]))&&[e[0]*me,e[1]*me]}function recenter(){var e=scaleTranslateRotate(d,0,0,v,x,w).apply(null,t(m,g)),r=scaleTranslateRotate(d,p-e[0],h-e[1],v,x,w);return n=rotation_rotateRadians(b,A,y),c=compose(t,r),l=compose(n,c),s=resample(c,U),reset()}function reset(){return f=u=null,projection}return projection.stream=function(e){return f&&u===e?f:f=xt(function transformRotate(e){return transformer({point:function(t,n){var r=e(t,n);return this.stream.point(r[0],r[1])}})}(n)(S(s(E(u=e)))))},projection.preclip=function(e){return arguments.length?(S=e,k=void 0,reset()):S},projection.postclip=function(e){return arguments.length?(E=e,M=r=a=o=null,reset()):E},projection.clipAngle=function(e){return arguments.length?(S=+e?function clip_circle(e){var t=we(e),n=2*ge,r=t>0,a=be(t)>fe;function visible(e,n){return we(e)*we(n)>t}function intersect(e,n,r){var a=[1,0,0],o=cartesianCross(cartesian(e),cartesian(n)),s=cartesianDot(o,o),c=o[0],l=s-c*c;if(!l)return!r&&e;var f=t*s/l,u=-t*c/l,d=cartesianCross(a,o),p=cartesianScale(a,f);cartesianAddInPlace(p,cartesianScale(o,u));var h=d,m=cartesianDot(p,h),g=cartesianDot(h,h),b=m*m-g*(cartesianDot(p,p)-1);if(!(b<0)){var A=Ee(b),y=cartesianScale(h,(-m-A)/g);if(cartesianAddInPlace(y,p),y=spherical(y),!r)return y;var w,v=e[0],x=n[0],k=e[1],S=n[1];x<v&&(w=v,v=x,x=w);var M=x-v,E=be(M-ue)<fe;if(!E&&S<k&&(w=k,k=S,S=w),E||M<fe?E?k+S>0^y[1]<(be(y[0]-v)<fe?k:S):k<=y[1]&&y[1]<=S:M>ue^(v<=y[0]&&y[0]<=x)){var U=cartesianScale(h,(-m+A)/g);return cartesianAddInPlace(U,p),[y,spherical(U)]}}}function code(t,n){var a=r?e:ue-e,o=0;return t<-a?o|=1:t>a&&(o|=2),n<-a?o|=4:n>a&&(o|=8),o}return clip(visible,(function clipLine(e){var t,n,o,s,c;return{lineStart:function(){s=o=!1,c=1},point:function(l,f){var u,d=[l,f],p=visible(l,f),h=r?p?0:code(l,f):p?code(l+(l<0?ue:-ue),f):0;if(!t&&(s=o=p)&&e.lineStart(),p!==o&&(!(u=intersect(t,d))||pointEqual(t,u)||pointEqual(d,u))&&(d[2]=1),p!==o)c=0,p?(e.lineStart(),u=intersect(d,t),e.point(u[0],u[1])):(u=intersect(t,d),e.point(u[0],u[1],2),e.lineEnd()),t=u;else if(a&&t&&r^p){var m;h&n||!(m=intersect(d,t,!0))||(c=0,r?(e.lineStart(),e.point(m[0][0],m[0][1]),e.point(m[1][0],m[1][1]),e.lineEnd()):(e.point(m[1][0],m[1][1]),e.lineEnd(),e.lineStart(),e.point(m[0][0],m[0][1],3)))}!p||t&&pointEqual(t,d)||e.point(d[0],d[1]),t=d,o=p,n=h},lineEnd:function(){o&&e.lineEnd(),t=null},clean:function(){return c|(s&&o)<<1}}}),(function interpolate(t,r,a,o){circleStream(o,e,n,a,t,r)}),r?[0,-e]:[-ue,e-ue])}(k=e*ge):(k=null,wt),reset()):k*me},projection.clipExtent=function(e){return arguments.length?(E=null==e?(M=r=a=o=null,d3_geo_src_identity):clipRectangle(M=+e[0][0],r=+e[0][1],a=+e[1][0],o=+e[1][1]),reset()):null==M?null:[[M,r],[a,o]]},projection.scale=function(e){return arguments.length?(d=+e,recenter()):d},projection.translate=function(e){return arguments.length?(p=+e[0],h=+e[1],recenter()):[p,h]},projection.center=function(e){return arguments.length?(m=e[0]%360*ge,g=e[1]%360*ge,recenter()):[m*me,g*me]},projection.rotate=function(e){return arguments.length?(b=e[0]%360*ge,A=e[1]%360*ge,y=e.length>2?e[2]%360*ge:0,recenter()):[b*me,A*me,y*me]},projection.angle=function(e){return arguments.length?(w=e%360*ge,recenter()):w*me},projection.reflectX=function(e){return arguments.length?(v=e?-1:1,recenter()):v<0},projection.reflectY=function(e){return arguments.length?(x=e?-1:1,recenter()):x<0},projection.precision=function(e){return arguments.length?(s=resample(c,U=e*e),reset()):Ee(U)},projection.fitExtent=function(e,t){return fitExtent(projection,e,t)},projection.fitSize=function(e,t){return fitSize(projection,e,t)},projection.fitWidth=function(e,t){return fitWidth(projection,e,t)},projection.fitHeight=function(e,t){return fitHeight(projection,e,t)},function(){return t=e.apply(this,arguments),projection.invert=t.invert&&invert,recenter()}}function conicProjection(e){var t=0,n=ue/3,r=projectionMutator(e),a=r(t,n);return a.parallels=function(e){return arguments.length?r(t=e[0]*ge,n=e[1]*ge):[t*me,n*me]},a}function conicEqualAreaRaw(e,t){var n=Se(e),r=(n+Se(t))/2;if(be(r)<fe)return function cylindricalEqualAreaRaw(e){var t=we(e);function forward(e,n){return[e*t,Se(n)/t]}return forward.invert=function(e,n){return[e/t,asin(n*t)]},forward}(e);var a=1+n*(2*r-n),o=Ee(a)/r;function project(e,t){var n=Ee(a-2*r*Se(t))/r;return[n*Se(e*=r),o-n*we(e)]}return project.invert=function(e,t){var n=o-t,s=ye(e,be(n))*Me(n);return n*r<0&&(s-=ue*Me(e)*Me(n)),[s/r,asin((a-(e*e+n*n)*r*r)/(2*r))]},project}function conicEqualArea(){return conicProjection(conicEqualAreaRaw).scale(155.424).center([0,33.6442])}function albers(){return conicEqualArea().parallels([29.5,45.5]).scale(1070).translate([480,250]).rotate([96,0]).center([-.6,38.7])}function albersUsa(){var e,t,n,r,a,o,s=albers(),c=conicEqualArea().rotate([154,0]).center([-2,58.5]).parallels([55,65]),l=conicEqualArea().rotate([157,0]).center([-3,19.9]).parallels([8,18]),f={point:function(e,t){o=[e,t]}};function albersUsa(e){var t=e[0],s=e[1];return o=null,n.point(t,s),o||(r.point(t,s),o)||(a.point(t,s),o)}function reset(){return e=t=null,albersUsa}return albersUsa.invert=function(e){var t=s.scale(),n=s.translate(),r=(e[0]-n[0])/t,a=(e[1]-n[1])/t;return(a>=.12&&a<.234&&r>=-.425&&r<-.214?c:a>=.166&&a<.234&&r>=-.214&&r<-.115?l:s).invert(e)},albersUsa.stream=function(n){return e&&t===n?e:e=function multiplex(e){var t=e.length;return{point:function(n,r){for(var a=-1;++a<t;)e[a].point(n,r)},sphere:function(){for(var n=-1;++n<t;)e[n].sphere()},lineStart:function(){for(var n=-1;++n<t;)e[n].lineStart()},lineEnd:function(){for(var n=-1;++n<t;)e[n].lineEnd()},polygonStart:function(){for(var n=-1;++n<t;)e[n].polygonStart()},polygonEnd:function(){for(var n=-1;++n<t;)e[n].polygonEnd()}}}([s.stream(t=n),c.stream(n),l.stream(n)])},albersUsa.precision=function(e){return arguments.length?(s.precision(e),c.precision(e),l.precision(e),reset()):s.precision()},albersUsa.scale=function(e){return arguments.length?(s.scale(e),c.scale(.35*e),l.scale(e),albersUsa.translate(s.translate())):s.scale()},albersUsa.translate=function(e){if(!arguments.length)return s.translate();var t=s.scale(),o=+e[0],u=+e[1];return n=s.translate(e).clipExtent([[o-.455*t,u-.238*t],[o+.455*t,u+.238*t]]).stream(f),r=c.translate([o-.307*t,u+.201*t]).clipExtent([[o-.425*t+fe,u+.12*t+fe],[o-.214*t-fe,u+.234*t-fe]]).stream(f),a=l.translate([o-.205*t,u+.212*t]).clipExtent([[o-.214*t+fe,u+.166*t+fe],[o-.115*t-fe,u+.234*t-fe]]).stream(f),reset()},albersUsa.fitExtent=function(e,t){return fitExtent(albersUsa,e,t)},albersUsa.fitSize=function(e,t){return fitSize(albersUsa,e,t)},albersUsa.fitWidth=function(e,t){return fitWidth(albersUsa,e,t)},albersUsa.fitHeight=function(e,t){return fitHeight(albersUsa,e,t)},albersUsa.scale(1070)}function azimuthalRaw(e){return function(t,n){var r=we(t),a=we(n),o=e(r*a);return o===1/0?[2,0]:[o*a*Se(t),o*Se(n)]}}function azimuthalInvert(e){return function(t,n){var r=Ee(t*t+n*n),a=e(r),o=Se(a),s=we(a);return[ye(t*o,r*s),asin(r&&n*o/r)]}}var kt=azimuthalRaw((function(e){return Ee(2/(1+e))}));function azimuthalEqualArea(){return projection(kt).scale(124.75).clipAngle(179.999)}kt.invert=azimuthalInvert((function(e){return 2*asin(e/2)}));var St=azimuthalRaw((function(e){return(e=acos(e))&&e/Se(e)}));function azimuthalEquidistant(){return projection(St).scale(79.4188).clipAngle(179.999)}function mercatorRaw(e,t){return[e,xe(Ue((de+t)/2))]}function mercator(){return mercatorProjection(mercatorRaw).scale(961/he)}function mercatorProjection(e){var t,n,r,a=projection(e),o=a.center,s=a.scale,c=a.translate,l=a.clipExtent,f=null;function reclip(){var o=ue*s(),c=a(function rotation(e){function forward(t){return(t=e(t[0]*ge,t[1]*ge))[0]*=me,t[1]*=me,t}return e=rotation_rotateRadians(e[0]*ge,e[1]*ge,e.length>2?e[2]*ge:0),forward.invert=function(t){return(t=e.invert(t[0]*ge,t[1]*ge))[0]*=me,t[1]*=me,t},forward}(a.rotate()).invert([0,0]));return l(null==f?[[c[0]-o,c[1]-o],[c[0]+o,c[1]+o]]:e===mercatorRaw?[[Math.max(c[0]-o,f),t],[Math.min(c[0]+o,n),r]]:[[f,Math.max(c[1]-o,t)],[n,Math.min(c[1]+o,r)]])}return a.scale=function(e){return arguments.length?(s(e),reclip()):s()},a.translate=function(e){return arguments.length?(c(e),reclip()):c()},a.center=function(e){return arguments.length?(o(e),reclip()):o()},a.clipExtent=function(e){return arguments.length?(null==e?f=t=n=r=null:(f=+e[0][0],t=+e[0][1],n=+e[1][0],r=+e[1][1]),reclip()):null==f?null:[[f,t],[n,r]]},reclip()}function tany(e){return Ue((de+e)/2)}function conicConformalRaw(e,t){var n=we(e),r=e===t?Se(e):xe(n/we(t))/xe(tany(t)/tany(e)),a=n*ke(tany(e),r)/r;if(!r)return mercatorRaw;function project(e,t){a>0?t<-de+fe&&(t=-de+fe):t>de-fe&&(t=de-fe);var n=a/ke(tany(t),r);return[n*Se(r*e),a-n*we(r*e)]}return project.invert=function(e,t){var n=a-t,o=Me(r)*Ee(e*e+n*n),s=ye(e,be(n))*Me(n);return n*r<0&&(s-=ue*Me(e)*Me(n)),[s/r,2*Ae(ke(a/o,1/r))-de]},project}function conicConformal(){return conicProjection(conicConformalRaw).scale(109.5).parallels([30,30])}function equirectangularRaw(e,t){return[e,t]}function equirectangular(){return projection(equirectangularRaw).scale(152.63)}function conicEquidistantRaw(e,t){var n=we(e),r=e===t?Se(e):(n-we(t))/(t-e),a=n/r+e;if(be(r)<fe)return equirectangularRaw;function project(e,t){var n=a-t,o=r*e;return[n*Se(o),a-n*we(o)]}return project.invert=function(e,t){var n=a-t,o=ye(e,be(n))*Me(n);return n*r<0&&(o-=ue*Me(e)*Me(n)),[o/r,a-Me(r)*Ee(e*e+n*n)]},project}function conicEquidistant(){return conicProjection(conicEquidistantRaw).scale(131.154).center([0,13.9389])}St.invert=azimuthalInvert((function(e){return e})),mercatorRaw.invert=function(e,t){return[e,2*Ae(ve(t))-de]},equirectangularRaw.invert=equirectangularRaw;var Mt=1.340264,Et=-.081106,Ut=893e-6,Ct=.003796,Rt=Ee(3)/2;function equalEarthRaw(e,t){var n=asin(Rt*Se(t)),r=n*n,a=r*r*r;return[e*we(n)/(Rt*(Mt+3*Et*r+a*(7*Ut+9*Ct*r))),n*(Mt+Et*r+a*(Ut+Ct*r))]}function equalEarth(){return projection(equalEarthRaw).scale(177.158)}function gnomonicRaw(e,t){var n=we(t),r=we(e)*n;return[n*Se(e)/r,Se(t)/r]}function gnomonic(){return projection(gnomonicRaw).scale(144.049).clipAngle(60)}function orthographicRaw(e,t){return[we(t)*Se(e),Se(t)]}function orthographic(){return projection(orthographicRaw).scale(249.5).clipAngle(90.000001)}function stereographicRaw(e,t){var n=we(t),r=1+we(e)*n;return[n*Se(e)/r,Se(t)/r]}function stereographic(){return projection(stereographicRaw).scale(250).clipAngle(142)}function transverseMercatorRaw(e,t){return[xe(Ue((de+t)/2)),-e]}function transverseMercator(){var e=mercatorProjection(transverseMercatorRaw),t=e.center,n=e.rotate;return e.center=function(e){return arguments.length?t([-e[1],e[0]]):[(e=t())[1],-e[0]]},e.rotate=function(e){return arguments.length?n([e[0],e[1],e.length>2?e[2]+90:90]):[(e=n())[0],e[1],e[2]-90]},n([0,0,90]).scale(159.155)}function src_round(e,t){return e=+e,t=+t,function(n){return Math.round(e*(1-n)+t*n)}}function hsl_hsl(e){return function(t,n){var r=e((t=hsl(t)).h,(n=hsl(n)).h),a=nogamma(t.s,n.s),o=nogamma(t.l,n.l),s=nogamma(t.opacity,n.opacity);return function(e){return t.h=r(e),t.s=a(e),t.l=o(e),t.opacity=s(e),t+""}}}equalEarthRaw.invert=function(e,t){for(var n,r=t,a=r*r,o=a*a*a,s=0;s<12&&(o=(a=(r-=n=(r*(Mt+Et*a+o*(Ut+Ct*a))-t)/(Mt+3*Et*a+o*(7*Ut+9*Ct*a)))*r)*a*a,!(be(n)<1e-12));++s);return[Rt*e*(Mt+3*Et*a+o*(7*Ut+9*Ct*a))/we(r),asin(Se(r)/Rt)]},gnomonicRaw.invert=azimuthalInvert(Ae),orthographicRaw.invert=azimuthalInvert(asin),stereographicRaw.invert=azimuthalInvert((function(e){return 2*Ae(e)})),transverseMercatorRaw.invert=function(e,t){return[-t,2*Ae(ve(e))-de]};const Tt=hsl_hsl(hue);hsl_hsl(nogamma);const Nt=Math.PI/180,It=180/Math.PI,Lt=.96422,Vt=.82521,Bt=4/29,Wt=6/29,qt=3*Wt*Wt,Ft=Wt*Wt*Wt;function labConvert(e){if(e instanceof Lab)return new Lab(e.l,e.a,e.b,e.opacity);if(e instanceof Hcl)return hcl2lab(e);e instanceof Rgb||(e=rgbConvert(e));var t,n,r=rgb2lrgb(e.r),a=rgb2lrgb(e.g),o=rgb2lrgb(e.b),s=xyz2lab((.2225045*r+.7168786*a+.0606169*o)/1);return r===a&&a===o?t=n=s:(t=xyz2lab((.4360747*r+.3850649*a+.1430804*o)/Lt),n=xyz2lab((.0139322*r+.0971045*a+.7141733*o)/Vt)),new Lab(116*s-16,500*(t-s),200*(s-n),e.opacity)}function lab(e,t,n,r){return 1===arguments.length?labConvert(e):new Lab(e,t,n,null==r?1:r)}function Lab(e,t,n,r){this.l=+e,this.a=+t,this.b=+n,this.opacity=+r}function xyz2lab(e){return e>Ft?Math.pow(e,1/3):e/qt+Bt}function lab2xyz(e){return e>Wt?e*e*e:qt*(e-Bt)}function lrgb2rgb(e){return 255*(e<=.0031308?12.92*e:1.055*Math.pow(e,1/2.4)-.055)}function rgb2lrgb(e){return(e/=255)<=.04045?e/12.92:Math.pow((e+.055)/1.055,2.4)}function hclConvert(e){if(e instanceof Hcl)return new Hcl(e.h,e.c,e.l,e.opacity);if(e instanceof Lab||(e=labConvert(e)),0===e.a&&0===e.b)return new Hcl(NaN,0<e.l&&e.l<100?0:NaN,e.l,e.opacity);var t=Math.atan2(e.b,e.a)*It;return new Hcl(t<0?t+360:t,Math.sqrt(e.a*e.a+e.b*e.b),e.l,e.opacity)}function hcl(e,t,n,r){return 1===arguments.length?hclConvert(e):new Hcl(e,t,n,null==r?1:r)}function Hcl(e,t,n,r){this.h=+e,this.c=+t,this.l=+n,this.opacity=+r}function hcl2lab(e){if(isNaN(e.h))return new Lab(e.l,0,0,e.opacity);var t=e.h*Nt;return new Lab(e.l,Math.cos(t)*e.c,Math.sin(t)*e.c,e.opacity)}function hcl_hcl(e){return function(t,n){var r=e((t=hcl(t)).h,(n=hcl(n)).h),a=nogamma(t.c,n.c),o=nogamma(t.l,n.l),s=nogamma(t.opacity,n.opacity);return function(e){return t.h=r(e),t.c=a(e),t.l=o(e),t.opacity=s(e),t+""}}}src_define(Lab,lab,extend(Color,{brighter(e){return new Lab(this.l+18*(null==e?1:e),this.a,this.b,this.opacity)},darker(e){return new Lab(this.l-18*(null==e?1:e),this.a,this.b,this.opacity)},rgb(){var e=(this.l+16)/116,t=isNaN(this.a)?e:e+this.a/500,n=isNaN(this.b)?e:e-this.b/200;return new Rgb(lrgb2rgb(3.1338561*(t=Lt*lab2xyz(t))-1.6168667*(e=1*lab2xyz(e))-.4906146*(n=Vt*lab2xyz(n))),lrgb2rgb(-.9787684*t+1.9161415*e+.033454*n),lrgb2rgb(.0719453*t-.2289914*e+1.4052427*n),this.opacity)}})),src_define(Hcl,hcl,extend(Color,{brighter(e){return new Hcl(this.h,this.c,this.l+18*(null==e?1:e),this.opacity)},darker(e){return new Hcl(this.h,this.c,this.l-18*(null==e?1:e),this.opacity)},rgb(){return hcl2lab(this).rgb()}}));const Dt=hcl_hcl(hue);hcl_hcl(nogamma);function genericArray(e,t){var n,r=t?t.length:0,a=e?Math.min(r,e.length):0,o=new Array(a),s=new Array(r);for(n=0;n<a;++n)o[n]=value(e[n],t[n]);for(;n<r;++n)s[n]=t[n];return function(e){for(n=0;n<a;++n)s[n]=o[n](e);return s}}function date(e,t){var n=new Date;return e=+e,t=+t,function(r){return n.setTime(e*(1-r)+t*r),n}}function object(e,t){var n,r={},a={};for(n in null!==e&&"object"==typeof e||(e={}),null!==t&&"object"==typeof t||(t={}),t)n in e?r[n]=value(e[n],t[n]):a[n]=t[n];return function(e){for(n in r)a[n]=r[n](e);return a}}function src_numberArray(e,t){t||(t=[]);var n,r=e?Math.min(t.length,e.length):0,a=t.slice();return function(o){for(n=0;n<r;++n)a[n]=e[n]*(1-o)+t[n]*o;return a}}function value(e,t){var n,r=typeof t;return null==t||"boolean"===r?d3_interpolate_src_constant(t):("number"===r?src_number:"string"===r?(n=color(t))?(t=n,P):string:t instanceof color?P:t instanceof Date?date:function numberArray_isNumberArray(e){return ArrayBuffer.isView(e)&&!(e instanceof DataView)}(t)?src_numberArray:Array.isArray(t)?genericArray:"function"!=typeof t.valueOf&&"function"!=typeof t.toString||isNaN(t)?object:src_number)(e,t)}function piecewise(e,t){void 0===t&&(t=e,e=value);for(var n=0,r=t.length-1,a=t[0],o=new Array(r<0?0:r);n<r;)o[n]=e(a,a=t[++n]);return function(e){var t=Math.max(0,Math.min(r-1,Math.floor(e*=r)));return o[t](e-t)}}function quantize(e,t){for(var n=new Array(t),r=0;r<t;++r)n[r]=e(r/(t-1));return n}const Zt=Math.PI,Ot=2*Zt,Yt=1e-6,jt=Ot-Yt;function path_append(e){this._+=e[0];for(let t=1,n=e.length;t<n;++t)this._+=arguments[t]+e[t]}class Path{constructor(e){this._x0=this._y0=this._x1=this._y1=null,this._="",this._append=null==e?path_append:function path_appendRound(e){let t=Math.floor(e);if(!(t>=0))throw new Error(`invalid digits: ${e}`);if(t>15)return path_append;const n=10**t;return function(e){this._+=e[0];for(let t=1,r=e.length;t<r;++t)this._+=Math.round(arguments[t]*n)/n+e[t]}}(e)}moveTo(e,t){this._append`M${this._x0=this._x1=+e},${this._y0=this._y1=+t}`}closePath(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._append`Z`)}lineTo(e,t){this._append`L${this._x1=+e},${this._y1=+t}`}quadraticCurveTo(e,t,n,r){this._append`Q${+e},${+t},${this._x1=+n},${this._y1=+r}`}bezierCurveTo(e,t,n,r,a,o){this._append`C${+e},${+t},${+n},${+r},${this._x1=+a},${this._y1=+o}`}arcTo(e,t,n,r,a){if(e=+e,t=+t,n=+n,r=+r,(a=+a)<0)throw new Error(`negative radius: ${a}`);let o=this._x1,s=this._y1,c=n-e,l=r-t,f=o-e,u=s-t,d=f*f+u*u;if(null===this._x1)this._append`M${this._x1=e},${this._y1=t}`;else if(d>Yt)if(Math.abs(u*c-l*f)>Yt&&a){let p=n-o,h=r-s,m=c*c+l*l,g=p*p+h*h,b=Math.sqrt(m),A=Math.sqrt(d),y=a*Math.tan((Zt-Math.acos((m+d-g)/(2*b*A)))/2),w=y/A,v=y/b;Math.abs(w-1)>Yt&&this._append`L${e+w*f},${t+w*u}`,this._append`A${a},${a},0,0,${+(u*p>f*h)},${this._x1=e+v*c},${this._y1=t+v*l}`}else this._append`L${this._x1=e},${this._y1=t}`;else;}arc(e,t,n,r,a,o){if(e=+e,t=+t,o=!!o,(n=+n)<0)throw new Error(`negative radius: ${n}`);let s=n*Math.cos(r),c=n*Math.sin(r),l=e+s,f=t+c,u=1^o,d=o?r-a:a-r;null===this._x1?this._append`M${l},${f}`:(Math.abs(this._x1-l)>Yt||Math.abs(this._y1-f)>Yt)&&this._append`L${l},${f}`,n&&(d<0&&(d=d%Ot+Ot),d>jt?this._append`A${n},${n},0,1,${u},${e-s},${t-c}A${n},${n},0,1,${u},${this._x1=l},${this._y1=f}`:d>Yt&&this._append`A${n},${n},0,${+(d>=Zt)},${u},${this._x1=e+n*Math.cos(a)},${this._y1=t+n*Math.sin(a)}`)}rect(e,t,n,r){this._append`M${this._x0=this._x1=+e},${this._y0=this._y1=+t}h${n=+n}v${+r}h${-n}Z`}toString(){return this._}}function pathRound(e=3){return new Path(+e)}function initRange(e,t){switch(arguments.length){case 0:break;case 1:this.range(e);break;default:this.range(t).domain(e)}return this}function init_initInterpolator(e,t){switch(arguments.length){case 0:break;case 1:"function"==typeof e?this.interpolator(e):this.range(e);break;default:this.domain(e),"function"==typeof t?this.interpolator(t):this.range(t)}return this}const zt=Symbol("implicit");function ordinal(){var e=new InternMap,t=[],n=[],r=zt;function scale(a){let o=e.get(a);if(void 0===o){if(r!==zt)return r;e.set(a,o=t.push(a)-1)}return n[o%n.length]}return scale.domain=function(n){if(!arguments.length)return t.slice();t=[],e=new InternMap;for(const r of n)e.has(r)||e.set(r,t.push(r)-1);return scale},scale.range=function(e){return arguments.length?(n=Array.from(e),scale):n.slice()},scale.unknown=function(e){return arguments.length?(r=e,scale):r},scale.copy=function(){return ordinal(t,n).unknown(r)},initRange.apply(scale,arguments),scale}function band(){var e,t,n=ordinal().unknown(void 0),r=n.domain,a=n.range,o=0,s=1,c=!1,l=0,f=0,u=.5;function rescale(){var n=r().length,d=s<o,p=d?s:o,h=d?o:s;e=(h-p)/Math.max(1,n-l+2*f),c&&(e=Math.floor(e)),p+=(h-p-e*(n-l))*u,t=e*(1-l),c&&(p=Math.round(p),t=Math.round(t));var m=range_range(n).map((function(t){return p+e*t}));return a(d?m.reverse():m)}return delete n.unknown,n.domain=function(e){return arguments.length?(r(e),rescale()):r()},n.range=function(e){return arguments.length?([o,s]=e,o=+o,s=+s,rescale()):[o,s]},n.rangeRound=function(e){return[o,s]=e,o=+o,s=+s,c=!0,rescale()},n.bandwidth=function(){return t},n.step=function(){return e},n.round=function(e){return arguments.length?(c=!!e,rescale()):c},n.padding=function(e){return arguments.length?(l=Math.min(1,f=+e),rescale()):l},n.paddingInner=function(e){return arguments.length?(l=Math.min(1,e),rescale()):l},n.paddingOuter=function(e){return arguments.length?(f=+e,rescale()):f},n.align=function(e){return arguments.length?(u=Math.max(0,Math.min(1,e)),rescale()):u},n.copy=function(){return band(r(),[o,s]).round(c).paddingInner(l).paddingOuter(f).align(u)},initRange.apply(rescale(),arguments)}function pointish(e){var t=e.copy;return e.padding=e.paddingOuter,delete e.paddingInner,delete e.paddingOuter,e.copy=function(){return pointish(t())},e}function point(){return pointish(band.apply(null,arguments).paddingInner(1))}const Pt=bisector(ascending),Qt=Pt.right,Kt=(Pt.left,bisector(number_number).center,Qt);function src_number_number(e){return+e}var Gt=[0,1];function continuous_identity(e){return e}function normalize(e,t){return(t-=e=+e)?function(n){return(n-e)/t}:function constants(e){return function(){return e}}(isNaN(t)?NaN:.5)}function bimap(e,t,n){var r=e[0],a=e[1],o=t[0],s=t[1];return a<r?(r=normalize(a,r),o=n(s,o)):(r=normalize(r,a),o=n(o,s)),function(e){return o(r(e))}}function polymap(e,t,n){var r=Math.min(e.length,t.length)-1,a=new Array(r),o=new Array(r),s=-1;for(e[r]<e[0]&&(e=e.slice().reverse(),t=t.slice().reverse());++s<r;)a[s]=normalize(e[s],e[s+1]),o[s]=n(t[s],t[s+1]);return function(t){var n=Kt(e,t,1,r)-1;return o[n](a[n](t))}}function copy(e,t){return t.domain(e.domain()).range(e.range()).interpolate(e.interpolate()).clamp(e.clamp()).unknown(e.unknown())}function continuous_transformer(){var e,t,n,r,a,o,s=Gt,c=Gt,l=value,f=continuous_identity;function rescale(){var e=Math.min(s.length,c.length);return f!==continuous_identity&&(f=function clamper(e,t){var n;return e>t&&(n=e,e=t,t=n),function(n){return Math.max(e,Math.min(t,n))}}(s[0],s[e-1])),r=e>2?polymap:bimap,a=o=null,scale}function scale(t){return null==t||isNaN(t=+t)?n:(a||(a=r(s.map(e),c,l)))(e(f(t)))}return scale.invert=function(n){return f(t((o||(o=r(c,s.map(e),src_number)))(n)))},scale.domain=function(e){return arguments.length?(s=Array.from(e,src_number_number),rescale()):s.slice()},scale.range=function(e){return arguments.length?(c=Array.from(e),rescale()):c.slice()},scale.rangeRound=function(e){return c=Array.from(e),l=src_round,rescale()},scale.clamp=function(e){return arguments.length?(f=!!e||continuous_identity,rescale()):f!==continuous_identity},scale.interpolate=function(e){return arguments.length?(l=e,rescale()):l},scale.unknown=function(e){return arguments.length?(n=e,scale):n},function(n,r){return e=n,t=r,rescale()}}function continuous(){return continuous_transformer()(continuous_identity,continuous_identity)}function tickFormat(e,t,n,r){var a,o=tickStep(e,t,n);switch((r=formatSpecifier(null==r?",f":r)).type){case"s":var s=Math.max(Math.abs(e),Math.abs(t));return null!=r.precision||isNaN(a=function precisionPrefix(e,t){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(exponent(t)/3)))-exponent(Math.abs(e)))}(o,s))||(r.precision=a),se(r,s);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(a=function precisionRound(e,t){return e=Math.abs(e),t=Math.abs(t)-e,Math.max(0,exponent(t)-exponent(e))+1}(o,Math.max(Math.abs(e),Math.abs(t))))||(r.precision=a-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(a=function precisionFixed(e){return Math.max(0,-exponent(Math.abs(e)))}(o))||(r.precision=a-2*("%"===r.type))}return oe(r)}function linear_linearish(e){var t=e.domain;return e.ticks=function(e){var n=t();return ticks(n[0],n[n.length-1],null==e?10:e)},e.tickFormat=function(e,n){var r=t();return tickFormat(r[0],r[r.length-1],null==e?10:e,n)},e.nice=function(n){null==n&&(n=10);var r,a,o=t(),s=0,c=o.length-1,l=o[s],f=o[c],u=10;for(f<l&&(a=l,l=f,f=a,a=s,s=c,c=a);u-- >0;){if((a=tickIncrement(l,f,n))===r)return o[s]=l,o[c]=f,t(o);if(a>0)l=Math.floor(l/a)*a,f=Math.ceil(f/a)*a;else{if(!(a<0))break;l=Math.ceil(l*a)/a,f=Math.floor(f*a)/a}r=a}return e},e}function linear_linear(){var e=continuous();return e.copy=function(){return copy(e,linear_linear())},initRange.apply(e,arguments),linear_linearish(e)}function src_identity_identity(e){var t;function scale(e){return null==e||isNaN(e=+e)?t:e}return scale.invert=scale,scale.domain=scale.range=function(t){return arguments.length?(e=Array.from(t,src_number_number),scale):e.slice()},scale.unknown=function(e){return arguments.length?(t=e,scale):t},scale.copy=function(){return src_identity_identity(e).unknown(t)},e=arguments.length?Array.from(e,src_number_number):[0,1],linear_linearish(scale)}function nice(e,t){var n,r=0,a=(e=e.slice()).length-1,o=e[r],s=e[a];return s<o&&(n=r,r=a,a=n,n=o,o=s,s=n),e[r]=t.floor(o),e[a]=t.ceil(s),e}function transformLog(e){return Math.log(e)}function transformExp(e){return Math.exp(e)}function transformLogn(e){return-Math.log(-e)}function transformExpn(e){return-Math.exp(-e)}function pow10(e){return isFinite(e)?+("1e"+e):e<0?0:e}function reflect(e){return(t,n)=>-e(-t,n)}function log_loggish(e){const t=e(transformLog,transformExp),n=t.domain;let r,a,o=10;function rescale(){return r=function logp(e){return e===Math.E?Math.log:10===e&&Math.log10||2===e&&Math.log2||(e=Math.log(e),t=>Math.log(t)/e)}(o),a=function powp(e){return 10===e?pow10:e===Math.E?Math.exp:t=>Math.pow(e,t)}(o),n()[0]<0?(r=reflect(r),a=reflect(a),e(transformLogn,transformExpn)):e(transformLog,transformExp),t}return t.base=function(e){return arguments.length?(o=+e,rescale()):o},t.domain=function(e){return arguments.length?(n(e),rescale()):n()},t.ticks=e=>{const t=n();let s=t[0],c=t[t.length-1];const l=c<s;l&&([s,c]=[c,s]);let f,u,d=r(s),p=r(c);const h=null==e?10:+e;let m=[];if(!(o%1)&&p-d<h){if(d=Math.floor(d),p=Math.ceil(p),s>0){for(;d<=p;++d)for(f=1;f<o;++f)if(u=d<0?f/a(-d):f*a(d),!(u<s)){if(u>c)break;m.push(u)}}else for(;d<=p;++d)for(f=o-1;f>=1;--f)if(u=d>0?f/a(-d):f*a(d),!(u<s)){if(u>c)break;m.push(u)}2*m.length<h&&(m=ticks(s,c,h))}else m=ticks(d,p,Math.min(p-d,h)).map(a);return l?m.reverse():m},t.tickFormat=(e,n)=>{if(null==e&&(e=10),null==n&&(n=10===o?"s":","),"function"!=typeof n&&(o%1||null!=(n=formatSpecifier(n)).precision||(n.trim=!0),n=oe(n)),e===1/0)return n;const s=Math.max(1,o*e/t.ticks().length);return e=>{let t=e/a(Math.round(r(e)));return t*o<o-.5&&(t*=o),t<=s?n(e):""}},t.nice=()=>n(nice(n(),{floor:e=>a(Math.floor(r(e))),ceil:e=>a(Math.ceil(r(e)))})),t}function log_log(){const e=log_loggish(continuous_transformer()).domain([1,10]);return e.copy=()=>copy(e,log_log()).base(e.base()),initRange.apply(e,arguments),e}function transformSymlog(e){return function(t){return Math.sign(t)*Math.log1p(Math.abs(t/e))}}function transformSymexp(e){return function(t){return Math.sign(t)*Math.expm1(Math.abs(t))*e}}function symlog_symlogish(e){var t=1,n=e(transformSymlog(t),transformSymexp(t));return n.constant=function(n){return arguments.length?e(transformSymlog(t=+n),transformSymexp(t)):t},linear_linearish(n)}function symlog(){var e=symlog_symlogish(continuous_transformer());return e.copy=function(){return copy(e,symlog()).constant(e.constant())},initRange.apply(e,arguments)}function transformPow(e){return function(t){return t<0?-Math.pow(-t,e):Math.pow(t,e)}}function transformSqrt(e){return e<0?-Math.sqrt(-e):Math.sqrt(e)}function transformSquare(e){return e<0?-e*e:e*e}function pow_powish(e){var t=e(continuous_identity,continuous_identity),n=1;return t.exponent=function(t){return arguments.length?(n=+t,function rescale(){return 1===n?e(continuous_identity,continuous_identity):.5===n?e(transformSqrt,transformSquare):e(transformPow(n),transformPow(1/n))}()):n},linear_linearish(t)}function pow_pow(){var e=pow_powish(continuous_transformer());return e.copy=function(){return copy(e,pow_pow()).exponent(e.exponent())},initRange.apply(e,arguments),e}function quantile_quantile(){var e,t=[],n=[],r=[];function rescale(){var e=0,a=Math.max(1,n.length);for(r=new Array(a-1);++e<a;)r[e-1]=quantileSorted(t,e/a);return scale}function scale(t){return null==t||isNaN(t=+t)?e:n[Kt(r,t)]}return scale.invertExtent=function(e){var a=n.indexOf(e);return a<0?[NaN,NaN]:[a>0?r[a-1]:t[0],a<r.length?r[a]:t[t.length-1]]},scale.domain=function(e){if(!arguments.length)return t.slice();t=[];for(let n of e)null==n||isNaN(n=+n)||t.push(n);return t.sort(ascending),rescale()},scale.range=function(e){return arguments.length?(n=Array.from(e),rescale()):n.slice()},scale.unknown=function(t){return arguments.length?(e=t,scale):e},scale.quantiles=function(){return r.slice()},scale.copy=function(){return quantile_quantile().domain(t).range(n).unknown(e)},initRange.apply(scale,arguments)}function threshold(){var e,t=[.5],n=[0,1],r=1;function scale(a){return null!=a&&a<=a?n[Kt(t,a,0,r)]:e}return scale.domain=function(e){return arguments.length?(t=Array.from(e),r=Math.min(t.length,n.length-1),scale):t.slice()},scale.range=function(e){return arguments.length?(n=Array.from(e),r=Math.min(t.length,n.length-1),scale):n.slice()},scale.invertExtent=function(e){var r=n.indexOf(e);return[t[r-1],t[r]]},scale.unknown=function(t){return arguments.length?(e=t,scale):e},scale.copy=function(){return threshold().domain(t).range(n).unknown(e)},initRange.apply(scale,arguments)}const Xt=1e3,Jt=6e4,Ht=36e5,_t=864e5,$t=6048e5,en=2592e6,tn=31536e6,nn=new Date,rn=new Date;function timeInterval(e,t,n,r){function interval(t){return e(t=0===arguments.length?new Date:new Date(+t)),t}return interval.floor=t=>(e(t=new Date(+t)),t),interval.ceil=n=>(e(n=new Date(n-1)),t(n,1),e(n),n),interval.round=e=>{const t=interval(e),n=interval.ceil(e);return e-t<n-e?t:n},interval.offset=(e,n)=>(t(e=new Date(+e),null==n?1:Math.floor(n)),e),interval.range=(n,r,a)=>{const o=[];if(n=interval.ceil(n),a=null==a?1:Math.floor(a),!(n<r&&a>0))return o;let s;do{o.push(s=new Date(+n)),t(n,a),e(n)}while(s<n&&n<r);return o},interval.filter=n=>timeInterval((t=>{if(t>=t)for(;e(t),!n(t);)t.setTime(t-1)}),((e,r)=>{if(e>=e)if(r<0)for(;++r<=0;)for(;t(e,-1),!n(e););else for(;--r>=0;)for(;t(e,1),!n(e););})),n&&(interval.count=(t,r)=>(nn.setTime(+t),rn.setTime(+r),e(nn),e(rn),Math.floor(n(nn,rn))),interval.every=e=>(e=Math.floor(e),isFinite(e)&&e>0?e>1?interval.filter(r?t=>r(t)%e==0:t=>interval.count(0,t)%e==0):interval:null)),interval}const an=timeInterval((()=>{}),((e,t)=>{e.setTime(+e+t)}),((e,t)=>t-e));an.every=e=>(e=Math.floor(e),isFinite(e)&&e>0?e>1?timeInterval((t=>{t.setTime(Math.floor(t/e)*e)}),((t,n)=>{t.setTime(+t+n*e)}),((t,n)=>(n-t)/e)):an:null);an.range;const sn=timeInterval((e=>{e.setTime(e-e.getMilliseconds())}),((e,t)=>{e.setTime(+e+t*Xt)}),((e,t)=>(t-e)/Xt),(e=>e.getUTCSeconds())),cn=(sn.range,timeInterval((e=>{e.setTime(e-e.getMilliseconds()-e.getSeconds()*Xt)}),((e,t)=>{e.setTime(+e+t*Jt)}),((e,t)=>(t-e)/Jt),(e=>e.getMinutes()))),ln=(cn.range,timeInterval((e=>{e.setUTCSeconds(0,0)}),((e,t)=>{e.setTime(+e+t*Jt)}),((e,t)=>(t-e)/Jt),(e=>e.getUTCMinutes()))),fn=(ln.range,timeInterval((e=>{e.setTime(e-e.getMilliseconds()-e.getSeconds()*Xt-e.getMinutes()*Jt)}),((e,t)=>{e.setTime(+e+t*Ht)}),((e,t)=>(t-e)/Ht),(e=>e.getHours()))),un=(fn.range,timeInterval((e=>{e.setUTCMinutes(0,0,0)}),((e,t)=>{e.setTime(+e+t*Ht)}),((e,t)=>(t-e)/Ht),(e=>e.getUTCHours()))),dn=(un.range,timeInterval((e=>e.setHours(0,0,0,0)),((e,t)=>e.setDate(e.getDate()+t)),((e,t)=>(t-e-(t.getTimezoneOffset()-e.getTimezoneOffset())*Jt)/_t),(e=>e.getDate()-1))),pn=(dn.range,timeInterval((e=>{e.setUTCHours(0,0,0,0)}),((e,t)=>{e.setUTCDate(e.getUTCDate()+t)}),((e,t)=>(t-e)/_t),(e=>e.getUTCDate()-1))),hn=(pn.range,timeInterval((e=>{e.setUTCHours(0,0,0,0)}),((e,t)=>{e.setUTCDate(e.getUTCDate()+t)}),((e,t)=>(t-e)/_t),(e=>Math.floor(e/_t))));hn.range;function timeWeekday(e){return timeInterval((t=>{t.setDate(t.getDate()-(t.getDay()+7-e)%7),t.setHours(0,0,0,0)}),((e,t)=>{e.setDate(e.getDate()+7*t)}),((e,t)=>(t-e-(t.getTimezoneOffset()-e.getTimezoneOffset())*Jt)/$t))}const mn=timeWeekday(0),gn=timeWeekday(1),bn=timeWeekday(2),An=timeWeekday(3),yn=timeWeekday(4),wn=timeWeekday(5),vn=timeWeekday(6);mn.range,gn.range,bn.range,An.range,yn.range,wn.range,vn.range;function utcWeekday(e){return timeInterval((t=>{t.setUTCDate(t.getUTCDate()-(t.getUTCDay()+7-e)%7),t.setUTCHours(0,0,0,0)}),((e,t)=>{e.setUTCDate(e.getUTCDate()+7*t)}),((e,t)=>(t-e)/$t))}const xn=utcWeekday(0),kn=utcWeekday(1),Sn=utcWeekday(2),Mn=utcWeekday(3),En=utcWeekday(4),Un=utcWeekday(5),Cn=utcWeekday(6),Rn=(xn.range,kn.range,Sn.range,Mn.range,En.range,Un.range,Cn.range,timeInterval((e=>{e.setDate(1),e.setHours(0,0,0,0)}),((e,t)=>{e.setMonth(e.getMonth()+t)}),((e,t)=>t.getMonth()-e.getMonth()+12*(t.getFullYear()-e.getFullYear())),(e=>e.getMonth()))),Tn=(Rn.range,timeInterval((e=>{e.setUTCDate(1),e.setUTCHours(0,0,0,0)}),((e,t)=>{e.setUTCMonth(e.getUTCMonth()+t)}),((e,t)=>t.getUTCMonth()-e.getUTCMonth()+12*(t.getUTCFullYear()-e.getUTCFullYear())),(e=>e.getUTCMonth()))),Nn=(Tn.range,timeInterval((e=>{e.setMonth(0,1),e.setHours(0,0,0,0)}),((e,t)=>{e.setFullYear(e.getFullYear()+t)}),((e,t)=>t.getFullYear()-e.getFullYear()),(e=>e.getFullYear())));Nn.every=e=>isFinite(e=Math.floor(e))&&e>0?timeInterval((t=>{t.setFullYear(Math.floor(t.getFullYear()/e)*e),t.setMonth(0,1),t.setHours(0,0,0,0)}),((t,n)=>{t.setFullYear(t.getFullYear()+n*e)})):null;Nn.range;const In=timeInterval((e=>{e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)}),((e,t)=>{e.setUTCFullYear(e.getUTCFullYear()+t)}),((e,t)=>t.getUTCFullYear()-e.getUTCFullYear()),(e=>e.getUTCFullYear()));In.every=e=>isFinite(e=Math.floor(e))&&e>0?timeInterval((t=>{t.setUTCFullYear(Math.floor(t.getUTCFullYear()/e)*e),t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),((t,n)=>{t.setUTCFullYear(t.getUTCFullYear()+n*e)})):null;In.range;function ticker(e,t,n,r,a,o){const s=[[sn,1,Xt],[sn,5,5e3],[sn,15,15e3],[sn,30,3e4],[o,1,Jt],[o,5,3e5],[o,15,9e5],[o,30,18e5],[a,1,Ht],[a,3,108e5],[a,6,216e5],[a,12,432e5],[r,1,_t],[r,2,1728e5],[n,1,$t],[t,1,en],[t,3,7776e6],[e,1,tn]];function tickInterval(t,n,r){const a=Math.abs(n-t)/r,o=bisector((([,,e])=>e)).right(s,a);if(o===s.length)return e.every(tickStep(t/tn,n/tn,r));if(0===o)return an.every(Math.max(tickStep(t,n,r),1));const[c,l]=s[a/s[o-1][2]<s[o][2]/a?o-1:o];return c.every(l)}return[function ticks(e,t,n){const r=t<e;r&&([e,t]=[t,e]);const a=n&&"function"==typeof n.range?n:tickInterval(e,t,n),o=a?a.range(e,+t+1):[];return r?o.reverse():o},tickInterval]}const[Ln,Vn]=ticker(In,Tn,xn,hn,un,ln),[Bn,Wn]=ticker(Nn,Rn,mn,dn,fn,cn);function localDate(e){if(0<=e.y&&e.y<100){var t=new Date(-1,e.m,e.d,e.H,e.M,e.S,e.L);return t.setFullYear(e.y),t}return new Date(e.y,e.m,e.d,e.H,e.M,e.S,e.L)}function utcDate(e){if(0<=e.y&&e.y<100){var t=new Date(Date.UTC(-1,e.m,e.d,e.H,e.M,e.S,e.L));return t.setUTCFullYear(e.y),t}return new Date(Date.UTC(e.y,e.m,e.d,e.H,e.M,e.S,e.L))}function newDate(e,t,n){return{y:e,m:t,d:n,H:0,M:0,S:0,L:0}}var qn,Fn,Dn,Zn={"-":"",_:" ",0:"0"},On=/^\s*\d+/,Yn=/^%/,jn=/[\\^$*+?|[\]().{}]/g;function pad(e,t,n){var r=e<0?"-":"",a=(r?-e:e)+"",o=a.length;return r+(o<n?new Array(n-o+1).join(t)+a:a)}function requote(e){return e.replace(jn,"\\$&")}function formatRe(e){return new RegExp("^(?:"+e.map(requote).join("|")+")","i")}function formatLookup(e){return new Map(e.map(((e,t)=>[e.toLowerCase(),t])))}function parseWeekdayNumberSunday(e,t,n){var r=On.exec(t.slice(n,n+1));return r?(e.w=+r[0],n+r[0].length):-1}function parseWeekdayNumberMonday(e,t,n){var r=On.exec(t.slice(n,n+1));return r?(e.u=+r[0],n+r[0].length):-1}function parseWeekNumberSunday(e,t,n){var r=On.exec(t.slice(n,n+2));return r?(e.U=+r[0],n+r[0].length):-1}function parseWeekNumberISO(e,t,n){var r=On.exec(t.slice(n,n+2));return r?(e.V=+r[0],n+r[0].length):-1}function parseWeekNumberMonday(e,t,n){var r=On.exec(t.slice(n,n+2));return r?(e.W=+r[0],n+r[0].length):-1}function parseFullYear(e,t,n){var r=On.exec(t.slice(n,n+4));return r?(e.y=+r[0],n+r[0].length):-1}function parseYear(e,t,n){var r=On.exec(t.slice(n,n+2));return r?(e.y=+r[0]+(+r[0]>68?1900:2e3),n+r[0].length):-1}function parseZone(e,t,n){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(t.slice(n,n+6));return r?(e.Z=r[1]?0:-(r[2]+(r[3]||"00")),n+r[0].length):-1}function parseQuarter(e,t,n){var r=On.exec(t.slice(n,n+1));return r?(e.q=3*r[0]-3,n+r[0].length):-1}function parseMonthNumber(e,t,n){var r=On.exec(t.slice(n,n+2));return r?(e.m=r[0]-1,n+r[0].length):-1}function parseDayOfMonth(e,t,n){var r=On.exec(t.slice(n,n+2));return r?(e.d=+r[0],n+r[0].length):-1}function parseDayOfYear(e,t,n){var r=On.exec(t.slice(n,n+3));return r?(e.m=0,e.d=+r[0],n+r[0].length):-1}function parseHour24(e,t,n){var r=On.exec(t.slice(n,n+2));return r?(e.H=+r[0],n+r[0].length):-1}function parseMinutes(e,t,n){var r=On.exec(t.slice(n,n+2));return r?(e.M=+r[0],n+r[0].length):-1}function parseSeconds(e,t,n){var r=On.exec(t.slice(n,n+2));return r?(e.S=+r[0],n+r[0].length):-1}function parseMilliseconds(e,t,n){var r=On.exec(t.slice(n,n+3));return r?(e.L=+r[0],n+r[0].length):-1}function parseMicroseconds(e,t,n){var r=On.exec(t.slice(n,n+6));return r?(e.L=Math.floor(r[0]/1e3),n+r[0].length):-1}function parseLiteralPercent(e,t,n){var r=Yn.exec(t.slice(n,n+1));return r?n+r[0].length:-1}function parseUnixTimestamp(e,t,n){var r=On.exec(t.slice(n));return r?(e.Q=+r[0],n+r[0].length):-1}function parseUnixTimestampSeconds(e,t,n){var r=On.exec(t.slice(n));return r?(e.s=+r[0],n+r[0].length):-1}function formatDayOfMonth(e,t){return pad(e.getDate(),t,2)}function formatHour24(e,t){return pad(e.getHours(),t,2)}function formatHour12(e,t){return pad(e.getHours()%12||12,t,2)}function formatDayOfYear(e,t){return pad(1+dn.count(Nn(e),e),t,3)}function formatMilliseconds(e,t){return pad(e.getMilliseconds(),t,3)}function formatMicroseconds(e,t){return formatMilliseconds(e,t)+"000"}function formatMonthNumber(e,t){return pad(e.getMonth()+1,t,2)}function formatMinutes(e,t){return pad(e.getMinutes(),t,2)}function formatSeconds(e,t){return pad(e.getSeconds(),t,2)}function formatWeekdayNumberMonday(e){var t=e.getDay();return 0===t?7:t}function formatWeekNumberSunday(e,t){return pad(mn.count(Nn(e)-1,e),t,2)}function dISO(e){var t=e.getDay();return t>=4||0===t?yn(e):yn.ceil(e)}function formatWeekNumberISO(e,t){return e=dISO(e),pad(yn.count(Nn(e),e)+(4===Nn(e).getDay()),t,2)}function formatWeekdayNumberSunday(e){return e.getDay()}function formatWeekNumberMonday(e,t){return pad(gn.count(Nn(e)-1,e),t,2)}function formatYear(e,t){return pad(e.getFullYear()%100,t,2)}function formatYearISO(e,t){return pad((e=dISO(e)).getFullYear()%100,t,2)}function formatFullYear(e,t){return pad(e.getFullYear()%1e4,t,4)}function formatFullYearISO(e,t){var n=e.getDay();return pad((e=n>=4||0===n?yn(e):yn.ceil(e)).getFullYear()%1e4,t,4)}function formatZone(e){var t=e.getTimezoneOffset();return(t>0?"-":(t*=-1,"+"))+pad(t/60|0,"0",2)+pad(t%60,"0",2)}function formatUTCDayOfMonth(e,t){return pad(e.getUTCDate(),t,2)}function formatUTCHour24(e,t){return pad(e.getUTCHours(),t,2)}function formatUTCHour12(e,t){return pad(e.getUTCHours()%12||12,t,2)}function formatUTCDayOfYear(e,t){return pad(1+pn.count(In(e),e),t,3)}function formatUTCMilliseconds(e,t){return pad(e.getUTCMilliseconds(),t,3)}function formatUTCMicroseconds(e,t){return formatUTCMilliseconds(e,t)+"000"}function formatUTCMonthNumber(e,t){return pad(e.getUTCMonth()+1,t,2)}function formatUTCMinutes(e,t){return pad(e.getUTCMinutes(),t,2)}function formatUTCSeconds(e,t){return pad(e.getUTCSeconds(),t,2)}function formatUTCWeekdayNumberMonday(e){var t=e.getUTCDay();return 0===t?7:t}function formatUTCWeekNumberSunday(e,t){return pad(xn.count(In(e)-1,e),t,2)}function UTCdISO(e){var t=e.getUTCDay();return t>=4||0===t?En(e):En.ceil(e)}function formatUTCWeekNumberISO(e,t){return e=UTCdISO(e),pad(En.count(In(e),e)+(4===In(e).getUTCDay()),t,2)}function formatUTCWeekdayNumberSunday(e){return e.getUTCDay()}function formatUTCWeekNumberMonday(e,t){return pad(kn.count(In(e)-1,e),t,2)}function formatUTCYear(e,t){return pad(e.getUTCFullYear()%100,t,2)}function formatUTCYearISO(e,t){return pad((e=UTCdISO(e)).getUTCFullYear()%100,t,2)}function formatUTCFullYear(e,t){return pad(e.getUTCFullYear()%1e4,t,4)}function formatUTCFullYearISO(e,t){var n=e.getUTCDay();return pad((e=n>=4||0===n?En(e):En.ceil(e)).getUTCFullYear()%1e4,t,4)}function formatUTCZone(){return"+0000"}function formatLiteralPercent(){return"%"}function formatUnixTimestamp(e){return+e}function formatUnixTimestampSeconds(e){return Math.floor(+e/1e3)}function time_date(e){return new Date(e)}function time_number(e){return e instanceof Date?+e:+new Date(+e)}function calendar(e,t,n,r,a,o,s,c,l,f){var u=continuous(),d=u.invert,p=u.domain,h=f(".%L"),m=f(":%S"),g=f("%I:%M"),b=f("%I %p"),A=f("%a %d"),y=f("%b %d"),w=f("%B"),v=f("%Y");function tickFormat(e){return(l(e)<e?h:c(e)<e?m:s(e)<e?g:o(e)<e?b:r(e)<e?a(e)<e?A:y:n(e)<e?w:v)(e)}return u.invert=function(e){return new Date(d(e))},u.domain=function(e){return arguments.length?p(Array.from(e,time_number)):p().map(time_date)},u.ticks=function(t){var n=p();return e(n[0],n[n.length-1],null==t?10:t)},u.tickFormat=function(e,t){return null==t?tickFormat:f(t)},u.nice=function(e){var n=p();return e&&"function"==typeof e.range||(e=t(n[0],n[n.length-1],null==e?10:e)),e?p(nice(n,e)):u},u.copy=function(){return copy(u,calendar(e,t,n,r,a,o,s,c,l,f))},u}function sequential_copy(e,t){return t.domain(e.domain()).interpolator(e.interpolator()).clamp(e.clamp()).unknown(e.unknown())}function diverging_transformer(){var e,t,n,r,a,o,s,c=0,l=.5,f=1,u=1,d=continuous_identity,p=!1;function scale(e){return isNaN(e=+e)?s:(e=.5+((e=+o(e))-t)*(u*e<u*t?r:a),d(p?Math.max(0,Math.min(1,e)):e))}function range(e){return function(t){var n,r,a;return arguments.length?([n,r,a]=t,d=piecewise(e,[n,r,a]),scale):[d(0),d(.5),d(1)]}}return scale.domain=function(s){return arguments.length?([c,l,f]=s,e=o(c=+c),t=o(l=+l),n=o(f=+f),r=e===t?0:.5/(t-e),a=t===n?0:.5/(n-t),u=t<e?-1:1,scale):[c,l,f]},scale.clamp=function(e){return arguments.length?(p=!!e,scale):p},scale.interpolator=function(e){return arguments.length?(d=e,scale):d},scale.range=range(value),scale.rangeRound=range(src_round),scale.unknown=function(e){return arguments.length?(s=e,scale):s},function(s){return o=s,e=s(c),t=s(l),n=s(f),r=e===t?0:.5/(t-e),a=t===n?0:.5/(n-t),u=t<e?-1:1,scale}}function diverging(){var e=linear_linearish(diverging_transformer()(continuous_identity));return e.copy=function(){return sequential_copy(e,diverging())},init_initInterpolator.apply(e,arguments)}function divergingLog(){var e=log_loggish(diverging_transformer()).domain([.1,1,10]);return e.copy=function(){return sequential_copy(e,divergingLog()).base(e.base())},init_initInterpolator.apply(e,arguments)}function divergingSymlog(){var e=symlog_symlogish(diverging_transformer());return e.copy=function(){return sequential_copy(e,divergingSymlog()).constant(e.constant())},init_initInterpolator.apply(e,arguments)}function divergingPow(){var e=pow_powish(diverging_transformer());return e.copy=function(){return sequential_copy(e,divergingPow()).exponent(e.exponent())},init_initInterpolator.apply(e,arguments)}function colors(e){for(var t=e.length/6|0,n=new Array(t),r=0;r<t;)n[r]="#"+e.slice(6*r,6*++r);return n}!function defaultLocale_defaultLocale(e){return qn=function formatLocale(e){var t=e.dateTime,n=e.date,r=e.time,a=e.periods,o=e.days,s=e.shortDays,c=e.months,l=e.shortMonths,f=formatRe(a),u=formatLookup(a),d=formatRe(o),p=formatLookup(o),h=formatRe(s),m=formatLookup(s),g=formatRe(c),b=formatLookup(c),A=formatRe(l),y=formatLookup(l),w={a:function formatShortWeekday(e){return s[e.getDay()]},A:function formatWeekday(e){return o[e.getDay()]},b:function formatShortMonth(e){return l[e.getMonth()]},B:function formatMonth(e){return c[e.getMonth()]},c:null,d:formatDayOfMonth,e:formatDayOfMonth,f:formatMicroseconds,g:formatYearISO,G:formatFullYearISO,H:formatHour24,I:formatHour12,j:formatDayOfYear,L:formatMilliseconds,m:formatMonthNumber,M:formatMinutes,p:function formatPeriod(e){return a[+(e.getHours()>=12)]},q:function formatQuarter(e){return 1+~~(e.getMonth()/3)},Q:formatUnixTimestamp,s:formatUnixTimestampSeconds,S:formatSeconds,u:formatWeekdayNumberMonday,U:formatWeekNumberSunday,V:formatWeekNumberISO,w:formatWeekdayNumberSunday,W:formatWeekNumberMonday,x:null,X:null,y:formatYear,Y:formatFullYear,Z:formatZone,"%":formatLiteralPercent},v={a:function formatUTCShortWeekday(e){return s[e.getUTCDay()]},A:function formatUTCWeekday(e){return o[e.getUTCDay()]},b:function formatUTCShortMonth(e){return l[e.getUTCMonth()]},B:function formatUTCMonth(e){return c[e.getUTCMonth()]},c:null,d:formatUTCDayOfMonth,e:formatUTCDayOfMonth,f:formatUTCMicroseconds,g:formatUTCYearISO,G:formatUTCFullYearISO,H:formatUTCHour24,I:formatUTCHour12,j:formatUTCDayOfYear,L:formatUTCMilliseconds,m:formatUTCMonthNumber,M:formatUTCMinutes,p:function formatUTCPeriod(e){return a[+(e.getUTCHours()>=12)]},q:function formatUTCQuarter(e){return 1+~~(e.getUTCMonth()/3)},Q:formatUnixTimestamp,s:formatUnixTimestampSeconds,S:formatUTCSeconds,u:formatUTCWeekdayNumberMonday,U:formatUTCWeekNumberSunday,V:formatUTCWeekNumberISO,w:formatUTCWeekdayNumberSunday,W:formatUTCWeekNumberMonday,x:null,X:null,y:formatUTCYear,Y:formatUTCFullYear,Z:formatUTCZone,"%":formatLiteralPercent},x={a:function parseShortWeekday(e,t,n){var r=h.exec(t.slice(n));return r?(e.w=m.get(r[0].toLowerCase()),n+r[0].length):-1},A:function parseWeekday(e,t,n){var r=d.exec(t.slice(n));return r?(e.w=p.get(r[0].toLowerCase()),n+r[0].length):-1},b:function parseShortMonth(e,t,n){var r=A.exec(t.slice(n));return r?(e.m=y.get(r[0].toLowerCase()),n+r[0].length):-1},B:function parseMonth(e,t,n){var r=g.exec(t.slice(n));return r?(e.m=b.get(r[0].toLowerCase()),n+r[0].length):-1},c:function parseLocaleDateTime(e,n,r){return parseSpecifier(e,t,n,r)},d:parseDayOfMonth,e:parseDayOfMonth,f:parseMicroseconds,g:parseYear,G:parseFullYear,H:parseHour24,I:parseHour24,j:parseDayOfYear,L:parseMilliseconds,m:parseMonthNumber,M:parseMinutes,p:function parsePeriod(e,t,n){var r=f.exec(t.slice(n));return r?(e.p=u.get(r[0].toLowerCase()),n+r[0].length):-1},q:parseQuarter,Q:parseUnixTimestamp,s:parseUnixTimestampSeconds,S:parseSeconds,u:parseWeekdayNumberMonday,U:parseWeekNumberSunday,V:parseWeekNumberISO,w:parseWeekdayNumberSunday,W:parseWeekNumberMonday,x:function parseLocaleDate(e,t,r){return parseSpecifier(e,n,t,r)},X:function parseLocaleTime(e,t,n){return parseSpecifier(e,r,t,n)},y:parseYear,Y:parseFullYear,Z:parseZone,"%":parseLiteralPercent};function newFormat(e,t){return function(n){var r,a,o,s=[],c=-1,l=0,f=e.length;for(n instanceof Date||(n=new Date(+n));++c<f;)37===e.charCodeAt(c)&&(s.push(e.slice(l,c)),null!=(a=Zn[r=e.charAt(++c)])?r=e.charAt(++c):a="e"===r?" ":"0",(o=t[r])&&(r=o(n,a)),s.push(r),l=c+1);return s.push(e.slice(l,c)),s.join("")}}function newParse(e,t){return function(n){var r,a,o=newDate(1900,void 0,1);if(parseSpecifier(o,e,n+="",0)!=n.length)return null;if("Q"in o)return new Date(o.Q);if("s"in o)return new Date(1e3*o.s+("L"in o?o.L:0));if(t&&!("Z"in o)&&(o.Z=0),"p"in o&&(o.H=o.H%12+12*o.p),void 0===o.m&&(o.m="q"in o?o.q:0),"V"in o){if(o.V<1||o.V>53)return null;"w"in o||(o.w=1),"Z"in o?(a=(r=utcDate(newDate(o.y,0,1))).getUTCDay(),r=a>4||0===a?kn.ceil(r):kn(r),r=pn.offset(r,7*(o.V-1)),o.y=r.getUTCFullYear(),o.m=r.getUTCMonth(),o.d=r.getUTCDate()+(o.w+6)%7):(a=(r=localDate(newDate(o.y,0,1))).getDay(),r=a>4||0===a?gn.ceil(r):gn(r),r=dn.offset(r,7*(o.V-1)),o.y=r.getFullYear(),o.m=r.getMonth(),o.d=r.getDate()+(o.w+6)%7)}else("W"in o||"U"in o)&&("w"in o||(o.w="u"in o?o.u%7:"W"in o?1:0),a="Z"in o?utcDate(newDate(o.y,0,1)).getUTCDay():localDate(newDate(o.y,0,1)).getDay(),o.m=0,o.d="W"in o?(o.w+6)%7+7*o.W-(a+5)%7:o.w+7*o.U-(a+6)%7);return"Z"in o?(o.H+=o.Z/100|0,o.M+=o.Z%100,utcDate(o)):localDate(o)}}function parseSpecifier(e,t,n,r){for(var a,o,s=0,c=t.length,l=n.length;s<c;){if(r>=l)return-1;if(37===(a=t.charCodeAt(s++))){if(a=t.charAt(s++),!(o=x[a in Zn?t.charAt(s++):a])||(r=o(e,n,r))<0)return-1}else if(a!=n.charCodeAt(r++))return-1}return r}return w.x=newFormat(n,w),w.X=newFormat(r,w),w.c=newFormat(t,w),v.x=newFormat(n,v),v.X=newFormat(r,v),v.c=newFormat(t,v),{format:function(e){var t=newFormat(e+="",w);return t.toString=function(){return e},t},parse:function(e){var t=newParse(e+="",!1);return t.toString=function(){return e},t},utcFormat:function(e){var t=newFormat(e+="",v);return t.toString=function(){return e},t},utcParse:function(e){var t=newParse(e+="",!0);return t.toString=function(){return e},t}}}(e),Fn=qn.format,qn.parse,Dn=qn.utcFormat,qn.utcParse,qn}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});const zn=colors("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),Pn=colors("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666"),Qn=colors("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666"),Kn=colors("4269d0efb118ff725c6cc5b03ca951ff8ab7a463f297bbf59c6b4e9498a0"),Gn=colors("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928"),Xn=colors("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2"),Jn=colors("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc"),Hn=colors("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999"),_n=colors("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3"),$n=colors("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f"),er=colors("4e79a7f28e2ce1575976b7b259a14fedc949af7aa1ff9da79c755fbab0ab"),ramp=e=>Q(e[e.length-1]);var tr=new Array(3).concat("d8b365f5f5f55ab4ac","a6611adfc27d80cdc1018571","a6611adfc27df5f5f580cdc1018571","8c510ad8b365f6e8c3c7eae55ab4ac01665e","8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e","8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e","8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e","5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30","5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30").map(colors);const nr=ramp(tr);var rr=new Array(3).concat("af8dc3f7f7f77fbf7b","7b3294c2a5cfa6dba0008837","7b3294c2a5cff7f7f7a6dba0008837","762a83af8dc3e7d4e8d9f0d37fbf7b1b7837","762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837","762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837","762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837","40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b","40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b").map(colors);const ar=ramp(rr);var ir=new Array(3).concat("e9a3c9f7f7f7a1d76a","d01c8bf1b6dab8e1864dac26","d01c8bf1b6daf7f7f7b8e1864dac26","c51b7de9a3c9fde0efe6f5d0a1d76a4d9221","c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221","c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221","c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221","8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419","8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(colors);const or=ramp(ir);var sr=new Array(3).concat("998ec3f7f7f7f1a340","5e3c99b2abd2fdb863e66101","5e3c99b2abd2f7f7f7fdb863e66101","542788998ec3d8daebfee0b6f1a340b35806","542788998ec3d8daebf7f7f7fee0b6f1a340b35806","5427888073acb2abd2d8daebfee0b6fdb863e08214b35806","5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806","2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08","2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(colors);const cr=ramp(sr);var lr=new Array(3).concat("ef8a62f7f7f767a9cf","ca0020f4a58292c5de0571b0","ca0020f4a582f7f7f792c5de0571b0","b2182bef8a62fddbc7d1e5f067a9cf2166ac","b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac","b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac","b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac","67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061","67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(colors);const fr=ramp(lr);var ur=new Array(3).concat("ef8a62ffffff999999","ca0020f4a582bababa404040","ca0020f4a582ffffffbababa404040","b2182bef8a62fddbc7e0e0e09999994d4d4d","b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d","b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d","b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d","67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a","67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(colors);const dr=ramp(ur);var pr=new Array(3).concat("fc8d59ffffbf91bfdb","d7191cfdae61abd9e92c7bb6","d7191cfdae61ffffbfabd9e92c7bb6","d73027fc8d59fee090e0f3f891bfdb4575b4","d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4","d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4","d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4","a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695","a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(colors);const hr=ramp(pr);var mr=new Array(3).concat("fc8d59ffffbf91cf60","d7191cfdae61a6d96a1a9641","d7191cfdae61ffffbfa6d96a1a9641","d73027fc8d59fee08bd9ef8b91cf601a9850","d73027fc8d59fee08bffffbfd9ef8b91cf601a9850","d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850","d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850","a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837","a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837").map(colors);const gr=ramp(mr);var br=new Array(3).concat("fc8d59ffffbf99d594","d7191cfdae61abdda42b83ba","d7191cfdae61ffffbfabdda42b83ba","d53e4ffc8d59fee08be6f59899d5943288bd","d53e4ffc8d59fee08bffffbfe6f59899d5943288bd","d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd","d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd","9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2","9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map(colors);const Ar=ramp(br);var yr=new Array(3).concat("e5f5f999d8c92ca25f","edf8fbb2e2e266c2a4238b45","edf8fbb2e2e266c2a42ca25f006d2c","edf8fbccece699d8c966c2a42ca25f006d2c","edf8fbccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(colors);const wr=ramp(yr);var vr=new Array(3).concat("e0ecf49ebcda8856a7","edf8fbb3cde38c96c688419d","edf8fbb3cde38c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b").map(colors);const xr=ramp(vr);var kr=new Array(3).concat("e0f3dba8ddb543a2ca","f0f9e8bae4bc7bccc42b8cbe","f0f9e8bae4bc7bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081").map(colors);const Sr=ramp(kr);var Mr=new Array(3).concat("fee8c8fdbb84e34a33","fef0d9fdcc8afc8d59d7301f","fef0d9fdcc8afc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(colors);const Er=ramp(Mr);var Ur=new Array(3).concat("ece2f0a6bddb1c9099","f6eff7bdc9e167a9cf02818a","f6eff7bdc9e167a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636").map(colors);const Cr=ramp(Ur);var Rr=new Array(3).concat("ece7f2a6bddb2b8cbe","f1eef6bdc9e174a9cf0570b0","f1eef6bdc9e174a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(colors);const Tr=ramp(Rr);var Nr=new Array(3).concat("e7e1efc994c7dd1c77","f1eef6d7b5d8df65b0ce1256","f1eef6d7b5d8df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f").map(colors);const Ir=ramp(Nr);var Lr=new Array(3).concat("fde0ddfa9fb5c51b8a","feebe2fbb4b9f768a1ae017e","feebe2fbb4b9f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map(colors);const Vr=ramp(Lr);var Br=new Array(3).concat("edf8b17fcdbb2c7fb8","ffffcca1dab441b6c4225ea8","ffffcca1dab441b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(colors);const Wr=ramp(Br);var qr=new Array(3).concat("f7fcb9addd8e31a354","ffffccc2e69978c679238443","ffffccc2e69978c67931a354006837","ffffccd9f0a3addd8e78c67931a354006837","ffffccd9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529").map(colors);const Fr=ramp(qr);var Dr=new Array(3).concat("fff7bcfec44fd95f0e","ffffd4fed98efe9929cc4c02","ffffd4fed98efe9929d95f0e993404","ffffd4fee391fec44ffe9929d95f0e993404","ffffd4fee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506").map(colors);const Zr=ramp(Dr);var Or=new Array(3).concat("ffeda0feb24cf03b20","ffffb2fecc5cfd8d3ce31a1c","ffffb2fecc5cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map(colors);const Yr=ramp(Or);var jr=new Array(3).concat("deebf79ecae13182bd","eff3ffbdd7e76baed62171b5","eff3ffbdd7e76baed63182bd08519c","eff3ffc6dbef9ecae16baed63182bd08519c","eff3ffc6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(colors);const zr=ramp(jr);var Pr=new Array(3).concat("e5f5e0a1d99b31a354","edf8e9bae4b374c476238b45","edf8e9bae4b374c47631a354006d2c","edf8e9c7e9c0a1d99b74c47631a354006d2c","edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(colors);const Qr=ramp(Pr);var Kr=new Array(3).concat("f0f0f0bdbdbd636363","f7f7f7cccccc969696525252","f7f7f7cccccc969696636363252525","f7f7f7d9d9d9bdbdbd969696636363252525","f7f7f7d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(colors);const Gr=ramp(Kr);var Xr=new Array(3).concat("efedf5bcbddc756bb1","f2f0f7cbc9e29e9ac86a51a3","f2f0f7cbc9e29e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(colors);const Jr=ramp(Xr);var Hr=new Array(3).concat("fee0d2fc9272de2d26","fee5d9fcae91fb6a4acb181d","fee5d9fcae91fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(colors);const _r=ramp(Hr);var $r=new Array(3).concat("fee6cefdae6be6550d","feeddefdbe85fd8d3cd94701","feeddefdbe85fd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(colors);const ea=ramp($r);function cividis(e){return e=Math.max(0,Math.min(1,e)),"rgb("+Math.max(0,Math.min(255,Math.round(-4.54-e*(35.34-e*(2381.73-e*(6402.7-e*(7024.72-2710.57*e)))))))+", "+Math.max(0,Math.min(255,Math.round(32.49+e*(170.73+e*(52.82-e*(131.46-e*(176.58-67.37*e)))))))+", "+Math.max(0,Math.min(255,Math.round(81.24+e*(442.36-e*(2482.43-e*(6167.24-e*(6614.94-2475.67*e)))))))+")"}var ta=-.14861,na=1.78277,ra=-.29227,aa=-.90649,ia=1.97294,oa=ia*aa,sa=ia*na,ca=na*ra-aa*ta;function cubehelix_cubehelix(e,t,n,r){return 1===arguments.length?function cubehelixConvert(e){if(e instanceof Cubehelix)return new Cubehelix(e.h,e.s,e.l,e.opacity);e instanceof Rgb||(e=rgbConvert(e));var t=e.r/255,n=e.g/255,r=e.b/255,a=(ca*r+oa*t-sa*n)/(ca+oa-sa),o=r-a,s=(ia*(n-a)-ra*o)/aa,c=Math.sqrt(s*s+o*o)/(ia*a*(1-a)),l=c?Math.atan2(s,o)*It-120:NaN;return new Cubehelix(l<0?l+360:l,c,a,e.opacity)}(e):new Cubehelix(e,t,n,null==r?1:r)}function Cubehelix(e,t,n,r){this.h=+e,this.s=+t,this.l=+n,this.opacity=+r}function cubehelix(e){return function cubehelixGamma(t){function cubehelix(n,r){var a=e((n=cubehelix_cubehelix(n)).h,(r=cubehelix_cubehelix(r)).h),o=nogamma(n.s,r.s),s=nogamma(n.l,r.l),c=nogamma(n.opacity,r.opacity);return function(e){return n.h=a(e),n.s=o(e),n.l=s(Math.pow(e,t)),n.opacity=c(e),n+""}}return t=+t,cubehelix.gamma=cubehelixGamma,cubehelix}(1)}src_define(Cubehelix,cubehelix_cubehelix,extend(Color,{brighter(e){return e=null==e?L:Math.pow(L,e),new Cubehelix(this.h,this.s,this.l*e,this.opacity)},darker(e){return e=null==e?I:Math.pow(I,e),new Cubehelix(this.h,this.s,this.l*e,this.opacity)},rgb(){var e=isNaN(this.h)?0:(this.h+120)*Nt,t=+this.l,n=isNaN(this.s)?0:this.s*t*(1-t),r=Math.cos(e),a=Math.sin(e);return new Rgb(255*(t+n*(ta*r+na*a)),255*(t+n*(ra*r+aa*a)),255*(t+n*(ia*r)),this.opacity)}}));cubehelix(hue);var la=cubehelix(nogamma);const fa=la(cubehelix_cubehelix(300,.5,0),cubehelix_cubehelix(-240,.5,1));var ua=la(cubehelix_cubehelix(-100,.75,.35),cubehelix_cubehelix(80,1.5,.8)),da=la(cubehelix_cubehelix(260,.75,.35),cubehelix_cubehelix(80,1.5,.8)),pa=cubehelix_cubehelix();function rainbow(e){(e<0||e>1)&&(e-=Math.floor(e));var t=Math.abs(e-.5);return pa.h=360*e-100,pa.s=1.5-1.5*t,pa.l=.8-.9*t,pa+""}var ha=color_rgb(),ma=Math.PI/3,ga=2*Math.PI/3;function sinebow(e){var t;return e=(.5-e)*Math.PI,ha.r=255*(t=Math.sin(e))*t,ha.g=255*(t=Math.sin(e+ma))*t,ha.b=255*(t=Math.sin(e+ga))*t,ha+""}function turbo(e){return e=Math.max(0,Math.min(1,e)),"rgb("+Math.max(0,Math.min(255,Math.round(34.61+e*(1172.33-e*(10793.56-e*(33300.12-e*(38394.49-14825.05*e)))))))+", "+Math.max(0,Math.min(255,Math.round(23.31+e*(557.33+e*(1225.33-e*(3574.96-e*(1073.77+707.56*e)))))))+", "+Math.max(0,Math.min(255,Math.round(27.2+e*(3211.1-e*(15327.97-e*(27814-e*(22569.18-6838.66*e)))))))+")"}function viridis_ramp(e){var t=e.length;return function(n){return e[Math.max(0,Math.min(t-1,Math.floor(n*t)))]}}const ba=viridis_ramp(colors("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));var Aa=viridis_ramp(colors("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),ya=viridis_ramp(colors("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),wa=viridis_ramp(colors("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));function src_select(e){return"string"==typeof e?new Selection([[document.querySelector(e)]],[document.documentElement]):new Selection([[e]],u)}Math.abs,Math.atan2;const va=Math.cos,xa=(Math.max,Math.min),ka=Math.sin,Sa=Math.sqrt,Ma=Math.PI,Ea=2*Ma;const Ua=Sa(3),Ca={draw(e,t){const n=.59436*Sa(t+xa(t/28,.75)),r=n/2,a=r*Ua;e.moveTo(0,n),e.lineTo(0,-n),e.moveTo(-a,-r),e.lineTo(a,r),e.moveTo(-a,r),e.lineTo(a,-r)}},Ra={draw(e,t){const n=Sa(t/Ma);e.moveTo(n,0),e.arc(0,0,n,0,Ea)}},Ta={draw(e,t){const n=Sa(t/5)/2;e.moveTo(-3*n,-n),e.lineTo(-n,-n),e.lineTo(-n,-3*n),e.lineTo(n,-3*n),e.lineTo(n,-n),e.lineTo(3*n,-n),e.lineTo(3*n,n),e.lineTo(n,n),e.lineTo(n,3*n),e.lineTo(-n,3*n),e.lineTo(-n,n),e.lineTo(-3*n,n),e.closePath()}},Na=Sa(1/3),Ia=2*Na,La={draw(e,t){const n=Sa(t/Ia),r=n*Na;e.moveTo(0,-n),e.lineTo(r,0),e.lineTo(0,n),e.lineTo(-r,0),e.closePath()}},Va={draw(e,t){const n=.62625*Sa(t);e.moveTo(0,-n),e.lineTo(n,0),e.lineTo(0,n),e.lineTo(-n,0),e.closePath()}},Ba={draw(e,t){const n=.87559*Sa(t-xa(t/7,2));e.moveTo(-n,0),e.lineTo(n,0),e.moveTo(0,n),e.lineTo(0,-n)}},Wa={draw(e,t){const n=Sa(t),r=-n/2;e.rect(r,r,n,n)}},qa={draw(e,t){const n=.4431*Sa(t);e.moveTo(n,n),e.lineTo(n,-n),e.lineTo(-n,-n),e.lineTo(-n,n),e.closePath()}},Fa=ka(Ma/10)/ka(7*Ma/10),Da=ka(Ea/10)*Fa,Za=-va(Ea/10)*Fa,Oa={draw(e,t){const n=Sa(.8908130915292852*t),r=Da*n,a=Za*n;e.moveTo(0,-n),e.lineTo(r,a);for(let t=1;t<5;++t){const o=Ea*t/5,s=va(o),c=ka(o);e.lineTo(c*n,-s*n),e.lineTo(s*r-c*a,c*r+s*a)}e.closePath()}},Ya=Sa(3),ja={draw(e,t){const n=-Sa(t/(3*Ya));e.moveTo(0,2*n),e.lineTo(-Ya*n,-n),e.lineTo(Ya*n,-n),e.closePath()}},za=Sa(3),Pa={draw(e,t){const n=.6824*Sa(t),r=n/2,a=n*za/2;e.moveTo(0,-n),e.lineTo(a,r),e.lineTo(-a,r),e.closePath()}},Qa=-.5,Ka=Sa(3)/2,Ga=1/Sa(12),Xa=3*(Ga/2+1),Ja={draw(e,t){const n=Sa(t/Xa),r=n/2,a=n*Ga,o=r,s=n*Ga+n,c=-o,l=s;e.moveTo(r,a),e.lineTo(o,s),e.lineTo(c,l),e.lineTo(Qa*r-Ka*a,Ka*r+Qa*a),e.lineTo(Qa*o-Ka*s,Ka*o+Qa*s),e.lineTo(Qa*c-Ka*l,Ka*c+Qa*l),e.lineTo(Qa*r+Ka*a,Qa*a-Ka*r),e.lineTo(Qa*o+Ka*s,Qa*s-Ka*o),e.lineTo(Qa*c+Ka*l,Qa*l-Ka*c),e.closePath()}},Ha={draw(e,t){const n=.6189*Sa(t-xa(t/6,1.7));e.moveTo(-n,-n),e.lineTo(n,n),e.moveTo(-n,n),e.lineTo(n,-n)}},_a=[Ra,Ta,La,Wa,Oa,ja,Ja],$a=[Ra,Ba,Ha,Pa,Ca,qa,Va];function transform_Transform(e,t,n){this.k=e,this.x=t,this.y=n}transform_Transform.prototype={constructor:transform_Transform,scale:function(e){return 1===e?this:new transform_Transform(this.k*e,this.x,this.y)},translate:function(e,t){return 0===e&0===t?this:new transform_Transform(this.k,this.x+this.k*e,this.y+this.k*t)},apply:function(e){return[e[0]*this.k+this.x,e[1]*this.k+this.y]},applyX:function(e){return e*this.k+this.x},applyY:function(e){return e*this.k+this.y},invert:function(e){return[(e[0]-this.x)/this.k,(e[1]-this.y)/this.k]},invertX:function(e){return(e-this.x)/this.k},invertY:function(e){return(e-this.y)/this.k},rescaleX:function(e){return e.copy().domain(e.range().map(this.invertX,this).map(e.invert,e))},rescaleY:function(e){return e.copy().domain(e.range().map(this.invertY,this).map(e.invert,e))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};new transform_Transform(1,0,0);function defined_defined(e){return null!=e&&!Number.isNaN(e)}function defined_ascendingDefined(e,t){return+defined_defined(t)-+defined_defined(e)||ascending(e,t)}function descendingDefined(e,t){return+defined_defined(t)-+defined_defined(e)||descending(e,t)}function defined_nonempty(e){return null!=e&&""!=`${e}`}function finite(e){return isFinite(e)?e:NaN}function positive(e){return e>0&&isFinite(e)?e:NaN}function negative(e){return e<0&&isFinite(e)?e:NaN}transform_Transform.prototype;const ei=/^(?:[-+]\d{2})?\d{4}(?:-\d{2}(?:-\d{2})?)?(?:T\d{2}:\d{2}(?::\d{2}(?:\.\d{3})?)?(?:Z|[-+]\d{2}:?\d{2})?)?$/;function parse(e,t){return ei.test(e+="")?new Date(e):"function"==typeof t?t(e):t}function orderof(e){if(null==e)return;return descending(e[0],e[e.length-1])}const ti=1e3,ni=6e4,ri=36e5,ai=864e5,ii=6048e5,oi=2592e6,si=31536e6,ci=[["millisecond",1],["2 milliseconds",2],["5 milliseconds",5],["10 milliseconds",10],["20 milliseconds",20],["50 milliseconds",50],["100 milliseconds",100],["200 milliseconds",200],["500 milliseconds",500],["second",ti],["5 seconds",5e3],["15 seconds",15e3],["30 seconds",3e4],["minute",ni],["5 minutes",3e5],["15 minutes",9e5],["30 minutes",18e5],["hour",ri],["3 hours",108e5],["6 hours",216e5],["12 hours",432e5],["day",ai],["2 days",1728e5],["week",ii],["2 weeks",12096e5],["month",oi],["3 months",7776e6],["6 months",15552e6],["year",si],["2 years",63072e6],["5 years",15768e7],["10 years",31536e7],["20 years",63072e7],["50 years",15768e8],["100 years",31536e8]],li=new Map([["second",ti],["minute",ni],["hour",ri],["day",ai],["monday",ii],["tuesday",ii],["wednesday",ii],["thursday",ii],["friday",ii],["saturday",ii],["sunday",ii],["week",ii],["month",oi],["year",si]]),fi=new Map([["second",sn],["minute",cn],["hour",fn],["day",dn],["monday",gn],["tuesday",bn],["wednesday",An],["thursday",yn],["friday",wn],["saturday",vn],["sunday",mn],["week",mn],["month",Rn],["year",Nn]]),ui=new Map([["second",sn],["minute",ln],["hour",un],["day",hn],["monday",kn],["tuesday",Sn],["wednesday",Mn],["thursday",En],["friday",Un],["saturday",Cn],["sunday",xn],["week",xn],["month",Tn],["year",In]]),di=Symbol("intervalDuration"),pi=Symbol("intervalType");for(const[e,t]of fi)t[di]=li.get(e),t[pi]="time";for(const[e,t]of ui)t[di]=li.get(e),t[pi]="utc";const hi=[["year",In,"utc"],["month",Tn,"utc"],["day",hn,"utc",15552e6],["hour",un,"utc",2592e5],["minute",ln,"utc",216e5],["second",sn,"utc",18e5]],mi=[["year",Nn,"time"],["month",Rn,"time"],["day",dn,"time",15552e6],["hour",fn,"time",2592e5],["minute",cn,"time",216e5],["second",sn,"time",18e5]],gi=[hi[0],mi[0],hi[1],mi[1],hi[2],mi[2],...hi.slice(3)];function parseTimeInterval(e){let t=`${e}`.toLowerCase();t.endsWith("s")&&(t=t.slice(0,-1));let n=1;const r=/^(?:(\d+)\s+)/.exec(t);switch(r&&(t=t.slice(r[0].length),n=+r[1]),t){case"quarter":t="month",n*=3;break;case"half":t="month",n*=6}let a=ui.get(t);if(!a)throw new Error(`unknown interval: ${e}`);if(n>1&&!a.every)throw new Error(`non-periodic interval: ${t}`);return[t,n]}function time_timeInterval(e){return asInterval(parseTimeInterval(e),"time")}function utcInterval(e){return asInterval(parseTimeInterval(e),"utc")}function asInterval([e,t],n){let r=("time"===n?fi:ui).get(e);return t>1&&(r=r.every(t),r[di]=li.get(e)*t,r[pi]=n),r}function generalizeTimeInterval(e,t){if(!(t>1))return;const n=e[di];if(!ci.some((([,e])=>e===n)))return;if(n%ai==0&&ai<n&&n<oi)return;const[r]=ci[bisector((([,e])=>Math.log(e))).center(ci,Math.log(n*t))];return("time"===e[pi]?time_timeInterval:utcInterval)(r)}function formatTimeInterval(e,t,n){const r="time"===t?Fn:Dn;if(null==n)return r("year"===e?"%Y":"month"===e?"%Y-%m":"day"===e?"%Y-%m-%d":"hour"===e||"minute"===e?"%Y-%m-%dT%H:%M":"second"===e?"%Y-%m-%dT%H:%M:%S":"%Y-%m-%dT%H:%M:%S.%L");const a=function getTimeTemplate(e){return"left"===e||"right"===e?(e,t)=>`\n${e}\n${t}`:"top"===e?(e,t)=>`${t}\n${e}`:(e,t)=>`${e}\n${t}`}(n);switch(e){case"millisecond":return formatConditional(r(".%L"),r(":%M:%S"),a);case"second":return formatConditional(r(":%S"),r("%-I:%M"),a);case"minute":return formatConditional(r("%-I:%M"),r("%p"),a);case"hour":return formatConditional(r("%-I %p"),r("%b %-d"),a);case"day":return formatConditional(r("%-d"),r("%b"),a);case"month":return formatConditional(r("%b"),r("%Y"),a);case"year":return r("%Y")}throw new Error("unable to format time ticks")}function inferTimeFormat(e,t,n){const r=max(function pairs(e,t=pair){const n=[];let r,a=!1;for(const o of e)a&&n.push(t(r,o)),r=o,a=!0;return n}(t,((e,t)=>Math.abs(t-e))));if(r<1e3)return formatTimeInterval("millisecond","utc",n);for(const[a,o,s,c]of function getFormatIntervals(e){return"time"===e?mi:"utc"===e?hi:gi}(e)){if(r>c)break;if("hour"===a&&!r)break;if(t.every((e=>o.floor(e)>=e)))return formatTimeInterval(a,s,n)}}function formatConditional(e,t,n){return(r,a,o)=>{const s=e(r,a),c=t(r,a),l=a-orderof(o);return a!==l&&void 0!==o[l]&&c===t(o[l],l)?s:n(s,c)}}const bi=Object.getPrototypeOf(Uint8Array),Ai=Object.prototype.toString;function options_isArray(e){return e instanceof Array||e instanceof bi}function options_isNumberArray(e){return e instanceof bi&&!function isBigIntArray(e){return e instanceof BigInt64Array||e instanceof BigUint64Array}(e)}function isNumberType(e){return e?.prototype instanceof bi&&!function isBigIntType(e){return e===BigInt64Array||e===BigUint64Array}(e)}const yi=Symbol("reindex");function options_valueof(e,t,n){const r=typeof t;return"string"===r?isArrowTable(e)?maybeTypedArrowify(e.getChild(t),n):maybeTypedMap(e,field(t),n):"function"===r?maybeTypedMap(e,t,n):"number"===r||t instanceof Date||"boolean"===r?options_map(e,options_constant(t),n):"function"==typeof t?.transform?maybeTypedArrayify(t.transform(e),n):function maybeTake(e,t){return null!=e&&t?take(e,t):e}(maybeTypedArrayify(t,n),e?.[yi])}function maybeTypedMap(e,t,n){return options_map(e,isNumberType(n)?(e,n)=>coerceNumber(t(e,n)):t,n)}function maybeTypedArrayify(e,t){return void 0===t?options_arrayify(e):isArrowVector(e)?maybeTypedArrowify(e,t):e instanceof t?e:t.from(e,isNumberType(t)&&!options_isNumberArray(e)?coerceNumber:void 0)}function maybeTypedArrowify(e,t){return null==e?e:void 0!==t&&t!==Array||!function isArrowDateType(e){return e&&(8===e.typeId||10===e.typeId)&&1===e.unit}(e.type)?maybeTypedArrayify(vectorToArray(e),t):coerceDates(vectorToArray(e))}function vectorToArray(e){return e.nullCount?e.toJSON():e.toArray()}const wi=[null],field=e=>t=>{const n=t[e];return void 0===n&&"Feature"===t.type?t.properties?.[e]:n},vi={transform:options_range},xi={transform:e=>e},options_one=()=>1,yes=()=>!0,options_string=e=>null==e?e:`${e}`,options_number=e=>null==e?e:+e,first=e=>e?e[0]:void 0,options_second=e=>e?e[1]:void 0,options_constant=e=>()=>e;function options_coerceNumbers(e){return options_isNumberArray(e)?e:options_map(e,coerceNumber,Float64Array)}function coerceNumber(e){return null==e?NaN:Number(e)}function coerceDates(e){return options_map(e,coerceDate)}function coerceDate(e){return e instanceof Date&&!isNaN(e)?e:"string"==typeof e?parse(e):null==e||isNaN(e=Number(e))?void 0:new Date(e)}function options_maybeColorChannel(e,t){return void 0===e&&(e=t),null===e?[void 0,"none"]:isColor(e)?[void 0,e]:[e,void 0]}function maybeNumberChannel(e,t){return void 0===e&&(e=t),null===e||"number"==typeof e?[void 0,e]:[e,void 0]}function maybeKeyword(e,t,n){if(null!=e)return keyword(e,t,n)}function keyword(e,t,n){const r=`${e}`.toLowerCase();if(!n.includes(r))throw new Error(`invalid ${t}: ${e}`);return r}function dataify(e){return isArrowTable(e)?e:options_arrayify(e)}function options_arrayify(e){if(null==e||options_isArray(e))return e;if(isArrowVector(e))return maybeTypedArrowify(e);if(isGeoJSON(e))switch(e.type){case"FeatureCollection":return e.features;case"GeometryCollection":return e.geometries;default:return[e]}return Array.from(e)}function isGeoJSON(e){switch(e?.type){case"FeatureCollection":case"GeometryCollection":case"Feature":case"LineString":case"MultiLineString":case"MultiPoint":case"MultiPolygon":case"Point":case"Polygon":case"Sphere":return!0;default:return!1}}function options_map(e,t,n=Array){return null==e?e:e instanceof n?e.map(t):n.from(e,t)}function slice(e,t=Array){return e instanceof t?e.slice():t.from(e)}function hasY({y:e,y1:t,y2:n}){return void 0!==e||void 0!==t||void 0!==n}function options_isObject(e){return e?.toString===Ai}function options_isScaleOptions(e){return options_isObject(e)&&(void 0!==e.type||void 0!==e.domain)}function options_isOptions(e){return options_isObject(e)&&"function"!=typeof e.transform}function options_isDomainSort(e){return options_isOptions(e)&&void 0===e.value&&void 0===e.channel}function options_maybeTuple(e,t){return void 0===e&&void 0===t?[first,options_second]:[e,t]}function lengthof(e){return options_isArray(e)?e.length:e?.numRows}function options_range(e){const t=lengthof(e),n=new Uint32Array(t);for(let e=0;e<t;++e)n[e]=e;return n}function take(e,t){return options_isArray(e)?options_map(t,(t=>e[t]),e.constructor):options_map(t,(t=>e.at(t)))}function options_keyof(e){return null!==e&&"object"==typeof e?e.valueOf():e}function options_column(e){let t;return[{transform:()=>t,label:options_labelof(e)},e=>t=e]}function options_labelof(e,t){return"string"==typeof e?e:e&&void 0!==e.label?e.label:t}function options_mid(e,t){return{transform(n){const r=e.transform(n),a=t.transform(n);return isTemporal(r)||isTemporal(a)?options_map(r,((e,t)=>new Date((+r[t]+ +a[t])/2))):options_map(r,((e,t)=>(+r[t]+ +a[t])/2),Float64Array)},label:e.label}}function maybeIntervalTransform(e,t){const n=maybeInterval(e,t);return n&&(e=>defined_defined(e)?n.floor(e):e)}function maybeInterval(e,t){if(null!=e){if("number"==typeof e)return function numberInterval(e){e=+e,0<e&&e<1&&Number.isInteger(1/e)&&(e=-1/e);const t=Math.abs(e);return e<0?{floor:e=>Math.floor(e*t)/t,offset:(e,n=1)=>(e*t+Math.floor(n))/t,range:(e,n)=>range_range(Math.ceil(e*t),n*t).map((e=>e/t))}:{floor:e=>Math.floor(e/t)*t,offset:(e,n=1)=>e+t*Math.floor(n),range:(e,n)=>range_range(Math.ceil(e/t),n/t).map((e=>e*t))}}(e);if("string"==typeof e)return("time"===t?time_timeInterval:utcInterval)(e);if("function"!=typeof e.floor)throw new Error("invalid interval; missing floor method");if("function"!=typeof e.offset)throw new Error("invalid interval; missing offset method");return e}}function maybeRangeInterval(e,t){if((e=maybeInterval(e,t))&&"function"!=typeof e.range)throw new Error("invalid interval: missing range method");return e}function isInterval(e){return"function"==typeof e?.range}function maybeValue(e){return void 0===e||options_isOptions(e)?e:{value:e}}function isIterable(e){return e&&"function"==typeof e[Symbol.iterator]}function isTextual(e){for(const t of e)if(null!=t)return"object"!=typeof t||t instanceof Date}function isOrdinal(e){for(const t of e){if(null==t)continue;const e=typeof t;return"string"===e||"boolean"===e}}function isTemporal(e){for(const t of e)if(null!=t)return t instanceof Date}function isTemporalString(e){for(const t of e)if(null!=t)return"string"==typeof t&&isNaN(t)&&parse(t)}function isNumericString(e){for(const t of e)if(null!=t){if("string"!=typeof t)return!1;if(t.trim())return!isNaN(t)}}function isEvery(e,t){let n;for(const r of e)if(null!=r){if(!t(r))return!1;n=!0}return n}const ki=new Set("none,currentcolor,transparent,aliceblue,antiquewhite,aqua,aquamarine,azure,beige,bisque,black,blanchedalmond,blue,blueviolet,brown,burlywood,cadetblue,chartreuse,chocolate,coral,cornflowerblue,cornsilk,crimson,cyan,darkblue,darkcyan,darkgoldenrod,darkgray,darkgreen,darkgrey,darkkhaki,darkmagenta,darkolivegreen,darkorange,darkorchid,darkred,darksalmon,darkseagreen,darkslateblue,darkslategray,darkslategrey,darkturquoise,darkviolet,deeppink,deepskyblue,dimgray,dimgrey,dodgerblue,firebrick,floralwhite,forestgreen,fuchsia,gainsboro,ghostwhite,gold,goldenrod,gray,green,greenyellow,grey,honeydew,hotpink,indianred,indigo,ivory,khaki,lavender,lavenderblush,lawngreen,lemonchiffon,lightblue,lightcoral,lightcyan,lightgoldenrodyellow,lightgray,lightgreen,lightgrey,lightpink,lightsalmon,lightseagreen,lightskyblue,lightslategray,lightslategrey,lightsteelblue,lightyellow,lime,limegreen,linen,magenta,maroon,mediumaquamarine,mediumblue,mediumorchid,mediumpurple,mediumseagreen,mediumslateblue,mediumspringgreen,mediumturquoise,mediumvioletred,midnightblue,mintcream,mistyrose,moccasin,navajowhite,navy,oldlace,olive,olivedrab,orange,orangered,orchid,palegoldenrod,palegreen,paleturquoise,palevioletred,papayawhip,peachpuff,peru,pink,plum,powderblue,purple,rebeccapurple,red,rosybrown,royalblue,saddlebrown,salmon,sandybrown,seagreen,seashell,sienna,silver,skyblue,slateblue,slategray,slategrey,snow,springgreen,steelblue,tan,teal,thistle,tomato,turquoise,violet,wheat,white,whitesmoke,yellow".split(","));function isColor(e){return"string"==typeof e&&(e=e.toLowerCase().trim(),/^#[0-9a-f]{3,8}$/.test(e)||/^(?:url|var|rgb|rgba|hsl|hsla|hwb|lab|lch|oklab|oklch|color|color-mix)\(.*\)$/.test(e)||ki.has(e))}function isOpacity(e){return"number"==typeof e&&(0<=e&&e<=1||isNaN(e))}function isNoneish(e){return null==e||isNone(e)}function isNone(e){return/^\s*none\s*$/i.test(e)}function maybeAnchor(e,t){return maybeKeyword(e,t,["middle","top-left","top","top-right","right","bottom-right","bottom","bottom-left","left"])}function maybeFrameAnchor(e="middle"){return maybeAnchor(e,"frameAnchor")}function maybeNamed(e){return isIterable(e)?function options_named(e){console.warn("named iterables are deprecated; please use an object instead");const t=new Set;return Object.fromEntries(Array.from(e,(e=>{const{name:n}=e;if(null==n)throw new Error("missing name");const r=`${n}`;if("__proto__"===r)throw new Error(`illegal name: ${r}`);if(t.has(r))throw new Error(`duplicate name: ${r}`);return t.add(r),[n,e]})))}(e):e}function maybeClip(e){return!0===e?e="frame":!1===e?e=null:isGeoJSON(e)||null==e||"sphere"===(e=keyword(e,"clip",["frame","sphere"]))&&(e={type:"Sphere"}),e}function isArrowTable(e){return e&&"function"==typeof e.getChild&&"function"==typeof e.toArray&&e.schema&&Array.isArray(e.schema.fields)}function isArrowVector(e){return e&&"function"==typeof e.toArray&&e.type}const Si=Symbol("position"),Mi=Symbol("color"),Ei=Symbol("radius"),Ui=Symbol("length"),Ci=Symbol("opacity"),Ri=Symbol("symbol"),Ti=Symbol("projection"),Ni=new Map([["x",Si],["y",Si],["fx",Si],["fy",Si],["r",Ei],["color",Mi],["opacity",Ci],["symbol",Ri],["length",Ui],["projection",Ti]]);const Ii=2/Math.sqrt(3),Li={draw(e,t){const n=Math.sqrt(t/Math.PI),r=n*Ii,a=r/2;e.moveTo(0,r),e.lineTo(n,a),e.lineTo(n,-a),e.lineTo(0,-r),e.lineTo(-n,-a),e.lineTo(-n,a),e.closePath()}},Vi=new Map([["asterisk",Ca],["circle",Ra],["cross",Ta],["diamond",La],["diamond2",Va],["hexagon",Li],["plus",Ba],["square",Wa],["square2",qa],["star",Oa],["times",Ha],["triangle",ja],["triangle2",Pa],["wye",Ja]]);function isSymbolObject(e){return e&&"function"==typeof e.draw}function isSymbol(e){return!!isSymbolObject(e)||"string"==typeof e&&Vi.has(e.toLowerCase())}function maybeSymbol(e){if(null==e||isSymbolObject(e))return e;const t=Vi.get(`${e}`.toLowerCase());if(t)return t;throw new Error(`invalid symbol: ${e}`)}function maybeReduce(e,t,n=invalidReduce){if(null==e)return n(e);if("function"==typeof e.reduceIndex)return e;if("function"==typeof e.reduce&&options_isObject(e))return function reduceReduce(e){return console.warn("deprecated reduce interface; implement reduceIndex instead."),{...e,reduceIndex:e.reduce.bind(e)}}(e);if("function"==typeof e)return function reduceFunction(e){return{reduceIndex:(t,n,r)=>e(take(n,t),r)}}(e);if(/^p\d{2}$/i.test(e))return reduceAccessor(function percentile(e){const t=+`${e}`.slice(1)/100;return(e,n)=>quantile(e,t,n)}(e));switch(`${e}`.toLowerCase()){case"first":return Wi;case"last":return qi;case"identity":return Bi;case"count":return Fi;case"distinct":return Di;case"sum":return null==t?Fi:Zi;case"proportion":return reduceProportion(t,"data");case"proportion-facet":return reduceProportion(t,"facet");case"deviation":return reduceAccessor(deviation);case"min":return reduceAccessor(min);case"min-index":return reduceAccessor(minIndex_minIndex);case"max":return reduceAccessor(max);case"max-index":return reduceAccessor(maxIndex_maxIndex);case"mean":return reduceMaybeTemporalAccessor(mean);case"median":return reduceMaybeTemporalAccessor(median);case"variance":return reduceAccessor(variance);case"mode":return reduceAccessor(mode)}return n(e)}function invalidReduce(e){throw new Error(`invalid reduce: ${e}`)}function reduceAccessor(e){return{reduceIndex:(t,n)=>e(t,(e=>n[e]))}}function reduceMaybeTemporalAccessor(e){return{reduceIndex(t,n){const r=e(t,(e=>n[e]));return isTemporal(n)?new Date(r):r}}}const Bi={reduceIndex:(e,t)=>take(t,e)},Wi={reduceIndex:(e,t)=>t[e[0]]},qi={reduceIndex:(e,t)=>t[e[e.length-1]]},Fi={label:"Frequency",reduceIndex:e=>e.length},Di={label:"Distinct",reduceIndex(e,t){const n=new InternSet;for(const r of e)n.add(t[r]);return n.size}},Zi=reduceAccessor(sum);function reduceProportion(e,t){return null==e?{scope:t,label:"Frequency",reduceIndex:(e,t,n=1)=>e.length/n}:{scope:t,reduceIndex:(e,t,n=1)=>sum(e,(e=>t[e]))/n}}function createChannel(e,{scale:t,type:n,value:r,filter:a,hint:o,label:s=options_labelof(r)},c){return void 0===o&&"function"==typeof r?.transform&&(o=r.hint),inferChannelScale(c,{scale:t,type:n,value:options_valueof(e,r),label:s,filter:a,hint:o})}function inferChannelScale(e,t){const{scale:n,value:r}=t;if(!0===n||"auto"===n)switch(e){case"fill":case"stroke":case"color":t.scale=!0!==n&&isEvery(r,isColor)?null:"color",t.defaultScale="color";break;case"fillOpacity":case"strokeOpacity":case"opacity":t.scale=!0!==n&&isEvery(r,isOpacity)?null:"opacity",t.defaultScale="opacity";break;case"symbol":!0!==n&&isEvery(r,isSymbol)?(t.scale=null,t.value=options_map(r,maybeSymbol)):t.scale="symbol",t.defaultScale="symbol";break;default:t.scale=Ni.has(e)?e:null}else if(!1===n)t.scale=null;else if(null!=n&&!Ni.has(n))throw new Error(`unknown scale: ${n}`);return t}function findScaleChannel(e,t){for(const n in e){const r=e[n];if(r.scale===t)return r}}function reindexFacetChannel(e,t){const n=e.original;if(n===e)return t;const r=t.value,a=t.value=[];for(let t=0;t<n.length;++t){const o=r[n[t][0]];for(const n of e[t])a[n]=o}return t}function difference(e,t,n){const r=values(e,t);return options_map(values(e,n),((e,t)=>Math.abs(e-r[t])),Float64Array)}function values(e,t,n){let r=e[t];if(r||void 0===n||(r=e[n]),r)return r.value;throw new Error(`missing channel: ${t}`)}function maybeOrder(e){if(null==e||"function"==typeof e)return e;switch(`${e}`.toLowerCase()){case"ascending":return ascendingGroup;case"descending":return descendingGroup}throw new Error(`invalid order: ${e}`)}function ascendingGroup([e,t],[n,r]){return defined_ascendingDefined(t,r)||defined_ascendingDefined(e,n)}function descendingGroup([e,t],[n,r]){return descendingDefined(t,r)||defined_ascendingDefined(e,n)}function getSource(e,t){let n=e[t];if(n){for(;n.source;)n=n.source;return null===n.source?null:n}}const Oi=new Map([["accent",Pn],["category10",zn],["dark2",Qn],["observable10",Kn],["paired",Gn],["pastel1",Xn],["pastel2",Jn],["set1",Hn],["set2",_n],["set3",$n],["tableau10",er]]);const Yi=new Map([...Oi,["brbg",scheme11(tr,nr)],["prgn",scheme11(rr,ar)],["piyg",scheme11(ir,or)],["puor",scheme11(sr,cr)],["rdbu",scheme11(lr,fr)],["rdgy",scheme11(ur,dr)],["rdylbu",scheme11(pr,hr)],["rdylgn",scheme11(mr,gr)],["spectral",scheme11(br,Ar)],["burd",scheme11r(lr,fr)],["buylrd",scheme11r(pr,hr)],["blues",scheme9(jr,zr)],["greens",scheme9(Pr,Qr)],["greys",scheme9(Kr,Gr)],["oranges",scheme9($r,ea)],["purples",scheme9(Xr,Jr)],["reds",scheme9(Hr,_r)],["turbo",schemei(turbo)],["viridis",schemei(ba)],["magma",schemei(Aa)],["inferno",schemei(ya)],["plasma",schemei(wa)],["cividis",schemei(cividis)],["cubehelix",schemei(fa)],["warm",schemei(ua)],["cool",schemei(da)],["bugn",scheme9(yr,wr)],["bupu",scheme9(vr,xr)],["gnbu",scheme9(kr,Sr)],["orrd",scheme9(Mr,Er)],["pubu",scheme9(Rr,Tr)],["pubugn",scheme9(Ur,Cr)],["purd",scheme9(Nr,Ir)],["rdpu",scheme9(Lr,Vr)],["ylgn",scheme9(qr,Fr)],["ylgnbu",scheme9(Br,Wr)],["ylorbr",scheme9(Dr,Zr)],["ylorrd",scheme9(Or,Yr)],["rainbow",schemeicyclical(rainbow)],["sinebow",schemeicyclical(sinebow)]]);function scheme9(e,t){return({length:n})=>1===n?[e[3][1]]:2===n?[e[3][1],e[3][2]]:(n=Math.max(3,Math.floor(n)))>9?quantize(t,n):e[n]}function scheme11(e,t){return({length:n})=>2===n?[e[3][0],e[3][2]]:(n=Math.max(3,Math.floor(n)))>11?quantize(t,n):e[n]}function scheme11r(e,t){return({length:n})=>2===n?[e[3][2],e[3][0]]:(n=Math.max(3,Math.floor(n)))>11?quantize((e=>t(1-e)),n):e[n].slice().reverse()}function schemei(e){return({length:t})=>quantize(e,Math.max(2,Math.floor(t)))}function schemeicyclical(e){return({length:t})=>quantize(e,Math.floor(t)+1).slice(0,-1)}function ordinalScheme(e){const t=`${e}`.toLowerCase();if(!Yi.has(t))throw new Error(`unknown ordinal scheme: ${t}`);return Yi.get(t)}function ordinalRange(e,t){const n=ordinalScheme(e),r="function"==typeof n?n({length:t}):n;return r.length!==t?r.slice(0,t):r}const ji=new Map([["brbg",nr],["prgn",ar],["piyg",or],["puor",cr],["rdbu",fr],["rdgy",dr],["rdylbu",hr],["rdylgn",gr],["spectral",Ar],["burd",e=>fr(1-e)],["buylrd",e=>hr(1-e)],["blues",zr],["greens",Qr],["greys",Gr],["purples",Jr],["reds",_r],["oranges",ea],["turbo",turbo],["viridis",ba],["magma",Aa],["inferno",ya],["plasma",wa],["cividis",cividis],["cubehelix",fa],["warm",ua],["cool",da],["bugn",wr],["bupu",xr],["gnbu",Sr],["orrd",Er],["pubugn",Cr],["pubu",Tr],["purd",Ir],["rdpu",Vr],["ylgnbu",Wr],["ylgn",Fr],["ylorbr",Zr],["ylorrd",Yr],["rainbow",rainbow],["sinebow",sinebow]]);function quantitativeScheme(e){const t=`${e}`.toLowerCase();if(!ji.has(t))throw new Error(`unknown quantitative scheme: ${t}`);return ji.get(t)}const zi=new Set(["brbg","prgn","piyg","puor","rdbu","rdgy","rdylbu","rdylgn","spectral","burd","buylrd"]);const flip=e=>t=>e(1-t),Pi=[0,1],Qi=new Map([["number",src_number],["rgb",P],["hsl",Tt],["hcl",Dt],["lab",function lab_lab(e,t){var n=nogamma((e=lab(e)).l,(t=lab(t)).l),r=nogamma(e.a,t.a),a=nogamma(e.b,t.b),o=nogamma(e.opacity,t.opacity);return function(t){return e.l=n(t),e.a=r(t),e.b=a(t),e.opacity=o(t),e+""}}]]);function maybeInterpolator(e){const t=`${e}`.toLowerCase();if(!Qi.has(t))throw new Error(`unknown interpolator: ${t}`);return Qi.get(t)}function createScaleQ(e,t,n,{type:r,nice:a,clamp:o,zero:s,domain:c=inferAutoDomain(e,n),unknown:l,round:f,scheme:u,interval:d,range:p=(Ni.get(e)===Ei?inferRadialRange(n,c):Ni.get(e)===Ui?inferLengthRange(n,c):Ni.get(e)===Ci?Pi:void 0),interpolate:h=(Ni.get(e)===Mi?null==u&&void 0!==p?P:quantitativeScheme(void 0!==u?u:"cyclical"===r?"rainbow":"turbo"):f?src_round:src_number),reverse:m}){if(c=maybeRepeat(c),d=maybeRangeInterval(d,r),"cyclical"!==r&&"sequential"!==r||(r="linear"),"function"!=typeof h&&(h=maybeInterpolator(h)),m=!!m,void 0!==p){if(c.length!==(p=maybeRepeat(p)).length){if(1===h.length)throw new Error("invalid piecewise interpolator");h=piecewise(h,p),p=void 0}}if(1===h.length?(m&&(h=flip(h),m=!1),void 0===p&&2===(p=Float64Array.from(c,((e,t)=>t/(c.length-1)))).length&&(p=Pi),t.interpolate((p===Pi?options_constant:interpolatePiecewise)(h))):t.interpolate(h),s){const[e,t]=extent(c);if(e>0||t<0){(orderof(c=slice(c))||1)===Math.sign(e)?c[0]=0:c[c.length-1]=0}}return m&&(c=reverse_reverse(c)),t.domain(c).unknown(l),a&&(t.nice(function maybeNice(e,t){return!0===e?void 0:"number"==typeof e?e:function maybeNiceInterval(e,t){if((e=maybeRangeInterval(e,t))&&"function"!=typeof e.ceil)throw new Error("invalid interval: missing ceil method");return e}(e,t)}(a,r)),c=t.domain()),void 0!==p&&t.range(p),o&&t.clamp(o),{type:r,domain:c,range:p,scale:t,interpolate:h,interval:d}}function maybeRepeat(e){return(e=options_arrayify(e)).length>=2?e:[e[0],e[0]]}function createScalePow(e,t,{exponent:n=1,...r}){return createScaleQ(e,pow_pow().exponent(n),t,{...r,type:"pow"})}function createScaleLog(e,t,{base:n=10,domain:r=inferLogDomain(t),...a}){return createScaleQ(e,log_log().base(n),t,{...a,domain:r})}function createScaleSymlog(e,t,{constant:n=1,...r}){return createScaleQ(e,symlog().constant(n),t,r)}function createScaleQuantile(e,t,{range:n,quantiles:r=(void 0===n?5:(n=[...n]).length),n:a=r,scheme:o="rdylbu",domain:s=inferQuantileDomain(t),unknown:c,interpolate:l,reverse:f}){return void 0===n&&(n=void 0!==l?quantize(l,a):Ni.get(e)===Mi?ordinalRange(o,a):void 0),s.length>0&&(s=quantile_quantile(s,void 0===n?{length:a}:n).quantiles()),createScaleThreshold(e,t,{domain:s,range:n,reverse:f,unknown:c})}function createScaleThreshold(e,t,{domain:n=[0],unknown:r,scheme:a="rdylbu",interpolate:o,range:s=(void 0!==o?quantize(o,n.length+1):Ni.get(e)===Mi?ordinalRange(a,n.length+1):void 0),reverse:c}){const l=orderof(n=options_arrayify(n));if(!isNaN(l)&&!function isOrdered(e,t){for(let n=1,r=e.length,a=e[0];n<r;++n){const r=descending(a,a=e[n]);if(0!==r&&r!==t)return!1}return!0}(n,l))throw new Error(`the ${e} scale has a non-monotonic domain`);return c&&(s=reverse_reverse(s)),{type:"threshold",scale:threshold(l<0?reverse_reverse(n):n,void 0===s?[]:s).unknown(r),domain:n,range:s}}function inferDomain(e,t=finite){return e.length?[min(e,(({value:e})=>void 0===e?e:min(e,t))),max(e,(({value:e})=>void 0===e?e:max(e,t)))]:[0,1]}function inferAutoDomain(e,t){const n=Ni.get(e);return(n===Ei||n===Ci||n===Ui?inferZeroDomain:inferDomain)(t)}function inferZeroDomain(e){return[0,e.length?max(e,(({value:e})=>void 0===e?e:max(e,finite))):1]}function inferRadialRange(e,t){const n=e.find((({radius:e})=>void 0!==e));if(void 0!==n)return[0,n.radius];const r=quantile(e,.5,(({value:e})=>void 0===e?NaN:quantile(e,.25,positive))),a=t.map((e=>3*Math.sqrt(e/r))),o=30/max(a);return o<1?a.map((e=>e*o)):a}function inferLengthRange(e,t){const n=median(e,(({value:e})=>void 0===e?NaN:median(e,Math.abs))),r=t.map((e=>12*e/n)),a=60/max(r);return a<1?r.map((e=>e*a)):r}function inferLogDomain(e){for(const{value:t}of e)if(void 0!==t)for(let n of t){if(n>0)return inferDomain(e,positive);if(n<0)return inferDomain(e,negative)}return[1,10]}function inferQuantileDomain(e){const t=[];for(const{value:n}of e)if(void 0!==n)for(const e of n)t.push(e);return t}function interpolatePiecewise(e){return(t,n)=>r=>e(t+r*(n-t))}let Ki,Gi=0;function warnings_warn(e){e!==Ki&&(Ki=e,console.warn(e),++Gi)}function createScaleD(e,t,n,r,{type:a,nice:o,clamp:s,domain:c=inferDomain(r),unknown:l,pivot:f=0,scheme:u,range:d,symmetric:p=!0,interpolate:h=(Ni.get(e)===Mi?null==u&&void 0!==d?P:quantitativeScheme(void 0!==u?u:"rdbu"):src_number),reverse:m}){f=+f,c=options_arrayify(c);let[g,b]=c;if(c.length>2&&warnings_warn(`Warning: the diverging ${e} scale domain contains extra elements.`),descending(g,b)<0&&([g,b]=[b,g],m=!m),g=Math.min(g,f),b=Math.max(b,f),"function"!=typeof h&&(h=maybeInterpolator(h)),void 0!==d&&(h=1===h.length?interpolatePiecewise(h)(...d):piecewise(h,d)),m&&(h=flip(h)),p){const e=n.apply(f),t=e-n.apply(g),r=n.apply(b)-e;t<r?g=n.invert(e-r):t>r&&(b=n.invert(e+t))}return t.domain([g,f,b]).unknown(l).interpolator(h),s&&t.clamp(s),o&&t.nice(o),{type:a,domain:[g,b],pivot:f,interpolate:h,scale:t}}function createScaleDiverging(e,t,n){return createScaleD(e,diverging(),Xi,t,n)}function createScaleDivergingPow(e,t,{exponent:n=1,...r}){return createScaleD(e,divergingPow().exponent(n=+n),function diverging_transformPow(e){return.5===e?Hi:{apply:t=>Math.sign(t)*Math.pow(Math.abs(t),e),invert:t=>Math.sign(t)*Math.pow(Math.abs(t),1/e)}}(n),t,{...r,type:"diverging-pow"})}function createScaleDivergingLog(e,t,{base:n=10,pivot:r=1,domain:a=inferDomain(t,r<0?negative:positive),...o}){return createScaleD(e,divergingLog().base(n=+n),Ji,t,{domain:a,pivot:r,...o})}function createScaleDivergingSymlog(e,t,{constant:n=1,...r}){return createScaleD(e,divergingSymlog().constant(n=+n),function diverging_transformSymlog(e){return{apply:t=>Math.sign(t)*Math.log1p(Math.abs(t/e)),invert:t=>Math.sign(t)*Math.expm1(Math.abs(t))*e}}(n),t,r)}const Xi={apply:e=>e,invert:e=>e},Ji={apply:Math.log,invert:Math.exp},Hi={apply:e=>Math.sign(e)*Math.sqrt(Math.abs(e)),invert:e=>Math.sign(e)*(e*e)};function createScaleT(e,t,n,r){return createScaleQ(e,t,n,r)}function createScaleTime(e,t,n){return createScaleT(e,function time(){return initRange.apply(calendar(Bn,Wn,Nn,Rn,mn,dn,fn,cn,sn,Fn).domain([new Date(2e3,0,1),new Date(2e3,0,2)]),arguments)}(),t,n)}function createScaleUtc(e,t,n){return createScaleT(e,function utcTime(){return initRange.apply(calendar(Ln,Vn,In,Tn,xn,pn,un,ln,sn,Dn).domain([Date.UTC(2e3,0,1),Date.UTC(2e3,0,2)]),arguments)}(),t,n)}const _i=Symbol("ordinal");function createScaleO(e,t,n,{type:r,interval:a,domain:o,range:s,reverse:c,hint:l}){return a=maybeRangeInterval(a,r),void 0===o&&(o=ordinal_inferDomain(n,a,e)),"categorical"!==r&&r!==_i||(r="ordinal"),c&&(o=reverse_reverse(o)),o=t.domain(o).domain(),void 0!==s&&("function"==typeof s&&(s=s(o)),t.range(s)),{type:r,domain:o,range:s,scale:t,hint:l,interval:a}}function createScaleOrdinal(e,t,{type:n,interval:r,domain:a,range:o,scheme:s,unknown:c,...l}){let f;if(r=maybeRangeInterval(r,n),void 0===a&&(a=ordinal_inferDomain(t,r,e)),Ni.get(e)===Ri)f=function inferSymbolHint(e){return{fill:inferHint(e,"fill"),stroke:inferHint(e,"stroke")}}(t),o=void 0===o?function inferSymbolRange(e){return isNoneish(e.fill)?$a:_a}(f):options_map(o,maybeSymbol);else if(Ni.get(e)===Mi&&(void 0!==o||"ordinal"!==n&&n!==_i||(o=function maybeBooleanRange(e,t="greys"){const n=new Set,[r,a]=ordinalRange(t,2);for(const t of e)if(null!=t)if(!0===t)n.add(a);else{if(!1!==t)return;n.add(r)}return[...n]}(a,s),void 0!==o&&(s=void 0)),void 0===s&&void 0===o&&(s="ordinal"===n?"turbo":"observable10"),void 0!==s))if(void 0!==o){const e=quantitativeScheme(s),t=o[0],n=o[1]-o[0];o=({length:r})=>quantize((r=>e(t+n*r)),r)}else o=ordinalScheme(s);if(c===zt)throw new Error(`implicit unknown on ${e} scale is not supported`);return createScaleO(e,ordinal().unknown(c),t,{...l,type:n,domain:a,range:o,hint:f})}function maybeRound(e,t,n,r){let{round:a}=n;return void 0!==a&&e.round(a=!!a),(e=createScaleO(r,e,t,n)).round=a,e}function ordinal_inferDomain(e,t,n){const r=new InternSet;for(const{value:t,domain:n}of e){if(void 0!==n)return n();if(void 0!==t)for(const e of t)r.add(e)}if(void 0!==t){const[e,n]=extent(r).map(t.floor,t);return t.range(e,t.offset(n))}if(r.size>1e4&&Ni.get(n)===Si)throw new Error(`implicit ordinal domain of ${n} scale has more than 10,000 values`);return sort(r,defined_ascendingDefined)}function inferHint(e,t){let n;for(const{hint:r}of e){const e=r?.[t];if(void 0!==e)if(void 0===n)n=e;else if(n!==e)return}return n}function createScales(e,{label:t,inset:n=0,insetTop:r=n,insetRight:a=n,insetBottom:o=n,insetLeft:s=n,round:c,nice:l,clamp:f,zero:u,align:d,padding:p,projection:h,facet:{label:m=t}={},...g}={}){const b={};for(const[n,A]of e){const e=g[n],y=createScale(n,A,{round:Ni.get(n)===Si?c:void 0,nice:l,clamp:f,zero:u,align:d,padding:p,projection:h,...e});if(y){let{label:c=("fx"===n||"fy"===n?m:t),percent:l,transform:f,inset:u,insetTop:d=(void 0!==u?u:"y"===n?r:0),insetRight:p=(void 0!==u?u:"x"===n?a:0),insetBottom:h=(void 0!==u?u:"y"===n?o:0),insetLeft:g=(void 0!==u?u:"x"===n?s:0)}=e||{};if(null==f)f=void 0;else if("function"!=typeof f)throw new Error("invalid scale transform; not a function");y.percent=!!l,y.label=void 0===c?inferScaleLabel(A,y):c,y.transform=f,"x"===n||"fx"===n?(y.insetLeft=+g,y.insetRight=+p):"y"!==n&&"fy"!==n||(y.insetTop=+d,y.insetBottom=+h),b[n]=y}}return b}function createScaleFunctions(e){const t={},n={scales:t};for(const[r,a]of Object.entries(e)){const{scale:e,type:o,interval:s,label:c}=a;t[r]=exposeScale(a),n[r]=e,e.type=o,null!=s&&(e.interval=s),null!=c&&(e.label=c)}return n}function inferScaleLabel(e=[],t){let n;for(const{label:t}of e)if(void 0!==t)if(void 0===n)n=t;else if(n!==t)return;if(void 0!==n)return!isOrdinalScale(t)&&t.percent&&(n=`${n} (%)`),{inferred:!0,toString:()=>n}}function outerDimensions(e){const{marginTop:t,marginRight:n,marginBottom:r,marginLeft:a,width:o,height:s,facet:{marginTop:c,marginRight:l,marginBottom:f,marginLeft:u}}=e;return{marginTop:Math.max(t,c),marginRight:Math.max(n,l),marginBottom:Math.max(r,f),marginLeft:Math.max(a,u),width:o,height:s}}function innerDimensions({fx:e,fy:t},n){const{marginTop:r,marginRight:a,marginBottom:o,marginLeft:s,width:c,height:l}=outerDimensions(n);return{marginTop:r,marginRight:a,marginBottom:o,marginLeft:s,width:e?e.scale.bandwidth()+s+a:c,height:t?t.scale.bandwidth()+r+o:l,facet:{width:c,height:l}}}function autoScaleRangeX(e,t){if(void 0===e.range){const{insetLeft:n,insetRight:r}=e,{width:a,marginLeft:o=0,marginRight:s=0}=t,c=o+n,l=a-s-r;e.range=[c,Math.max(c,l)],isOrdinalScale(e)||(e.range=piecewiseRange(e)),e.scale.range(e.range)}autoScaleRound(e)}function autoScaleRangeY(e,t){if(void 0===e.range){const{insetTop:n,insetBottom:r}=e,{height:a,marginTop:o=0,marginBottom:s=0}=t,c=o+n,l=a-s-r;e.range=[Math.max(c,l),c],isOrdinalScale(e)?e.range.reverse():e.range=piecewiseRange(e),e.scale.range(e.range)}autoScaleRound(e)}function autoScaleRound(e){void 0===e.round&&function isBandScale({type:e}){return"point"===e||"band"===e}(e)&&function roundError({scale:e}){const t=e.domain().length,[n,r]=e.range(),a=e.paddingInner?e.paddingInner():1,o=e.paddingOuter?e.paddingOuter():e.padding(),s=t-a,c=Math.abs(r-n)/Math.max(1,s+2*o);return(c-Math.floor(c))*s}(e)<=30&&e.scale.round(!0)}function piecewiseRange(e){const t=e.scale.domain().length+isThresholdScale(e);if(!(t>2))return e.range;const[n,r]=e.range;return Array.from({length:t},((e,a)=>n+a/(t-1)*(r-n)))}function createScale(e,t=[],n={}){const r=function inferScaleType(e,t,{type:n,domain:r,range:a,scheme:o,pivot:s,projection:c}){if(n=maybeScaleType(n),"fx"===e||"fy"===e)return"band";"x"!==e&&"y"!==e||null==c||(n=$i);for(const e of t){const t=maybeScaleType(e.type);if(void 0!==t)if(void 0===n)n=t;else if(n!==t)throw new Error(`scale incompatible with channel: ${n} !== ${t}`)}if(n===$i)return;if(void 0!==n)return n;if(void 0===r&&!t.some((({value:e})=>void 0!==e)))return;const l=Ni.get(e);if(l===Ei)return"sqrt";if(l===Ci||l===Ui)return"linear";if(l===Ri)return"ordinal";const f=(r??a)?.length;if(f<2||f>2)return asOrdinalType(l);if(void 0!==r){if(isOrdinal(r))return asOrdinalType(l);if(isTemporal(r))return"utc"}else{const e=t.map((({value:e})=>e)).filter((e=>void 0!==e));if(e.some(isOrdinal))return asOrdinalType(l);if(e.some(isTemporal))return"utc"}if(l===Mi){if(null!=s||function isDivergingScheme(e){return null!=e&&zi.has(`${e}`.toLowerCase())}(o))return"diverging";if(function isCategoricalScheme(e){return null!=e&&Oi.has(`${e}`.toLowerCase())}(o))return"categorical"}return"linear"}(e,t,n);if(void 0===n.type&&void 0===n.domain&&void 0===n.range&&null==n.interval&&"fx"!==e&&"fy"!==e&&isOrdinalScale({type:r})){const n=t.map((({value:e})=>e)).filter((e=>void 0!==e));n.some(isTemporal)?warnings_warn(`Warning: some data associated with the ${e} scale are dates. Dates are typically associated with a "utc" or "time" scale rather than a "${formatScaleType(r)}" scale. If you are using a bar mark, you probably want a rect mark with the interval option instead; if you are using a group transform, you probably want a bin transform instead. If you want to treat this data as ordinal, you can specify the interval of the ${e} scale (e.g., d3.utcDay), or you can suppress this warning by setting the type of the ${e} scale to "${formatScaleType(r)}".`):n.some(isTemporalString)?warnings_warn(`Warning: some data associated with the ${e} scale are strings that appear to be dates (e.g., YYYY-MM-DD). If these strings represent dates, you should parse them to Date objects. Dates are typically associated with a "utc" or "time" scale rather than a "${formatScaleType(r)}" scale. If you are using a bar mark, you probably want a rect mark with the interval option instead; if you are using a group transform, you probably want a bin transform instead. If you want to treat this data as ordinal, you can suppress this warning by setting the type of the ${e} scale to "${formatScaleType(r)}".`):n.some(isNumericString)&&warnings_warn(`Warning: some data associated with the ${e} scale are strings that appear to be numbers. If these strings represent numbers, you should parse or coerce them to numbers. Numbers are typically associated with a "linear" scale rather than a "${formatScaleType(r)}" scale. If you want to treat this data as ordinal, you can specify the interval of the ${e} scale (e.g., 1 for integers), or you can suppress this warning by setting the type of the ${e} scale to "${formatScaleType(r)}".`)}switch(n.type=r,r){case"diverging":case"diverging-sqrt":case"diverging-pow":case"diverging-log":case"diverging-symlog":case"cyclical":case"sequential":case"linear":case"sqrt":case"threshold":case"quantile":case"pow":case"log":case"symlog":n=coerceType(t,n,options_coerceNumbers);break;case"identity":switch(Ni.get(e)){case Si:n=coerceType(t,n,options_coerceNumbers);break;case Ri:n=coerceType(t,n,coerceSymbols)}break;case"utc":case"time":n=coerceType(t,n,coerceDates)}switch(r){case"diverging":return createScaleDiverging(e,t,n);case"diverging-sqrt":return function createScaleDivergingSqrt(e,t,n){return createScaleDivergingPow(e,t,{...n,exponent:.5})}(e,t,n);case"diverging-pow":return createScaleDivergingPow(e,t,n);case"diverging-log":return createScaleDivergingLog(e,t,n);case"diverging-symlog":return createScaleDivergingSymlog(e,t,n);case"categorical":case"ordinal":case _i:return createScaleOrdinal(e,t,n);case"cyclical":case"sequential":case"linear":return function createScaleLinear(e,t,n){return createScaleQ(e,linear_linear(),t,n)}(e,t,n);case"sqrt":return function createScaleSqrt(e,t,n){return createScalePow(e,t,{...n,exponent:.5})}(e,t,n);case"threshold":return createScaleThreshold(e,0,n);case"quantile":return createScaleQuantile(e,t,n);case"quantize":return function createScaleQuantize(e,t,{range:n,n:r=(void 0===n?5:(n=[...n]).length),scheme:a="rdylbu",domain:o=inferAutoDomain(e,t),unknown:s,interpolate:c,reverse:l}){const[f,u]=extent(o);let d;return void 0===n?(d=ticks(f,u,r),d[0]<=f&&d.splice(0,1),d[d.length-1]>=u&&d.pop(),r=d.length+1,n=void 0!==c?quantize(c,r):Ni.get(e)===Mi?ordinalRange(a,r):void 0):(d=quantize(src_number(f,u),r+1).slice(1,-1),f instanceof Date&&(d=d.map((e=>new Date(e))))),orderof(options_arrayify(o))<0&&d.reverse(),createScaleThreshold(e,0,{domain:d,range:n,reverse:l,unknown:s})}(e,t,n);case"pow":return createScalePow(e,t,n);case"log":return createScaleLog(e,t,n);case"symlog":return createScaleSymlog(e,t,n);case"utc":return createScaleUtc(e,t,n);case"time":return createScaleTime(e,t,n);case"point":return function createScalePoint(e,t,{align:n=.5,padding:r=.5,...a}){return maybeRound(point().align(n).padding(r),t,a,e)}(e,t,n);case"band":return function createScaleBand(e,t,{align:n=.5,padding:r=.1,paddingInner:a=r,paddingOuter:o=("fx"===e||"fy"===e?0:r),...s}){return maybeRound(band().align(n).paddingInner(a).paddingOuter(o),t,s,e)}(e,t,n);case"identity":return function createScaleIdentity(e){return{type:"identity",scale:(t=Ni.get(e),t===Si||t===Ei||t===Ui||t===Ci?src_identity_identity():e=>e)};var t}(e);case void 0:return;default:throw new Error(`unknown scale type: ${r}`)}}function formatScaleType(e){return"symbol"==typeof e?e.description:e}function maybeScaleType(e){return"string"==typeof e?`${e}`.toLowerCase():e}const $i={toString:()=>"projection"};function asOrdinalType(e){switch(e){case Si:return"point";case Mi:return _i;default:return"ordinal"}}function isOrdinalScale({type:e}){return"ordinal"===e||"point"===e||"band"===e||e===_i}function isThresholdScale({type:e}){return"threshold"===e}function isCollapsed(e){if(void 0===e)return!0;const t=e.domain(),n=e(t[0]);for(let r=1,a=t.length;r<a;++r)if(e(t[r])-n)return!1;return!0}function coerceType(e,{domain:t,...n},r){for(const n of e)void 0!==n.value&&(void 0===t&&(t=n.value?.domain),n.value=r(n.value));return{domain:void 0===t?t:r(t),...n}}function coerceSymbols(e){return options_map(e,maybeSymbol)}function exposeScale({scale:e,type:t,domain:n,range:r,interpolate:a,interval:o,transform:s,percent:c,pivot:l}){if("identity"===t)return{type:"identity",apply:e=>e,invert:e=>e};const f=e.unknown?e.unknown():void 0;return{type:t,domain:slice(n),...void 0!==r&&{range:slice(r)},...void 0!==s&&{transform:s},...c&&{percent:c},...void 0!==f&&{unknown:f},...void 0!==o&&{interval:o},...void 0!==a&&{interpolate:a},...e.clamp&&{clamp:e.clamp()},...void 0!==l&&{pivot:l,symmetric:!1},...e.base&&{base:e.base()},...e.exponent&&{exponent:e.exponent()},...e.constant&&{constant:e.constant()},...e.align&&{align:e.align(),round:e.round()},...e.padding&&(e.paddingInner?{paddingInner:e.paddingInner(),paddingOuter:e.paddingOuter()}:{padding:e.padding()}),...e.bandwidth&&{bandwidth:e.bandwidth(),step:e.step()},apply:t=>e(t),...e.invert&&{invert:t=>e.invert(t)}}}function createFacets(e,t){const{fx:n,fy:r}=createScales(e,t),a=n?.scale.domain(),o=r?.scale.domain();return a&&o?function cross(...e){const t="function"==typeof e[e.length-1]&&function reducer(e){return t=>e(...t)}(e.pop()),n=(e=e.map(arrayify)).map(cross_length),r=e.length-1,a=new Array(r+1).fill(0),o=[];if(r<0||n.some(empty))return o;for(;;){o.push(a.map(((t,n)=>e[n][t])));let s=r;for(;++a[s]===n[s];){if(0===s)return t?o.map(t):o;a[s--]=0}}}(a,o).map((([e,t],n)=>({x:e,y:t,i:n}))):a?a.map(((e,t)=>({x:e,i:t}))):o?o.map(((e,t)=>({y:e,i:t}))):void 0}function facetGroups(e,{fx:t,fy:n}){const r=options_range(e),a=t?.value,o=n?.value;return t&&n?rollup(r,(e=>(e.fx=a[e[0]],e.fy=o[e[0]],e)),(e=>a[e]),(e=>o[e])):t?rollup(r,(e=>(e.fx=a[e[0]],e)),(e=>a[e])):rollup(r,(e=>(e.fy=o[e[0]],e)),(e=>o[e]))}function facetExclude(e){const t=[],n=new Uint32Array(sum(e,(e=>e.length)));for(const r of e){let a=0;for(const t of e)r!==t&&(n.set(t,a),a+=t.length);t.push(n.slice(0,a))}return t}const eo=new Map([["top",facetAnchorTop],["right",facetAnchorRight],["bottom",facetAnchorBottom],["left",facetAnchorLeft],["top-left",and(facetAnchorTop,facetAnchorLeft)],["top-right",and(facetAnchorTop,facetAnchorRight)],["bottom-left",and(facetAnchorBottom,facetAnchorLeft)],["bottom-right",and(facetAnchorBottom,facetAnchorRight)],["top-empty",function facetAnchorTopEmpty(e,{y:t},{x:n,y:r,empty:a}){if(a)return!1;if(!t)return;const o=facetIndexOf(t,r);if(o>0)return facetEmpty(e,n,t[o-1])}],["right-empty",function facetAnchorRightEmpty(e,{x:t},{x:n,y:r,empty:a}){if(a)return!1;if(!t)return;const o=facetIndexOf(t,n);if(o<t.length-1)return facetEmpty(e,t[o+1],r)}],["bottom-empty",function facetAnchorBottomEmpty(e,{y:t},{x:n,y:r,empty:a}){if(a)return!1;if(!t)return;const o=facetIndexOf(t,r);if(o<t.length-1)return facetEmpty(e,n,t[o+1])}],["left-empty",function facetAnchorLeftEmpty(e,{x:t},{x:n,y:r,empty:a}){if(a)return!1;if(!t)return;const o=facetIndexOf(t,n);if(o>0)return facetEmpty(e,t[o-1],r)}],["empty",function facetAnchorEmpty(e,t,{empty:n}){return n}]]);const to=new WeakMap;function facetIndex(e){let t=to.get(e);return t||to.set(e,t=new InternMap(options_map(e,((e,t)=>[e,t])))),t}function facetIndexOf(e,t){return facetIndex(e).get(t)}function facetEmpty(e,t,n){return function facetFind(e,t,n){return t=options_keyof(t),n=options_keyof(n),e.find((e=>Object.is(options_keyof(e.x),t)&&Object.is(options_keyof(e.y),n)))}(e,t,n)?.empty}function facetAnchorTop(e,{y:t},{y:n}){return!t||0===facetIndexOf(t,n)}function facetAnchorBottom(e,{y:t},{y:n}){return!t||facetIndexOf(t,n)===t.length-1}function facetAnchorLeft(e,{x:t},{x:n}){return!t||0===facetIndexOf(t,n)}function facetAnchorRight(e,{x:t},{x:n}){return!t||facetIndexOf(t,n)===t.length-1}function and(e,t){return function(){return e.apply(null,arguments)&&t.apply(null,arguments)}}function facetFilter(e,{channels:{fx:t,fy:n},groups:r}){return t&&n?e.map((({x:e,y:t})=>r.get(e)?.get(t)??[])):t?e.map((({x:e})=>r.get(e)??[])):e.map((({y:e})=>r.get(e)??[]))}const no=Math.PI,ro=2*no,ao=.618;function createProjection({projection:e,inset:t=0,insetTop:n=t,insetRight:r=t,insetBottom:a=t,insetLeft:o=t}={},s){if(null==e)return;if("function"==typeof e.stream)return e;let c,l,f="frame";if(options_isObject(e)){let t;if(({type:e,domain:l,inset:t,insetTop:n=(void 0!==t?t:n),insetRight:r=(void 0!==t?t:r),insetBottom:a=(void 0!==t?t:a),insetLeft:o=(void 0!==t?t:o),clip:f=f,...c}=e),null==e)return}"function"!=typeof e&&({type:e}=namedProjection(e));const{width:u,height:d,marginLeft:p,marginRight:h,marginTop:m,marginBottom:g}=s,b=u-p-h-o-r,A=d-m-g-n-a;if(e=e?.({width:b,height:A,clip:f,...c}),null==e)return;f=function maybePostClip(e,t,n,r,a){if(!1===e||null==e||"number"==typeof e)return e=>e;!0===e&&(e="frame");if("frame"===`${e}`.toLowerCase())return clipRectangle(t,n,r,a);throw new Error(`unknown projection clip type: ${e}`)}(f,p,m,u-h,d-g);let y,w=p+o,v=m+n;if(null!=l){const[[t,n],[r,a]]=path(e).bounds(l),o=Math.min(b/(r-t),A/(a-n));o>0?(w-=(o*(t+r)-b)/2,v-=(o*(n+a)-A)/2,y=src_transform({point(e,t){this.stream.point(e*o+w,t*o+v)}})):warnings_warn("Warning: the projection could not be fit to the specified domain; using the default scale.")}return y??=0===w&&0===v?io():src_transform({point(e,t){this.stream.point(e+w,t+v)}}),{stream:t=>e.stream(y.stream(f(t)))}}function namedProjection(e){switch(`${e}`.toLowerCase()){case"albers-usa":return scaleProjection(albersUsa,.7463,.4673);case"albers":return projection_conicProjection(albers,.7463,.4673);case"azimuthal-equal-area":return scaleProjection(azimuthalEqualArea,4,4);case"azimuthal-equidistant":return scaleProjection(azimuthalEquidistant,ro,ro);case"conic-conformal":return projection_conicProjection(conicConformal,ro,ro);case"conic-equal-area":return projection_conicProjection(conicEqualArea,6.1702,2.9781);case"conic-equidistant":return projection_conicProjection(conicEquidistant,7.312,3.6282);case"equal-earth":return scaleProjection(equalEarth,5.4133,2.6347);case"equirectangular":return scaleProjection(equirectangular,ro,no);case"gnomonic":return scaleProjection(gnomonic,3.4641,3.4641);case"identity":return{type:io};case"reflect-y":return{type:oo};case"mercator":return scaleProjection(mercator,ro,ro);case"orthographic":return scaleProjection(orthographic,2,2);case"stereographic":return scaleProjection(stereographic,2,2);case"transverse-mercator":return scaleProjection(transverseMercator,ro,ro);default:throw new Error(`unknown projection type: ${e}`)}}function scaleProjection(e,t,n){return{type:({width:r,height:a,rotate:o,precision:s=.15,clip:c})=>{const l=e();return null!=s&&l.precision?.(s),null!=o&&l.rotate?.(o),"number"==typeof c&&l.clipAngle?.(c),null!=r&&(l.scale(Math.min(r/t,a/n)),l.translate([r/2,a/2])),l},aspectRatio:n/t}}function projection_conicProjection(e,t,n){const{type:r,aspectRatio:a}=scaleProjection(e,t,n);return{type:e=>{const{parallels:t,domain:n,width:a,height:o}=e,s=r(e);return null!=t&&(s.parallels(t),void 0===n&&null!=a&&s.fitSize([a,o],{type:"Sphere"})),s},aspectRatio:a}}const io=options_constant({stream:e=>e}),oo=options_constant(src_transform({point(e,t){this.stream.point(e,-t)}}));function project(e,t,n,r){const a=n[e],o=n[t],s=a.length,c=n[e]=new Float64Array(s).fill(NaN),l=n[t]=new Float64Array(s).fill(NaN);let f;const u=r.stream({point(e,t){c[f]=e,l[f]=t}});for(f=0;f<s;++f)u.point(a[f],o[f])}function hasProjection({projection:e}={}){return null!=e&&("function"==typeof e.stream||(options_isObject(e)&&(e=e.type),null!=e))}function getGeometryChannels(e){const t=[],n=[],r={scale:"x",value:t},a={scale:"y",value:n},o={point(e,r){t.push(e),n.push(r)},lineStart(){},lineEnd(){},polygonStart(){},polygonEnd(){},sphere(){}};for(const t of e.value)stream(t,o);return[r,a]}function context_createContext(e={}){const{document:t=("undefined"!=typeof window?window.document:void 0),clip:n}=e;return{document:t,clip:maybeClip(n)}}function context_create(e,{document:t}){return src_select(creator(e).call(t.documentElement))}function format(e,t){if(e instanceof Date||(e=new Date(+e)),isNaN(e))return"function"==typeof t?t(e):t;const n=e.getUTCHours(),r=e.getUTCMinutes(),a=e.getUTCSeconds(),o=e.getUTCMilliseconds();return`${function format_formatYear(e){return e<0?`-${format_pad(-e,6)}`:e>9999?`+${format_pad(e,6)}`:format_pad(e,4)}(e.getUTCFullYear())}-${format_pad(e.getUTCMonth()+1,2)}-${format_pad(e.getUTCDate(),2)}${n||r||a||o?`T${format_pad(n,2)}:${format_pad(r,2)}${a||o?`:${format_pad(a,2)}${o?`.${format_pad(o,3)}`:""}`:""}Z`:""}`}function format_pad(e,t){return`${e}`.padStart(t,"0")}const so=Symbol("unset");function memoize1(e){return(1===e.length?memoize1Arg:memoize1Args)(e)}function memoize1Arg(e){let t,n=so;return r=>(Object.is(n,r)||(n=r,t=e(r)),t)}function memoize1Args(e){let t,n;return(...r)=>((n?.length!==r.length||n.some(((e,t)=>!Object.is(e,r[t]))))&&(n=r,t=e(...r)),t)}const co=memoize1((e=>new Intl.NumberFormat(e)));memoize1(((e,t)=>new Intl.DateTimeFormat(e,{timeZone:"UTC",...t&&{month:t}}))),memoize1(((e,t)=>new Intl.DateTimeFormat(e,{timeZone:"UTC",...t&&{weekday:t}})));function formatIsoDate(e){return format(e,"Invalid Date")}const lo=function formatAuto(e="en-US"){const t=function formatNumber(e="en-US"){const t=co(e);return e=>null==e||isNaN(e)?void 0:t.format(e)}(e);return e=>(e instanceof Date?formatIsoDate:"number"==typeof e?t:options_string)(e)}(),fo=("undefined"!=typeof window?window.devicePixelRatio>1:"undefined"==typeof it)?0:.5;let uo=0;function getClipId(){return"plot-clip-"+ ++uo}function styles(e,{title:t,href:n,ariaLabel:r,ariaDescription:a,ariaHidden:o,target:s,fill:c,fillOpacity:l,stroke:f,strokeWidth:u,strokeOpacity:d,strokeLinejoin:p,strokeLinecap:h,strokeMiterlimit:m,strokeDasharray:g,strokeDashoffset:b,opacity:A,mixBlendMode:y,imageFilter:w,paintOrder:v,pointerEvents:x,shapeRendering:k,channels:S},{ariaLabel:M,fill:E="currentColor",fillOpacity:U,stroke:C="none",strokeOpacity:R,strokeWidth:T,strokeLinecap:N,strokeLinejoin:I,strokeMiterlimit:L,paintOrder:V}){null===E&&(c=null,l=null),null===C&&(f=null,d=null),isNoneish(E)?isNoneish(C)||isNoneish(c)&&!S?.fill||(C="none"):!isNoneish(C)||isNoneish(f)&&!S?.stroke||(E="none");const[B,W]=options_maybeColorChannel(c,E),[q,F]=maybeNumberChannel(l,U),[D,Z]=options_maybeColorChannel(f,C),[O,Y]=maybeNumberChannel(d,R),[j,z]=maybeNumberChannel(A);isNone(Z)||(void 0===u&&(u=T),void 0===h&&(h=N),void 0===p&&(p=I),void 0!==m||function isRound(e){return/^\s*round\s*$/i.test(e)}(p)||(m=L),isNone(W)||void 0!==v||(v=V));const[P,Q]=maybeNumberChannel(u);return null!==E&&(e.fill=impliedString(W,"currentColor"),e.fillOpacity=impliedNumber(F,1)),null!==C&&(e.stroke=impliedString(Z,"none"),e.strokeWidth=impliedNumber(Q,1),e.strokeOpacity=impliedNumber(Y,1),e.strokeLinejoin=impliedString(p,"miter"),e.strokeLinecap=impliedString(h,"butt"),e.strokeMiterlimit=impliedNumber(m,4),e.strokeDasharray=impliedString(g,"none"),e.strokeDashoffset=impliedString(b,"0")),e.target=options_string(s),e.ariaLabel=options_string(M),e.ariaDescription=options_string(a),e.ariaHidden=options_string(o),e.opacity=impliedNumber(z,1),e.mixBlendMode=impliedString(y,"normal"),e.imageFilter=impliedString(w,"none"),e.paintOrder=impliedString(v,"normal"),e.pointerEvents=impliedString(x,"auto"),e.shapeRendering=impliedString(k,"auto"),{title:{value:t,optional:!0,filter:null},href:{value:n,optional:!0,filter:null},ariaLabel:{value:r,optional:!0,filter:null},fill:{value:B,scale:"auto",optional:!0},fillOpacity:{value:q,scale:"auto",optional:!0},stroke:{value:D,scale:"auto",optional:!0},strokeOpacity:{value:O,scale:"auto",optional:!0},strokeWidth:{value:P,optional:!0},opacity:{value:j,scale:"auto",optional:!0}}}function applyText(e,t){t&&e.text((e=>lo(t[e])))}function applyChannelStyles(e,{target:t,tip:n},{ariaLabel:r,title:a,fill:o,fillOpacity:s,stroke:c,strokeOpacity:l,strokeWidth:f,opacity:u,href:d}){r&&applyAttr(e,"aria-label",(e=>r[e])),o&&applyAttr(e,"fill",(e=>o[e])),s&&applyAttr(e,"fill-opacity",(e=>s[e])),c&&applyAttr(e,"stroke",(e=>c[e])),l&&applyAttr(e,"stroke-opacity",(e=>l[e])),f&&applyAttr(e,"stroke-width",(e=>f[e])),u&&applyAttr(e,"opacity",(e=>u[e])),d&&applyHref(e,(e=>d[e]),t),n||function applyTitle(e,t){t&&e.filter((e=>defined_nonempty(t[e]))).append("title").call(applyText,t)}(e,a)}function applyClip(e,t,n,r){let a;const{clip:o=r.clip}=t;"frame"===o?(e=context_create("svg:g",r).each((function(){this.appendChild(e.node()),e.node=()=>this})),a=po(r,n)):o&&(a=function getGeoClip(e,t){let n,r;(n=ho.get(t))||ho.set(t,n=new WeakMap);"Sphere"===e.type&&(e=mo);if(!(r=n.get(e))){const a=getClipId();src_select(t.ownerSVGElement).append("clipPath").attr("id",a).append("path").attr("d",t.path()(e)),n.set(e,r=`url(#${a})`)}return r}(o,r)),applyAttr(e,"aria-label",t.ariaLabel),applyAttr(e,"aria-description",t.ariaDescription),applyAttr(e,"aria-hidden",t.ariaHidden),applyAttr(e,"clip-path",a)}const po=function memoizeClip(e){const t=new WeakMap;return(n,r)=>{let a=t.get(n);if(!a){const o=getClipId();src_select(n.ownerSVGElement).append("clipPath").attr("id",o).call(e,n,r),t.set(n,a=`url(#${o})`)}return a}}(((e,t,n)=>{const{width:r,height:a,marginLeft:o,marginRight:s,marginTop:c,marginBottom:l}=n;e.append("rect").attr("x",o).attr("y",c).attr("width",r-s-o).attr("height",a-c-l)})),ho=new WeakMap,mo={type:"Sphere"};function applyIndirectStyles(e,t,n,r){applyClip(e,t,n,r),applyAttr(e,"class",t.className),applyAttr(e,"fill",t.fill),applyAttr(e,"fill-opacity",t.fillOpacity),applyAttr(e,"stroke",t.stroke),applyAttr(e,"stroke-width",t.strokeWidth),applyAttr(e,"stroke-opacity",t.strokeOpacity),applyAttr(e,"stroke-linejoin",t.strokeLinejoin),applyAttr(e,"stroke-linecap",t.strokeLinecap),applyAttr(e,"stroke-miterlimit",t.strokeMiterlimit),applyAttr(e,"stroke-dasharray",t.strokeDasharray),applyAttr(e,"stroke-dashoffset",t.strokeDashoffset),applyAttr(e,"shape-rendering",t.shapeRendering),applyAttr(e,"filter",t.imageFilter),applyAttr(e,"paint-order",t.paintOrder);const{pointerEvents:a=(!1===r.pointerSticky?"none":void 0)}=t;applyAttr(e,"pointer-events",a)}function applyDirectStyles(e,t){!function applyStyle(e,t,n){null!=n&&e.style(t,n)}(e,"mix-blend-mode",t.mixBlendMode),applyAttr(e,"opacity",t.opacity)}function applyHref(e,t,n){e.each((function(e){const r=t(e);if(null!=r){const e=this.ownerDocument.createElementNS(f.svg,"a");e.setAttribute("fill","inherit"),e.setAttributeNS(f.xlink,"href",r),null!=n&&e.setAttribute("target",n),this.parentNode.insertBefore(e,this).appendChild(this)}}))}function applyAttr(e,t,n){null!=n&&e.attr(t,n)}function applyTransform(e,t,{x:n,y:r},a=fo,o=fo){a+=t.dx,o+=t.dy,n?.bandwidth&&(a+=n.bandwidth()/2),r?.bandwidth&&(o+=r.bandwidth()/2),(a||o)&&e.attr("transform",`translate(${a},${o})`)}function impliedString(e,t){if((e=options_string(e))!==t)return e}function impliedNumber(e,t){if((e=options_number(e))!==t)return e}const go=/^-?([_a-z]|[\240-\377]|\\[0-9a-f]{1,6}(\r\n|[ \t\r\n\f])?|\\[^\r\n\f0-9a-f])([_a-z0-9-]|[\240-\377]|\\[0-9a-f]{1,6}(\r\n|[ \t\r\n\f])?|\\[^\r\n\f0-9a-f])*$/i;function maybeClassName(e){if(void 0===e)return"plot-d6a7b5";if(e=`${e}`,!go.test(e))throw new Error(`invalid class name: ${e}`);return e}function applyInlineStyles(e,t){if("string"==typeof t)e.property("style",t);else if(null!=t)for(const n of e)Object.assign(n.style,t)}function applyFrameAnchor({frameAnchor:e},{width:t,height:n,marginTop:r,marginRight:a,marginBottom:o,marginLeft:s}){return[/left$/.test(e)?s:/right$/.test(e)?t-a:(s+t-a)/2,/^top/.test(e)?r:/^bottom/.test(e)?n-o:(r+n-o)/2]}function basic_basic({filter:e,sort:t,reverse:n,transform:r,initializer:a,...o}={},s){if(void 0===r&&(null!=e&&(r=filterTransform(e)),null==t||options_isDomainSort(t)||(r=composeTransform(r,sortTransform(t))),n&&(r=composeTransform(r,reverseTransform))),null!=s&&null!=a)throw new Error("transforms cannot be applied after initializers");return{...o,...(null===t||options_isDomainSort(t))&&{sort:t},transform:composeTransform(r,s)}}function initializer({filter:e,sort:t,reverse:n,initializer:r,...a}={},o){return void 0===r&&(null!=e&&(r=filterTransform(e)),null==t||options_isDomainSort(t)||(r=composeInitializer(r,sortTransform(t))),n&&(r=composeInitializer(r,reverseTransform))),{...a,...(null===t||options_isDomainSort(t))&&{sort:t},initializer:composeInitializer(r,o)}}function composeTransform(e,t){return null==e?null===t?void 0:t:null==t?null===e?void 0:e:function(n,r,a){return({data:n,facets:r}=e.call(this,n,r,a)),t.call(this,dataify(n),r,a)}}function composeInitializer(e,t){return null==e?null===t?void 0:t:null==t?null===e?void 0:e:function(n,r,a,...o){let s,c,l,f,u,d;return({data:c=n,facets:l=r,channels:s}=e.call(this,n,r,a,...o)),({data:u=c,facets:d=l,channels:f}=t.call(this,c,l,{...a,...s},...o)),{data:u,facets:d,channels:{...s,...f}}}}function filterTransform(e){return(t,n)=>{const r=options_valueof(t,e);return{data:t,facets:n.map((e=>e.filter((e=>r[e]))))}}}function reverseTransform(e,t){return{data:e,facets:t.map((e=>e.slice().reverse()))}}function sortTransform(e){return("function"==typeof e&&1!==e.length?sortData:sortValue)(e)}function sortData(e){return(t,n)=>{const r=options_isArray(t)?(n,r)=>e(t[n],t[r]):(n,r)=>e(t.get(n),t.get(r));return{data:t,facets:n.map((e=>e.slice().sort(r)))}}}function sortValue(e){let t,n;({channel:t,value:e,order:n}={...maybeValue(e)});const r=t?.startsWith("-");if(r&&(t=t.slice(1)),void 0===n&&(n=r?descendingDefined:defined_ascendingDefined),"function"!=typeof n)switch(`${n}`.toLowerCase()){case"ascending":n=defined_ascendingDefined;break;case"descending":n=descendingDefined;break;default:throw new Error(`invalid order: ${n}`)}return(r,a,o)=>{let s;if(void 0===t)s=options_valueof(r,e);else{if(void 0===o)throw new Error("channel sort requires an initializer");if(s=o[t],!s)return{};s=s.value}const compareValue=(e,t)=>n(s[e],s[t]);return{data:r,facets:a.map((e=>e.slice().sort(compareValue)))}}}class Mark{constructor(e,t={},n={},r){const{facet:a="auto",facetAnchor:o,fx:s,fy:c,sort:l,dx:f=0,dy:u=0,margin:d=0,marginTop:p=d,marginRight:h=d,marginBottom:m=d,marginLeft:g=d,className:b,clip:A=r?.clip,channels:y,tip:w,render:v}=n;if(this.data=e,this.sort=options_isDomainSort(l)?l:null,this.initializer=initializer(n).initializer,this.transform=this.initializer?n.transform:basic_basic(n).transform,null===a||!1===a?this.facet=null:(this.facet=keyword(!0===a?"include":a,"facet",["auto","include","exclude","super"]),this.fx=e===wi&&"string"==typeof s?[s]:s,this.fy=e===wi&&"string"==typeof c?[c]:c),this.facetAnchor=function maybeFacetAnchor(e){if(null==e)return null;const t=eo.get(`${e}`.toLowerCase());if(t)return t;throw new Error(`invalid facet anchor: ${e}`)}(o),t=maybeNamed(t),void 0!==y&&(t={...maybeChannels(y),...t}),void 0!==r&&(t={...styles(this,n,r),...t}),this.channels=Object.fromEntries(Object.entries(t).map((([t,n])=>{if(options_isOptions(n.value)){const{value:e,label:t=n.label,scale:r=n.scale}=n.value;n={...n,label:t,scale:r,value:e}}if(e===wi&&"string"==typeof n.value){const{value:e}=n;n={...n,value:[e]}}return[t,n]})).filter((([e,{value:t,optional:n}])=>{if(null!=t)return!0;if(n)return!1;throw new Error(`missing channel value: ${e}`)}))),this.dx=+f,this.dy=+u,this.marginTop=+p,this.marginRight=+h,this.marginBottom=+m,this.marginLeft=+g,this.clip=maybeClip(A),this.tip=function maybeTip(e){return!0===e?"xy":!1===e||null==e?null:"string"==typeof e?keyword(e,"tip",["x","y","xy"]):e}(w),this.className=options_string(b),"super"===this.facet){if(s||c)throw new Error("super-faceting cannot use fx or fy");for(const e in this.channels){const{scale:n}=t[e];if("x"===n||"y"===n)throw new Error("super-faceting cannot use x or y")}}null!=v&&(this.render=composeRender(v,this.render))}initialize(e,t,n){let r=dataify(this.data);void 0===e&&null!=r&&(e=[options_range(r)]);const a=e;null!=this.transform&&(({facets:e,data:r}=this.transform(r,e,n)),r=dataify(r)),void 0!==e&&(e.original=a);const o=function createChannels(e,t){return Object.fromEntries(Object.entries(e).map((([e,n])=>[e,createChannel(t,n,e)])))}(this.channels,r);return null!=this.sort&&function channelDomain(e,t,n,r,a){const{order:o,reverse:s,reduce:c=!0,limit:l}=a;for(const f in a){if(!Ni.has(f))continue;let{value:u,order:d=o,reverse:p=s,reduce:h=c,limit:m=l}=maybeValue(a[f]);const g=u?.startsWith("-");if(g&&(u=u.slice(1)),d=void 0===d?g!==("width"===u||"height"===u)?descendingGroup:ascendingGroup:maybeOrder(d),null==h||!1===h)continue;const b="fx"===f||"fy"===f?reindexFacetChannel(t,r[f]):findScaleChannel(n,f);if(!b)throw new Error(`missing channel for scale: ${f}`);const A=b.value,[y=0,w=1/0]=isIterable(m)?m:m<0?[m]:[0,m];if(null==u)b.domain=()=>{let e=Array.from(new InternSet(A));return p&&(e=e.reverse()),0===y&&w===1/0||(e=e.slice(y,w)),e};else{const t="data"===u?e:"height"===u?difference(n,"y1","y2"):"width"===u?difference(n,"x1","x2"):values(n,u,"y"===u?"y2":"x"===u?"x2":void 0),r=maybeReduce(!0===h?"max":h,t);b.domain=()=>{let e=rollups(options_range(A),(e=>r.reduceIndex(e,t)),(e=>A[e]));return d&&e.sort(d),p&&e.reverse(),0===y&&w===1/0||(e=e.slice(y,w)),e.map(first)}}}}(r,e,o,t,this.sort),{data:r,facets:e,channels:o}}filter(e,t,n){for(const r in t){const{filter:a=defined_defined}=t[r];if(null!==a){const t=n[r];e=e.filter((e=>a(t[e])))}}return e}project(e,t,n){for(const r in e)if("x"===e[r].scale&&/^x|x$/.test(r)){const a=r.replace(/^x|x$/,"y");a in e&&"y"===e[a].scale&&project(r,a,t,n.projection)}}scale(e,t,n){const r=function channel_valueObject(e,t){const n=Object.fromEntries(Object.entries(e).map((([e,{scale:n,value:r}])=>{const a=null==n?null:t[n];return[e,null==a?r:options_map(r,a)]})));return n.channels=e,n}(e,t);return n.projection&&this.project(e,r,n),r}}function marks(...e){return e.plot=Mark.prototype.plot,e}function composeRender(e,t){if(null==e)return null===t?void 0:t;if(null==t)return null===e?void 0:e;if("function"!=typeof e)throw new TypeError(`invalid render transform: ${e}`);if("function"!=typeof t)throw new TypeError(`invalid render transform: ${t}`);return function(n,r,a,o,s,c){return e.call(this,n,r,a,o,s,((e,n,r,a,o)=>t.call(this,e,n,r,a,o,c)))}}function maybeChannels(e){return Object.fromEntries(Object.entries(maybeNamed(e)).map((([e,t])=>(void 0===(t="string"==typeof t?{value:t,label:e}:maybeValue(t)).filter&&null==t.scale&&(t={...t,filter:null}),[e,t]))))}function mark_withTip(e,t){return!0===e?.tip?{...e,tip:t}:options_isObject(e?.tip)&&void 0===e.tip.pointer?{...e,tip:{...e.tip,pointer:t}}:e}function autoHeight({x:e,y:t,fy:n,fx:r},{projection:a,aspectRatio:o},{width:s,marginTopDefault:c,marginRightDefault:l,marginBottomDefault:f,marginLeftDefault:u}){const d=n&&n.scale.domain().length||1,p=function projectionAspectRatio(e){if("function"==typeof e?.stream)return ao;if(options_isObject(e)){let t,n;if(({domain:t,type:e,...n}=e),null!=t&&null!=e){const r="string"==typeof e?namedProjection(e).type:e,[[a,o],[s,c]]=path(r({...n,width:100,height:100})).bounds(t),l=(c-o)/(s-a);return l&&isFinite(l)?l<.2?.2:l>5?5:l:ao}}if(null!=e){if("function"!=typeof e){const{aspectRatio:t}=namedProjection(e);if(t)return t}return ao}}(a);if(p){const e=(1.1*d-.1)/(1.1*(r?r.scale.domain().length:1)-.1)*p,t=Math.max(.1,Math.min(10,e));return Math.round((s-u-l)*t+c+f)}const h=t?isOrdinalScale(t)?t.scale.domain().length||1:Math.max(7,17/d):1;if(null!=o){if(o=+o,!(isFinite(o)&&o>0))throw new Error(`invalid aspectRatio: ${o}`);const a=aspectRatioLength("y",t)/(aspectRatioLength("x",e)*o),d=r?r.scale.bandwidth():1,p=n?n.scale.bandwidth():1;return(a*(d*(s-u-l)-e.insetLeft-e.insetRight)+t.insetTop+t.insetBottom)/p+c+f}return!(!t&&!n)*Math.max(1,Math.min(60,h*d))*20+30*!!r+60}function aspectRatioLength(e,t){if(!t)throw new Error(`aspectRatio requires ${e} scale`);const{type:n,domain:r}=t;let a;switch(n){case"linear":case"utc":case"time":a=Number;break;case"pow":{const e=t.scale.exponent();a=t=>Math.pow(t,e);break}case"log":a=Math.log;break;case"point":case"band":return r.length;default:throw new Error(`unsupported ${e} scale for aspectRatio: ${n}`)}const[o,s]=extent(r);return Math.abs(a(s)-a(o))}const bo=new WeakMap;function pointerK(e,t,{x:n,y:r,px:a,py:o,maxRadius:s=40,channels:c,render:l,...f}={}){return s=+s,null!=a&&(n??=null,c={...c,px:{value:a,scale:"x"}}),null!=o&&(r??=null,c={...c,py:{value:o,scale:"y"}}),{x:n,y:r,channels:c,...f,render:composeRender((function(n,r,a,o,c,l){const f=(c={...c,pointerSticky:!1}).ownerSVGElement,{data:u}=c.getMarkState(this);let d=bo.get(f);d||bo.set(f,d={sticky:!1,roots:[],renders:[]});let p=d.renders.push(render)-1;const{x:h,y:m,fx:g,fy:b}=r;let A=g?g(n.fx)-o.marginLeft:0,y=b?b(n.fy)-o.marginTop:0;h?.bandwidth&&(A+=h.bandwidth()/2),m?.bandwidth&&(y+=m.bandwidth()/2);const w=null!=n.fi;let v;if(w){let e=d.facetStates;e||(d.facetStates=e=new Map),v=e.get(this),v||e.set(this,v=new Map)}const[x,k]=applyFrameAnchor(this,o),{px:S,py:M}=a,E=S?e=>S[e]:anchorX(a,x),U=M?e=>M[e]:anchorY(a,k);let C,R,T,N;function update(e,t){if(w){if(N&&(N=cancelAnimationFrame(N)),null!=e)return v.set(n.fi,t),void(N=requestAnimationFrame((()=>{N=null;for(const[r,a]of v)if(a<t||a===t&&r<n.fi){e=null;break}render(e)})));v.delete(n.fi)}render(e)}function render(e){if(C===e&&T===d.sticky)return;C=e,T=c.pointerSticky=d.sticky;const t=null==C?[]:[C];w&&(t.fx=n.fx,t.fy=n.fy,t.fi=n.fi);const s=l(t,r,a,o,c);if(R){if(w){const e=R.parentNode,t=R.getAttribute("transform"),n=s.getAttribute("transform");t?s.setAttribute("transform",t):s.removeAttribute("transform"),n?e.setAttribute("transform",n):e.removeAttribute("transform"),s.removeAttribute("aria-label"),s.removeAttribute("aria-description"),s.removeAttribute("aria-hidden")}R.replaceWith(s)}if(d.roots[p]=R=s,!(null==C&&v?.size>1)){const e=null==C?null:options_isArray(u)?u[C]:u.get(C);c.dispatchValue(e)}return s}function pointermove(r){if(d.sticky||"mouse"===r.pointerType&&1===r.buttons)return;let[a,c]=function src_pointer(e,t){if(e=function sourceEvent(e){let t;for(;t=e.sourceEvent;)e=t;return e}(e),void 0===t&&(t=e.currentTarget),t){var n=t.ownerSVGElement||t;if(n.createSVGPoint){var r=n.createSVGPoint();return r.x=e.clientX,r.y=e.clientY,[(r=r.matrixTransform(t.getScreenCTM().inverse())).x,r.y]}if(t.getBoundingClientRect){var a=t.getBoundingClientRect();return[e.clientX-a.left-t.clientLeft,e.clientY-a.top-t.clientTop]}}return[e.pageX,e.pageY]}(r);a-=A,c-=y;const l=a<o.marginLeft||a>o.width-o.marginRight?1:e,f=c<o.marginTop||c>o.height-o.marginBottom?1:t;let u=null,p=s*s;for(const e of n){const t=l*(E(e)-a),n=f*(U(e)-c),r=t*t+n*n;r<=p&&(u=e,p=r)}if(null!=u&&(1!==e||1!==t)){const e=E(u)-a,t=U(u)-c;p=e*e+t*t}update(u,p)}return f.addEventListener("pointerenter",pointermove),f.addEventListener("pointermove",pointermove),f.addEventListener("pointerdown",(function pointerdown(e){"mouse"===e.pointerType&&null!=C&&(d.sticky&&d.roots.some((t=>t?.contains(e.target)))||(d.sticky?(d.sticky=!1,d.renders.forEach((e=>e(null)))):(d.sticky=!0,render(C)),e.stopImmediatePropagation()))})),f.addEventListener("pointerleave",(function pointerleave(e){"mouse"===e.pointerType&&(d.sticky||update(null))})),render(null)}),l)}}function pointer_pointer(e){return pointerK(1,1,e)}function pointerX(e){return pointerK(1,.01,e)}function pointerY(e){return pointerK(.01,1,e)}function anchorX({x1:e,x2:t,x:n=e},r){return e&&t?n=>(e[n]+t[n])/2:n?e=>n[e]:()=>r}function anchorY({y1:e,y2:t,y:n=e},r){return e&&t?n=>(e[n]+t[n])/2:n?e=>n[e]:()=>r}function inferFontVariant(e){return isOrdinalScale(e)&&void 0===e.interval?void 0:"tabular-nums"}function legendRamp(e,t){let{label:n=e.label,tickSize:r=6,width:a=240,height:o=44+r,marginTop:s=18,marginRight:c=0,marginBottom:l=16+r,marginLeft:f=0,style:u,ticks:d=(a-f-c)/64,tickFormat:p,fontVariant:h=inferFontVariant(e),round:m=!0,opacity:g,className:b}=t;const A=context_createContext(t);b=maybeClassName(b),g=maybeNumberChannel(g)[1],null===p&&(p=()=>null);const y=context_create("svg",A).attr("class",`${b}-ramp`).attr("font-family","system-ui, sans-serif").attr("font-size",10).attr("width",a).attr("height",o).attr("viewBox",`0 0 ${a} ${o}`).call((e=>e.append("style").text(`:where(.${b}-ramp) {\n  display: block;\n  height: auto;\n  height: intrinsic;\n  max-width: 100%;\n  overflow: visible;\n}\n:where(.${b}-ramp text) {\n  white-space: pre;\n}`))).call(applyInlineStyles,u);let w,tickAdjust=e=>e.selectAll(".tick line").attr("y1",s+l-o);const v=m?(e,t)=>e.rangeRound(t):(e,t)=>e.range(t),{type:x,domain:k,range:S,interpolate:M,scale:E,pivot:U}=e;if(M){const e=void 0===S?M:piecewise(1===M.length?interpolatePiecewise(M):M,S);w=v(E.copy(),quantize(src_number(f,a-c),Math.min(k.length+(void 0!==U),void 0===S?1/0:S.length)));const t=256,n=A.document.createElement("canvas");n.width=t,n.height=1;const r=n.getContext("2d");for(let n=0,a=t-1;n<t;++n)r.fillStyle=e(n/a),r.fillRect(n,0,1,1);y.append("image").attr("opacity",g).attr("x",f).attr("y",s).attr("width",a-f-c).attr("height",o-s-l).attr("preserveAspectRatio","none").attr("xlink:href",n.toDataURL())}else if("threshold"===x){const e=k,t=void 0===p?e=>e:"string"==typeof p?oe(p):p;w=v(linear_linear().domain([-1,S.length-1]),[f,a-c]),y.append("g").attr("fill-opacity",g).selectAll().data(S).enter().append("rect").attr("x",((e,t)=>w(t-1))).attr("y",s).attr("width",((e,t)=>w(t)-w(t-1))).attr("height",o-s-l).attr("fill",(e=>e)),d=options_map(e,((e,t)=>t)),p=n=>t(e[n],n)}else w=v(band().domain(k),[f,a-c]),y.append("g").attr("fill-opacity",g).selectAll().data(k).enter().append("rect").attr("x",w).attr("y",s).attr("width",Math.max(0,w.bandwidth()-1)).attr("height",o-s-l).attr("fill",E),tickAdjust=()=>{};return y.append("g").attr("transform",`translate(0,${o-l})`).call(function axisBottom(e){return axis(3,e)}(w).ticks(Array.isArray(d)?null:d,"string"==typeof p?p:void 0).tickFormat("function"==typeof p?p:void 0).tickSize(r).tickValues(Array.isArray(d)?d:null)).attr("font-size",null).attr("font-family",null).attr("font-variant",impliedString(h,"normal")).call(tickAdjust).call((e=>e.select(".domain").remove())),void 0!==n&&y.append("text").attr("x",f).attr("y",s-6).attr("fill","currentColor").attr("font-weight","bold").text(n),y.node()}const Ao=Math.PI/180;function markers(e,{marker:t,markerStart:n=t,markerMid:r=t,markerEnd:a=t}={}){e.markerStart=maybeMarker(n),e.markerMid=maybeMarker(r),e.markerEnd=maybeMarker(a)}function maybeMarker(e){if(null==e||!1===e)return null;if(!0===e)return markerCircleFill;if("function"==typeof e)return e;switch(`${e}`.toLowerCase()){case"none":return null;case"arrow":return markerArrow("auto");case"arrow-reverse":return markerArrow("auto-start-reverse");case"dot":return markerDot;case"circle":case"circle-fill":return markerCircleFill;case"circle-stroke":return markerCircleStroke;case"tick":return markerTick("auto");case"tick-x":return markerTick(90);case"tick-y":return markerTick(0)}throw new Error(`invalid marker: ${e}`)}function markerArrow(e){return(t,n)=>context_create("svg:marker",n).attr("viewBox","-5 -5 10 10").attr("markerWidth",6.67).attr("markerHeight",6.67).attr("orient",e).attr("fill","none").attr("stroke",t).attr("stroke-width",1.5).attr("stroke-linecap","round").attr("stroke-linejoin","round").call((e=>e.append("path").attr("d","M-1.5,-3l3,3l-3,3"))).node()}function markerDot(e,t){return context_create("svg:marker",t).attr("viewBox","-5 -5 10 10").attr("markerWidth",6.67).attr("markerHeight",6.67).attr("fill",e).attr("stroke","none").call((e=>e.append("circle").attr("r",2.5))).node()}function markerCircleFill(e,t){return context_create("svg:marker",t).attr("viewBox","-5 -5 10 10").attr("markerWidth",6.67).attr("markerHeight",6.67).attr("fill",e).attr("stroke","var(--plot-background)").attr("stroke-width",1.5).call((e=>e.append("circle").attr("r",3))).node()}function markerCircleStroke(e,t){return context_create("svg:marker",t).attr("viewBox","-5 -5 10 10").attr("markerWidth",6.67).attr("markerHeight",6.67).attr("fill","var(--plot-background)").attr("stroke",e).attr("stroke-width",1.5).call((e=>e.append("circle").attr("r",3))).node()}function markerTick(e){return(t,n)=>context_create("svg:marker",n).attr("viewBox","-3 -3 6 6").attr("markerWidth",6).attr("markerHeight",6).attr("orient",e).attr("stroke",t).call((e=>e.append("path").attr("d","M0,-3v6"))).node()}let yo=0;function applyMarkers(e,t,{stroke:n},r){return applyMarkersColor(e,t,n&&(e=>n[e]),null,r)}const wo=1,vo=2;function applyMarkersColor(e,{markerStart:t,markerMid:n,markerEnd:r,stroke:a},o=()=>a,s,c){if(!t&&!n&&!r)return;const l=new Map,f=s&&function getGroupedOrientation(e,t){const n=new Uint8Array(t.length),r=e.data().filter((e=>e.length>1)),a=r.length;for(let e=0,o=so;e<a;++e){const a=r[e];if(a.length>1){const e=a[0];o!==(o=options_keyof(t[e]))&&(n[e]|=wo)}}for(let e=a-1,o=so;e>=0;--e){const a=r[e];if(a.length>1){const e=a[0];o!==(o=options_keyof(t[e]))&&(n[e]|=vo)}}return([e])=>n[e]}(e,s);function applyMarker(e,t,n){return function(r){if(n&&!n(r))return;const a=o(r);let s=l.get(t);s||l.set(t,s=new Map);let f=s.get(a);if(!f){const e=this.parentNode.insertBefore(t(a,c),this),n="plot-marker-"+ ++yo;e.setAttribute("id",n),s.set(a,f=`url(#${n})`)}this.setAttribute(e,f)}}t&&e.each(applyMarker("marker-start",t,f&&(e=>f(e)&wo))),n&&f&&e.each(applyMarker("marker-start",n,(e=>!(f(e)&wo)))),n&&e.each(applyMarker("marker-mid",n)),r&&e.each(applyMarker("marker-end",r,f&&(e=>f(e)&vo)))}function inset_maybeInsetX({inset:e,insetLeft:t,insetRight:n,...r}={}){return[t,n]=maybeInset(e,t,n),{inset:e,insetLeft:t,insetRight:n,...r}}function inset_maybeInsetY({inset:e,insetTop:t,insetBottom:n,...r}={}){return[t,n]=maybeInset(e,t,n),{inset:e,insetTop:t,insetBottom:n,...r}}function maybeInset(e,t,n){return void 0===e&&void 0===t&&void 0===n?fo?[1,0]:[.5,.5]:[t,n]}function maybeIntervalValue(e,{interval:t}){return(e={...maybeValue(e)}).interval=maybeInterval(void 0===e.interval?t:e.interval),e}function maybeIntervalK(e,t,n,r){const{[e]:a,[`${e}1`]:o,[`${e}2`]:s}=n,{value:c,interval:l}=maybeIntervalValue(a,n);if(null==c||null==l&&!r)return n;const f=options_labelof(a);if(null==l){let t;const a={transform:e=>t||(t=options_valueof(e,c)),label:f};return{...n,[e]:void 0,[`${e}1`]:void 0===o?a:o,[`${e}2`]:void 0!==s||o===s&&r?s:a}}let u,d;function transform(e){return void 0!==d&&e===u?d:d=options_map(options_valueof(u=e,c),(e=>l.floor(e)))}return t({...n,[e]:void 0,[`${e}1`]:void 0===o?{transform,label:f}:o,[`${e}2`]:void 0===s?{transform:e=>transform(e).map((e=>l.offset(e))),label:f}:s})}function maybeIntervalMidK(e,t,n){const{[e]:r}=n,{value:a,interval:o}=maybeIntervalValue(r,n);return null==a||null==o?n:t({...n,[e]:{label:options_labelof(r),transform:e=>{const t=options_map(options_valueof(e,a),(e=>o.floor(e))),n=t.map((e=>o.offset(e)));return t.map(isTemporal(t)?(e,t)=>null==e||isNaN(e=+e)||null==(t=n[t])||isNaN(t=+t)?void 0:new Date((e+t)/2):(e,t)=>null==e||null==(t=n[t])?NaN:(+e+ +t)/2)}}})}function maybeIntervalY(e={}){return maybeIntervalK("y",inset_maybeInsetY,e)}const xo={ariaLabel:"rule",fill:null,stroke:"currentColor"};class RuleX extends Mark{constructor(e,t={}){const{x:n,y1:r,y2:a,inset:o=0,insetTop:s=o,insetBottom:c=o}=t;super(e,{x:{value:n,scale:"x",optional:!0},y1:{value:r,scale:"y",optional:!0},y2:{value:a,scale:"y",optional:!0}},mark_withTip(t,"x"),xo),this.insetTop=options_number(s),this.insetBottom=options_number(c),markers(this,t)}render(e,t,n,r,a){const{x:o,y:s}=t,{x:c,y1:l,y2:f}=n,{width:u,height:d,marginTop:p,marginRight:h,marginLeft:m,marginBottom:g}=r,{insetTop:b,insetBottom:A}=this;return context_create("svg:g",a).call(applyIndirectStyles,this,r,a).call(applyTransform,this,{x:c&&o},fo,0).call((t=>t.selectAll().data(e).enter().append("line").call(applyDirectStyles,this).attr("x1",c?e=>c[e]:(m+u-h)/2).attr("x2",c?e=>c[e]:(m+u-h)/2).attr("y1",l&&!isCollapsed(s)?e=>l[e]+b:p+b).attr("y2",f&&!isCollapsed(s)?s.bandwidth?e=>f[e]+s.bandwidth()-A:e=>f[e]-A:d-g-A).call(applyChannelStyles,this,n).call(applyMarkers,this,n,a))).node()}}class RuleY extends Mark{constructor(e,t={}){const{x1:n,x2:r,y:a,inset:o=0,insetRight:s=o,insetLeft:c=o}=t;super(e,{y:{value:a,scale:"y",optional:!0},x1:{value:n,scale:"x",optional:!0},x2:{value:r,scale:"x",optional:!0}},mark_withTip(t,"y"),xo),this.insetRight=options_number(s),this.insetLeft=options_number(c),markers(this,t)}render(e,t,n,r,a){const{x:o,y:s}=t,{y:c,x1:l,x2:f}=n,{width:u,height:d,marginTop:p,marginRight:h,marginLeft:m,marginBottom:g}=r,{insetLeft:b,insetRight:A}=this;return context_create("svg:g",a).call(applyIndirectStyles,this,r,a).call(applyTransform,this,{y:c&&s},0,fo).call((t=>t.selectAll().data(e).enter().append("line").call(applyDirectStyles,this).attr("x1",l&&!isCollapsed(o)?e=>l[e]+b:m+b).attr("x2",f&&!isCollapsed(o)?o.bandwidth?e=>f[e]+o.bandwidth()-A:e=>f[e]-A:u-h-A).attr("y1",c?e=>c[e]:(p+d-g)/2).attr("y2",c?e=>c[e]:(p+d-g)/2).call(applyChannelStyles,this,n).call(applyMarkers,this,n,a))).node()}}function ruleX(e,t){let{x:n=xi,y:r,y1:a,y2:o,...s}=maybeIntervalY(t);return[a,o]=maybeOptionalZero(r,a,o),new RuleX(e,{...s,x:n,y1:a,y2:o})}function ruleY(e,t){let{y:n=xi,x:r,x1:a,x2:o,...s}=function interval_maybeIntervalX(e={}){return maybeIntervalK("x",inset_maybeInsetX,e)}(t);return[a,o]=maybeOptionalZero(r,a,o),new RuleY(e,{...s,y:n,x1:a,x2:o})}function maybeOptionalZero(e,t,n){if(null==e){if(void 0===t){if(void 0!==n)return[0,n]}else if(void 0===n)return[0,t]}else{if(void 0===t)return void 0===n?[0,e]:[e,n];if(void 0===n)return[e,t]}return[t,n]}function template(e,...t){let n=t.length;for(let r=0,a=!0;r<n;++r)"function"!=typeof t[r]&&(a&&(e=e.slice(),a=!1),e.splice(r,2,e[r]+t[r]+e[r+1]),t.splice(r,1),--r,--n);return r=>{let a=e[0];for(let o=0;o<n;++o)a+=t[o](r)+e[o+1];return a}}const ko={ariaLabel:"text",strokeLinejoin:"round",strokeWidth:3,paintOrder:"stroke"};class Text extends Mark{constructor(e,t={}){const{x:n,y:r,text:a=(isIterable(e)&&isTextual(e)?xi:vi),frameAnchor:o,textAnchor:s=(/right$/i.test(o)?"end":/left$/i.test(o)?"start":"middle"),lineAnchor:c=(/^top/i.test(o)?"top":/^bottom/i.test(o)?"bottom":"middle"),lineHeight:l=1,lineWidth:f=1/0,textOverflow:u,monospace:d,fontFamily:p=(d?"ui-monospace, monospace":void 0),fontSize:h,fontStyle:m,fontVariant:g,fontWeight:b,rotate:A}=t,[y,w]=maybeNumberChannel(A,0),[v,x]=function maybeFontSizeChannel(e){return null==e||"number"==typeof e?[void 0,e]:"string"!=typeof e?[e,void 0]:(e=e.trim().toLowerCase(),So.has(e)||/^[+-]?\d*\.?\d+(e[+-]?\d+)?(\w*|%)$/.test(e)?[void 0,e]:[e,void 0])}(h);var k;if(super(e,{x:{value:n,scale:"x",optional:!0},y:{value:r,scale:"y",optional:!0},fontSize:{value:v,optional:!0},rotate:{value:(k=y,null==k?null:{transform:e=>options_valueof(e,k,Float64Array),label:options_labelof(k)}),optional:!0},text:{value:a,filter:defined_nonempty,optional:!0}},t,ko),this.rotate=w,this.textAnchor=impliedString(s,"middle"),this.lineAnchor=keyword(c,"lineAnchor",["top","middle","bottom"]),this.lineHeight=+l,this.lineWidth=+f,this.textOverflow=maybeTextOverflow(u),this.monospace=!!d,this.fontFamily=options_string(p),this.fontSize=x,this.fontStyle=options_string(m),this.fontVariant=options_string(g),this.fontWeight=options_string(b),this.frameAnchor=maybeFrameAnchor(o),!(this.lineWidth>=0))throw new Error(`invalid lineWidth: ${f}`);this.splitLines=splitter(this),this.clipLine=clipper(this)}render(e,t,n,r,a){const{x:o,y:s}=t,{x:c,y:l,rotate:f,text:u,title:d,fontSize:p}=n,{rotate:h}=this,[m,g]=applyFrameAnchor(this,r);return context_create("svg:g",a).call(applyIndirectStyles,this,r,a).call(applyIndirectTextStyles,this,u,r).call(applyTransform,this,{x:c&&o,y:l&&s}).call((t=>t.selectAll().data(e).enter().append("text").call(applyDirectStyles,this).call(applyMultilineText,this,u,d).attr("transform",template`translate(${c?e=>c[e]:m},${l?e=>l[e]:g})${f?e=>` rotate(${f[e]})`:h?` rotate(${h})`:""}`).call(applyAttr,"font-size",p&&(e=>p[e])).call(applyChannelStyles,this,n))).node()}}function maybeTextOverflow(e){return null==e?null:keyword(e,"textOverflow",["clip","ellipsis","clip-start","clip-end","ellipsis-start","ellipsis-middle","ellipsis-end"]).replace(/^(clip|ellipsis)$/,"$1-end")}function applyMultilineText(e,t,n,r){if(!n)return;const{lineAnchor:a,lineHeight:o,textOverflow:s,splitLines:c,clipLine:l}=t;e.each((function(e){const t=c(lo(n[e])??"").map(l),u=t.length,d="top"===a?.71:"bottom"===a?1-u:(164-100*u)/200;if(u>1){let e=0;for(let n=0;n<u;++n){if(++e,!t[n])continue;const r=this.ownerDocument.createElementNS(f.svg,"tspan");r.setAttribute("x",0),n===e-1?r.setAttribute("y",(d+n)*o+"em"):r.setAttribute("dy",e*o+"em"),r.textContent=t[n],this.appendChild(r),e=0}}else d&&this.setAttribute("y",d*o+"em"),this.textContent=t[0];if(s&&!r&&t[0]!==n[e]){const t=this.ownerDocument.createElementNS(f.svg,"title");t.textContent=n[e],this.appendChild(t)}}))}function text_text(e,{x:t,y:n,...r}={}){return void 0===r.frameAnchor&&([t,n]=options_maybeTuple(t,n)),new Text(e,{...r,x:t,y:n})}function textX(e,{x:t=xi,...n}={}){return new Text(e,function maybeIntervalMidY(e={}){return maybeIntervalMidK("y",inset_maybeInsetY,e)}({...n,x:t}))}function textY(e,{y:t=xi,...n}={}){return new Text(e,function maybeIntervalMidX(e={}){return maybeIntervalMidK("x",inset_maybeInsetX,e)}({...n,y:t}))}function applyIndirectTextStyles(e,t,n){applyAttr(e,"text-anchor",t.textAnchor),applyAttr(e,"font-family",t.fontFamily),applyAttr(e,"font-size",t.fontSize),applyAttr(e,"font-style",t.fontStyle),applyAttr(e,"font-variant",void 0===t.fontVariant?function text_inferFontVariant(e){return e&&(function isNumeric(e){for(const t of e)if(null!=t)return"number"==typeof t}(e)||isTemporal(e))?"tabular-nums":void 0}(n):t.fontVariant),applyAttr(e,"font-weight",t.fontWeight)}const So=new Set(["inherit","initial","revert","unset","xx-small","x-small","small","medium","large","x-large","xx-large","xxx-large","larger","smaller"]);function lineWrap(e,t,n){const r=[];let a,o=0;for(const[s,c,l]of function*lineBreaks(e){let t=0,n=0;const r=e.length;for(;n<r;){let r=1;switch(e[n]){case"­":case"-":++n,yield[t,n,!1],t=n;break;case" ":for(yield[t,n,!1];" "===e[++n];);t=n;break;case"\r":"\n"===e[n+1]&&++r;case"\n":yield[t,n,!0],n+=r,t=n;break;default:++n}}yield[t,n,!0]}(e))void 0===a&&(a=s),o>a&&n(e,a,c)>t&&(r.push(e.slice(a,o)+("­"===e[o-1]?"-":"")),a=s),l?(r.push(e.slice(a,c)),a=void 0):o=c;return r}const Mo={a:56,b:63,c:57,d:63,e:58,f:37,g:62,h:60,i:26,j:26,k:55,l:26,m:88,n:60,o:60,p:62,q:62,r:39,s:54,t:38,u:60,v:55,w:79,x:54,y:55,z:55,A:69,B:67,C:73,D:74,E:61,F:58,G:76,H:75,I:28,J:55,K:67,L:58,M:89,N:75,O:78,P:65,Q:78,R:67,S:65,T:65,U:75,V:69,W:98,X:69,Y:67,Z:67,0:64,1:48,2:62,3:64,4:66,5:63,6:65,7:58,8:65,9:65," ":29,"!":32,'"':49,"'":31,"(":39,")":39,",":31,"-":48,".":31,"/":32,":":31,";":31,"?":52,"‘":31,"’":31,"“":47,"”":47,"…":82};function defaultWidth(e,t=0,n=e.length){let r=0;for(let a=t;a<n;a=readCharacter(e,a))r+=Mo[e[a]]??(isPictographic(e,a)?120:Mo.e);return r}function monospaceWidth(e,t=0,n=e.length){let r=0;for(let a=t;a<n;a=readCharacter(e,a))r+=isPictographic(e,a)?126:63;return r}function splitter({monospace:e,lineWidth:t,textOverflow:n}){if(null!=n||t==1/0)return e=>e.split(/\r\n?|\n/g);const r=e?monospaceWidth:defaultWidth,a=100*t;return e=>lineWrap(e,a,r)}function clipper({monospace:e,lineWidth:t,textOverflow:n}){if(null==n||t==1/0)return e=>e;const r=e?monospaceWidth:defaultWidth,a=100*t;switch(n){case"clip-start":return e=>clipStart(e,a,r,"");case"clip-end":return e=>clipEnd(e,a,r,"");case"ellipsis-start":return e=>clipStart(e,a,r,Eo);case"ellipsis-middle":return e=>function clipMiddle(e,t,n,r){e=e.trim();const a=n(e);if(a<=t)return e;const o=n(r)/2,[s,c]=cut(e,t/2,n,o),[l]=cut(e,a-t/2-c+o,n,-o);return l<0?r:e.slice(0,s).trimEnd()+r+e.slice(readCharacter(e,l)).trimStart()}(e,a,r,Eo);case"ellipsis-end":return e=>clipEnd(e,a,r,Eo)}}const Eo="…";function cut(e,t,n,r){const a=[];let o=0;for(let s=0,c=0,l=e.length;s<l;s=c){c=readCharacter(e,s);const l=n(e,s,c);if(o+l>t){for(o+=r;o>t&&s>0;)c=s,s=a.pop(),o-=n(e,s,c);return[s,t-o]}o+=l,a.push(s)}return[-1,0]}function clipEnd(e,t,n,r){e=e.trim();const a=n(r),[o]=cut(e,t,n,a);return o<0?e:e.slice(0,o).trimEnd()+r}function clipStart(e,t,n,r){const a=n(e=e.trim());if(a<=t)return e;const o=n(r),[s]=cut(e,a-t+o,n,-o);return s<0?r:r+e.slice(readCharacter(e,s)).trimStart()}const Uo=/[\p{Combining_Mark}\p{Emoji_Modifier}]+/uy,Co=/\p{Extended_Pictographic}/uy;function readCharacter(e,t){return t+=function isSurrogatePair(e,t){const n=e.charCodeAt(t);if(n>=55296&&n<56320){const n=e.charCodeAt(t+1);return n>=56320&&n<57344}return!1}(e,t)?2:1,function isCombiner(e,t){return!isAscii(e,t)&&(Uo.lastIndex=t,Uo.test(e))}(e,t)&&(t=Uo.lastIndex),function isZeroWidthJoiner(e,t){return 8205===e.charCodeAt(t)}(e,t)?readCharacter(e,t+1):t}function isAscii(e,t){return e.charCodeAt(t)<128}function isPictographic(e,t){return!isAscii(e,t)&&(Co.lastIndex=t,Co.test(e))}const Ro={ariaLabel:"vector",fill:"none",stroke:"currentColor",strokeWidth:1.5,strokeLinejoin:"round",strokeLinecap:"round"},To=3.5,No=5*To,Io={draw(e,t,n){const r=t*n/No;e.moveTo(0,0),e.lineTo(0,-t),e.moveTo(-r,r-t),e.lineTo(0,-t),e.lineTo(r,r-t)}},Lo={draw(e,t,n){e.moveTo(-n,0),e.lineTo(0,-t),e.lineTo(n,0)}},Vo=new Map([["arrow",Io],["spike",Lo]]);class Vector extends Mark{constructor(e,t={}){const{x:n,y:r,r:a=To,length:o,rotate:s,shape:c=Io,anchor:l="middle",frameAnchor:f}=t,[u,d]=maybeNumberChannel(o,12),[p,h]=maybeNumberChannel(s,0);super(e,{x:{value:n,scale:"x",optional:!0},y:{value:r,scale:"y",optional:!0},length:{value:u,scale:"length",optional:!0},rotate:{value:p,optional:!0}},t,Ro),this.r=+a,this.length=d,this.rotate=h,this.shape=function maybeShape(e){if(function isShapeObject(e){return e&&"function"==typeof e.draw}(e))return e;const t=Vo.get(`${e}`.toLowerCase());if(t)return t;throw new Error(`invalid shape: ${e}`)}(c),this.anchor=keyword(l,"anchor",["start","middle","end"]),this.frameAnchor=maybeFrameAnchor(f)}render(e,t,n,r,a){const{x:o,y:s}=t,{x:c,y:l,length:f,rotate:u}=n,{length:d,rotate:p,anchor:h,shape:m,r:g}=this,[b,A]=applyFrameAnchor(this,r);return context_create("svg:g",a).call(applyIndirectStyles,this,r,a).call(applyTransform,this,{x:c&&o,y:l&&s}).call((t=>t.selectAll().data(e).enter().append("path").call(applyDirectStyles,this).attr("transform",template`translate(${c?e=>c[e]:b},${l?e=>l[e]:A})${u?e=>` rotate(${u[e]})`:p?` rotate(${p})`:""}${"start"===h?"":"end"===h?f?e=>` translate(0,${f[e]})`:` translate(0,${d})`:f?e=>` translate(0,${f[e]/2})`:` translate(0,${d/2})`}`).attr("d",f?e=>{const t=pathRound();return m.draw(t,f[e],g),t}:(()=>{const e=pathRound();return m.draw(e,d,g),e})()).call(applyChannelStyles,this,n))).node()}}function vectorX(e,t={}){const{x:n=xi,...r}=t;return new Vector(e,{...r,x:n})}function vectorY(e,t={}){const{y:n=xi,...r}=t;return new Vector(e,{...r,y:n})}function maybeData(e,t){return arguments.length<2&&!isIterable(e)&&(t=e,e=null),void 0===t&&(t={}),[e,t]}function axis_maybeAnchor({anchor:e}={},t){return void 0===e?t[0]:keyword(e,"anchor",t)}function axis_anchorY(e){return axis_maybeAnchor(e,["left","right"])}function anchorFy(e){return axis_maybeAnchor(e,["right","left"])}function axis_anchorX(e){return axis_maybeAnchor(e,["bottom","top"])}function anchorFx(e){return axis_maybeAnchor(e,["top","bottom"])}function axisY(){const[e,t]=maybeData(...arguments);return axisKy("y",axis_anchorY(t),e,t)}function axisFy(){const[e,t]=maybeData(...arguments);return axisKy("fy",anchorFy(t),e,t)}function axisX(){const[e,t]=maybeData(...arguments);return axisKx("x",axis_anchorX(t),e,t)}function axisFx(){const[e,t]=maybeData(...arguments);return axisKx("fx",anchorFx(t),e,t)}function axisKy(e,t,n,{color:r="currentColor",opacity:a=1,stroke:o=r,strokeOpacity:s=a,strokeWidth:c=1,fill:l=r,fillOpacity:f=a,textAnchor:u,textStroke:d,textStrokeOpacity:p,textStrokeWidth:h,tickSize:m=("y"===e?6:0),tickPadding:g,tickRotate:b,x:A,margin:y,marginTop:w=(void 0===y?20:y),marginRight:v=(void 0===y?"right"===t?40:0:y),marginBottom:x=(void 0===y?20:y),marginLeft:k=(void 0===y?"left"===t?40:0:y),label:S,labelAnchor:M,labelArrow:E,labelOffset:U,ariaLabel:C=`${e}-axis`,...R}){return m=options_number(m),g=options_number(g),b=options_number(b),void 0!==M&&(M=keyword(M,"labelAnchor",["center","top","bottom"])),E=maybeLabelArrow(E),marks(m&&!isNoneish(o)?function axisTickKy(e,t,n,{strokeWidth:r=1,strokeLinecap:a=null,strokeLinejoin:o=null,facetAnchor:s=t+("y"===e?"-empty":""),frameAnchor:c=t,tickSize:l,inset:f=0,insetLeft:u=f,insetRight:d=f,dx:p=0,y:h=("y"===e?void 0:null),ariaLabel:m,...g}){return axisMark(vectorY,e,n,{ariaLabel:`${m} tick`,ariaHidden:!0},{strokeWidth:r,strokeLinecap:a,strokeLinejoin:o,facetAnchor:s,frameAnchor:c,y:h,...g,dx:"left"===t?+p-fo+ +u:+p+fo-d,anchor:"start",length:l,shape:"left"===t?qo:Fo})}(e,t,n,{stroke:o,strokeOpacity:s,strokeWidth:c,tickSize:m,tickPadding:g,tickRotate:b,x:A,ariaLabel:C,...R}):null,isNoneish(l)?null:function axisTextKy(e,t,n,{facetAnchor:r=t+("y"===e?"-empty":""),frameAnchor:a=t,tickSize:o,tickRotate:s=0,tickPadding:c=Math.max(3,9-o)+(Math.abs(s)>60?4*Math.cos(s*Ao):0),text:l,textAnchor:f=(Math.abs(s)>60?"middle":"left"===t?"end":"start"),lineAnchor:u=(s>60?"top":s<-60?"bottom":"middle"),fontVariant:d,inset:p=0,insetLeft:h=p,insetRight:m=p,dx:g=0,ariaLabel:b,y:A=("y"===e?void 0:null),...y}){return axisMark(textY,e,n,{ariaLabel:`${b} tick label`},{facetAnchor:r,frameAnchor:a,text:l,textAnchor:f,lineAnchor:u,fontVariant:d,rotate:s,y:A,...y,dx:"left"===t?+g-o-c+ +h:+g+ +o+ +c-m},(function(e,n,r,a,o){void 0===d&&(this.fontVariant=axis_inferFontVariant(e)),void 0===l&&(o.text=inferTextChannel(e,n,r,a,t))}))}(e,t,n,{fill:l,fillOpacity:f,stroke:d,strokeOpacity:p,strokeWidth:h,textAnchor:u,tickSize:m,tickPadding:g,tickRotate:b,x:A,marginTop:w,marginRight:v,marginBottom:x,marginLeft:k,ariaLabel:C,...R}),isNoneish(l)||null===S?null:text_text([],labelOptions({fill:l,fillOpacity:f,...R},(function(n,r,a,o,s){const c=o[e],{marginTop:l,marginRight:f,marginBottom:u,marginLeft:d}="y"===e&&s.inset||s,p=M??(c.bandwidth?"center":"top"),h=U??("right"===t?f:d)-3;return"center"===p?(this.textAnchor=void 0,this.lineAnchor="right"===t?"bottom":"top",this.frameAnchor=t,this.rotate=-90):(this.textAnchor="right"===t?"end":"start",this.lineAnchor=p,this.frameAnchor=`${p}-${t}`,this.rotate=0),this.dy="top"===p?3-l:"bottom"===p?u-3:0,this.dx="right"===t?h:-h,this.ariaLabel=`${C} label`,{facets:[[0]],channels:{text:{value:[formatAxisLabel(e,c,{anchor:t,label:S,labelAnchor:p,labelArrow:E})]}}}}))))}function axisKx(e,t,n,{color:r="currentColor",opacity:a=1,stroke:o=r,strokeOpacity:s=a,strokeWidth:c=1,fill:l=r,fillOpacity:f=a,textAnchor:u,textStroke:d,textStrokeOpacity:p,textStrokeWidth:h,tickSize:m=("x"===e?6:0),tickPadding:g,tickRotate:b,y:A,margin:y,marginTop:w=(void 0===y?"top"===t?30:0:y),marginRight:v=(void 0===y?20:y),marginBottom:x=(void 0===y?"bottom"===t?30:0:y),marginLeft:k=(void 0===y?20:y),label:S,labelAnchor:M,labelArrow:E,labelOffset:U,ariaLabel:C=`${e}-axis`,...R}){return m=options_number(m),g=options_number(g),b=options_number(b),void 0!==M&&(M=keyword(M,"labelAnchor",["center","left","right"])),E=maybeLabelArrow(E),marks(m&&!isNoneish(o)?function axisTickKx(e,t,n,{strokeWidth:r=1,strokeLinecap:a=null,strokeLinejoin:o=null,facetAnchor:s=t+("x"===e?"-empty":""),frameAnchor:c=t,tickSize:l,inset:f=0,insetTop:u=f,insetBottom:d=f,dy:p=0,x:h=("x"===e?void 0:null),ariaLabel:m,...g}){return axisMark(vectorX,e,n,{ariaLabel:`${m} tick`,ariaHidden:!0},{strokeWidth:r,strokeLinejoin:o,strokeLinecap:a,facetAnchor:s,frameAnchor:c,x:h,...g,dy:"bottom"===t?+p-fo-d:+p+fo+ +u,anchor:"start",length:l,shape:"bottom"===t?Bo:Wo})}(e,t,n,{stroke:o,strokeOpacity:s,strokeWidth:c,tickSize:m,tickPadding:g,tickRotate:b,y:A,ariaLabel:C,...R}):null,isNoneish(l)?null:function axisTextKx(e,t,n,{facetAnchor:r=t+("x"===e?"-empty":""),frameAnchor:a=t,tickSize:o,tickRotate:s=0,tickPadding:c=Math.max(3,9-o)+(Math.abs(s)>=10?4*Math.cos(s*Ao):0),text:l,textAnchor:f=(Math.abs(s)>=10?s<0^"bottom"===t?"start":"end":"middle"),lineAnchor:u=(Math.abs(s)>=10?"middle":"bottom"===t?"top":"bottom"),fontVariant:d,inset:p=0,insetTop:h=p,insetBottom:m=p,dy:g=0,x:b=("x"===e?void 0:null),ariaLabel:A,...y}){return axisMark(textX,e,n,{ariaLabel:`${A} tick label`},{facetAnchor:r,frameAnchor:a,text:void 0===l?null:l,textAnchor:f,lineAnchor:u,fontVariant:d,rotate:s,x:b,...y,dy:"bottom"===t?+g+ +o+ +c-m:+g-o-c+ +h},(function(e,n,r,a,o){void 0===d&&(this.fontVariant=axis_inferFontVariant(e)),void 0===l&&(o.text=inferTextChannel(e,n,r,a,t))}))}(e,t,n,{fill:l,fillOpacity:f,stroke:d,strokeOpacity:p,strokeWidth:h,textAnchor:u,tickSize:m,tickPadding:g,tickRotate:b,y:A,marginTop:w,marginRight:v,marginBottom:x,marginLeft:k,ariaLabel:C,...R}),isNoneish(l)||null===S?null:text_text([],labelOptions({fill:l,fillOpacity:f,...R},(function(n,r,a,o,s){const c=o[e],{marginTop:l,marginRight:f,marginBottom:u,marginLeft:d}="x"===e&&s.inset||s,p=M??(c.bandwidth?"center":"right"),h=U??("top"===t?l:u)-3;return"center"===p?(this.frameAnchor=t,this.textAnchor=void 0):(this.frameAnchor=`${t}-${p}`,this.textAnchor="right"===p?"end":"start"),this.lineAnchor=t,this.dy="top"===t?-h:h,this.dx="right"===p?f-3:"left"===p?3-d:0,this.ariaLabel=`${C} label`,{facets:[[0]],channels:{text:{value:[formatAxisLabel(e,c,{anchor:t,label:S,labelAnchor:p,labelArrow:E})]}}}}))))}function gridY(){const[e,t]=maybeData(...arguments);return gridKy("y",axis_anchorY(t),e,t)}function gridFy(){const[e,t]=maybeData(...arguments);return gridKy("fy",anchorFy(t),e,t)}function gridX(){const[e,t]=maybeData(...arguments);return gridKx("x",axis_anchorX(t),e,t)}function gridFx(){const[e,t]=maybeData(...arguments);return gridKx("fx",anchorFx(t),e,t)}function gridKy(e,t,n,{y:r=("y"===e?void 0:null),x:a=null,x1:o=("left"===t?a:null),x2:s=("right"===t?a:null),ariaLabel:c=`${e}-grid`,ariaHidden:l=!0,...f}){return axisMark(ruleY,e,n,{ariaLabel:c,ariaHidden:l},{y:r,x1:o,x2:s,...gridDefaults(f)})}function gridKx(e,t,n,{x:r=("x"===e?void 0:null),y:a=null,y1:o=("top"===t?a:null),y2:s=("bottom"===t?a:null),ariaLabel:c=`${e}-grid`,ariaHidden:l=!0,...f}){return axisMark(ruleX,e,n,{ariaLabel:c,ariaHidden:l},{x:r,y1:o,y2:s,...gridDefaults(f)})}function gridDefaults({color:e="currentColor",opacity:t=.1,stroke:n=e,strokeOpacity:r=t,strokeWidth:a=1,...o}){return{stroke:n,strokeOpacity:r,strokeWidth:a,...o}}function labelOptions({fill:e,fillOpacity:t,fontFamily:n,fontSize:r,fontStyle:a,fontVariant:o,fontWeight:s,monospace:c,pointerEvents:l,shapeRendering:f,clip:u=!1},d){return[,e]=options_maybeColorChannel(e),[,t]=maybeNumberChannel(t),{facet:"super",x:null,y:null,fill:e,fillOpacity:t,fontFamily:n,fontSize:r,fontStyle:a,fontVariant:o,fontWeight:s,monospace:c,pointerEvents:l,shapeRendering:f,clip:u,initializer:d}}function axisMark(e,t,n,r,a,o){let s;const c=initializer(a).initializer,l=e(n,initializer({...a,initializer:function axisInitializer(e,n,r,c,l,f){const u=null==e&&("fx"===t||"fy"===t),{[t]:d}=c;if(!d)throw new Error(`missing scale: ${t}`);const p=d.domain();let{interval:h,ticks:m,tickFormat:g,tickSpacing:b=("x"===t?80:35)}=a;if("string"==typeof m&&hasTemporalDomain(d)&&(h=m,m=void 0),void 0===m&&(m=maybeRangeInterval(h,d.type)??function inferTickCount(e,t){const[n,r]=extent(e.range());return(r-n)/t}(d,b)),null==e){if(isIterable(m))e=options_arrayify(m);else if(isInterval(m))e=inclusiveRange(m,...extent(p));else if(d.interval){let t=d.interval;if(d.ticks){const[n,r]=extent(p);t=generalizeTimeInterval(t,(r-n)/t[di]/m)??t,e=inclusiveRange(t,n,r)}else{t=generalizeTimeInterval(t,(e=p).length/m)??t,t!==d.interval&&(e=inclusiveRange(t,...extent(e)))}if(t===d.interval){const t=Math.round(e.length/m);t>1&&(e=e.filter(((e,n)=>n%t==0)))}}else e=d.ticks?d.ticks(m):p;if(!d.ticks&&e.length&&e!==p){const n=new InternSet(p);(e=e.filter((e=>n.has(e)))).length||warnings_warn(`Warning: the ${t}-axis ticks appear to not align with the scale domain, resulting in no ticks. Try different ticks?`)}"y"===t||"x"===t?n=[options_range(e)]:s[t]={scale:t,value:xi}}o?.call(this,d,e,m,g,s);const A=Object.fromEntries(Object.entries(s).map((([t,n])=>[t,{...n,value:options_valueof(e,n.value)}])));return u&&(n=f.filterFacets(e,A)),{data:e,facets:n,channels:A}}},c));return null==n?(s=l.channels,l.channels={}):s={},void 0!==r&&Object.assign(l,r),void 0===l.clip&&(l.clip=!1),l}function inferTextChannel(e,t,n,r,a){return{value:inferTickFormat(e,t,n,r,a)}}function inferTickFormat(e,t,n,r,a){return"function"!=typeof r||"log"===e.type&&e.tickFormat?void 0===r&&t&&isTemporal(t)?inferTimeFormat(e.type,t,a)??lo:e.tickFormat?e.tickFormat("number"==typeof n?n:null,r):"string"==typeof r&&e.domain().length>0?(isTemporal(e.domain())?Dn:oe)(r):void 0===r?lo:options_constant(r):r}function inclusiveRange(e,t,n){return e.range(t,e.offset(e.floor(n)))}const Bo={draw(e,t){e.moveTo(0,0),e.lineTo(0,t)}},Wo={draw(e,t){e.moveTo(0,0),e.lineTo(0,-t)}},qo={draw(e,t){e.moveTo(0,0),e.lineTo(-t,0)}},Fo={draw(e,t){e.moveTo(0,0),e.lineTo(t,0)}};function axis_inferFontVariant(e){return e.bandwidth&&!e.interval?void 0:"tabular-nums"}function formatAxisLabel(e,t,{anchor:n,label:r=t.label,labelAnchor:a,labelArrow:o}={}){if(!(null==r||r.inferred&&hasTemporalDomain(t)&&/^(date|time|year)$/i.test(r))){if(r=String(r),"auto"===o&&(o=(!t.bandwidth||t.interval)&&!/[↑↓→←]/.test(r)),!o)return r;if(!0===o){const n=function inferScaleOrder(e){return Math.sign(orderof(e.domain()))*Math.sign(orderof(e.range()))}(t);n&&(o=/x$/.test(e)||"center"===a?/x$/.test(e)===n<0?"left":"right":n<0?"up":"down")}switch(o){case"left":return`← ${r}`;case"right":return`${r} →`;case"up":return"right"===n?`${r} ↑`:`↑ ${r}`;case"down":return"right"===n?`${r} ↓`:`↓ ${r}`}return r}}function maybeLabelArrow(e="auto"){return!isNoneish(e)&&("boolean"==typeof e?e:keyword(e,"labelArrow",["auto","up","right","down","left"]))}function hasTemporalDomain(e){return isTemporal(e.domain())}function maybeScale(e,t){if(null==t)return t;const n=e(t);if(!n)throw new Error(`scale not found: ${t}`);return n}function legendItems(e,t={},n){let{columns:r,tickFormat:a,fontVariant:o=inferFontVariant(e),swatchSize:s=15,swatchWidth:c=s,swatchHeight:l=s,marginLeft:f=0,className:u,style:d,width:p}=t;const h=context_createContext(t);u=maybeClassName(u),a=inferTickFormat(e.scale,e.domain,void 0,a);const m=context_create("div",h).attr("class",`${u}-swatches ${u}-swatches-${null!=r?"columns":"wrap"}`);let g;return null!=r?(g=`:where(.${u}-swatches-columns .${u}-swatch) {\n  display: flex;\n  align-items: center;\n  break-inside: avoid;\n  padding-bottom: 1px;\n}\n:where(.${u}-swatches-columns .${u}-swatch::before) {\n  flex-shrink: 0;\n}\n:where(.${u}-swatches-columns .${u}-swatch-label) {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}`,m.style("columns",r).selectAll().data(e.domain).enter().append("div").attr("class",`${u}-swatch`).call(n,e,c,l).call((e=>e.append("div").attr("class",`${u}-swatch-label`).attr("title",a).text(a)))):(g=`:where(.${u}-swatches-wrap) {\n  display: flex;\n  align-items: center;\n  min-height: 33px;\n  flex-wrap: wrap;\n}\n:where(.${u}-swatches-wrap .${u}-swatch) {\n  display: inline-flex;\n  align-items: center;\n  margin-right: 1em;\n}`,m.selectAll().data(e.domain).enter().append("span").attr("class",`${u}-swatch`).call(n,e,c,l).append((function(){return this.ownerDocument.createTextNode(a.apply(this,arguments))}))),m.call((e=>e.insert("style","*").text(`:where(.${u}-swatches) {\n  font-family: system-ui, sans-serif;\n  font-size: 10px;\n  margin-bottom: 0.5em;\n}\n:where(.${u}-swatch > svg) {\n  margin-right: 0.5em;\n  overflow: visible;\n}\n${g}`))).style("margin-left",f?+f+"px":null).style("width",void 0===p?null:+p+"px").style("font-variant",impliedString(o,"normal")).call(applyInlineStyles,d).node()}const Do=new Map([["symbol",function legendSymbols(e,{fill:t=(void 0!==e.hint?.fill?e.hint.fill:"none"),fillOpacity:n=1,stroke:r=(void 0!==e.hint?.stroke?e.hint.stroke:isNoneish(t)?"currentColor":"none"),strokeOpacity:a=1,strokeWidth:o=1.5,r:s=4.5,...c}={},l){const[f,u]=options_maybeColorChannel(t),[d,p]=options_maybeColorChannel(r),h=maybeScale(l,f),m=maybeScale(l,d),g=s*s*Math.PI;return n=maybeNumberChannel(n)[1],a=maybeNumberChannel(a)[1],o=maybeNumberChannel(o)[1],legendItems(e,c,((t,r,s,c)=>t.append("svg").attr("viewBox","-8 -8 16 16").attr("width",s).attr("height",c).attr("fill","color"===f?e=>h.scale(e):u).attr("fill-opacity",n).attr("stroke","color"===d?e=>m.scale(e):p).attr("stroke-opacity",a).attr("stroke-width",o).append("path").attr("d",(t=>{const n=pathRound();return e.scale(t).draw(n,g),n}))))}],["color",legendColor],["opacity",function legendOpacity({type:e,interpolate:t,...n},{legend:r=!0,color:a=color_rgb(0,0,0),...o}){if(!t)throw new Error(`${e} opacity scales are not supported`);!0===r&&(r="ramp");if("ramp"!==`${r}`.toLowerCase())throw new Error(`${r} opacity legends are not supported`);return legendColor({type:e,...n,interpolate:interpolateOpacity(a)},{legend:r,...o})}]]);function legendOptions({className:e,...t},{label:n,ticks:r,tickFormat:a}={},o){return function options_inherit(e={},...t){let n=e;for(const r of t)for(const t in r)if(void 0===n[t]){const a=r[t];n===e?n={...n,[t]:a}:n[t]=a}return n}(o,{className:e,...t},{label:n,ticks:r,tickFormat:a})}function legendColor(e,{legend:t=!0,...n}){if(!0===t&&(t="ordinal"===e.type?"swatches":"ramp"),void 0!==e.domain)switch(`${t}`.toLowerCase()){case"swatches":return function legendSwatches(e,{opacity:t,...n}={}){if(!isOrdinalScale(e)&&!isThresholdScale(e))throw new Error(`swatches legend requires ordinal or threshold color scale (not ${e.type})`);return legendItems(e,n,((e,n,r,a)=>e.append("svg").attr("width",r).attr("height",a).attr("fill",n.scale).attr("fill-opacity",maybeNumberChannel(t)[1]).append("rect").attr("width","100%").attr("height","100%")))}(e,n);case"ramp":return legendRamp(e,n);default:throw new Error(`unknown legend type: ${t}`)}}function interpolateOpacity(e){const{r:t,g:n,b:r}=color_rgb(e)||color_rgb(0,0,0);return e=>`rgba(${t},${n},${r},${e})`}function rectInsets(e,{inset:t=0,insetTop:n=t,insetRight:r=t,insetBottom:a=t,insetLeft:o=t}={}){e.insetTop=options_number(n),e.insetRight=options_number(r),e.insetBottom=options_number(a),e.insetLeft=options_number(o)}function rectRadii(e,{r:t,rx:n,ry:r,rx1:a=t,ry1:o=t,rx2:s=t,ry2:c=t,rx1y1:l=(void 0!==a?+a:void 0!==o?+o:0),rx1y2:f=(void 0!==a?+a:void 0!==c?+c:0),rx2y1:u=(void 0!==s?+s:void 0!==o?+o:0),rx2y2:d=(void 0!==s?+s:void 0!==c?+c:0)}={}){l||f||u||d?(e.rx1y1=l,e.rx1y2=f,e.rx2y1=u,e.rx2y2=d):(e.rx=impliedString(n,"auto"),e.ry=impliedString(r,"auto"))}function applyRoundedRect(e,t,n,r,a,o){const{rx1y1:s,rx1y2:c,rx2y1:l,rx2y2:f}=o;"function"!=typeof t&&(t=options_constant(t)),"function"!=typeof n&&(n=options_constant(n)),"function"!=typeof r&&(r=options_constant(r)),"function"!=typeof a&&(a=options_constant(a));const u=Math.max(Math.abs(s+l),Math.abs(c+f)),d=Math.max(Math.abs(s+c),Math.abs(l+f));e.attr("d",(e=>{const o=t(e),p=n(e),h=r(e),m=a(e),g=o>h,b=p>m,A=g?h:o,y=g?o:h,w=b?m:p,v=b?p:m,x=Math.min(1,(y-A)/u,(v-w)/d),k=x*(g?b?f:l:b?c:s),S=x*(g?b?c:s:b?f:l),M=x*(g?b?s:c:b?l:f),E=x*(g?b?l:f:b?s:c);return`M${A},${w+biasY(k,E)}A${k},${k} 0 0 ${k<0?0:1} ${A+biasX(k,E)},${w}H${y-biasX(S,M)}A${S},${S} 0 0 ${S<0?0:1} ${y},${w+biasY(S,M)}V${v-biasY(M,S)}A${M},${M} 0 0 ${M<0?0:1} ${y-biasX(M,S)},${v}H${A+biasX(E,k)}A${E},${E} 0 0 ${E<0?0:1} ${A},${v-biasY(E,k)}Z`}))}function biasX(e,t){return t<0?e:Math.abs(e)}function biasY(e,t){return t<0?Math.abs(e):e}const Zo={ariaLabel:"frame",fill:"none",stroke:"currentColor",clip:!1},Oo={ariaLabel:"frame",fill:null,stroke:"currentColor",strokeLinecap:"square",clip:!1};class Frame extends Mark{constructor(e={}){const{anchor:t=null}=e;super(wi,void 0,e,null==t?Zo:Oo),this.anchor=maybeKeyword(t,"anchor",["top","right","bottom","left"]),rectInsets(this,e),t||rectRadii(this,e)}render(e,t,n,r,a){const{marginTop:o,marginRight:s,marginBottom:c,marginLeft:l,width:f,height:u}=r,{anchor:d,insetTop:p,insetRight:h,insetBottom:m,insetLeft:g}=this,{rx:b,ry:A,rx1y1:y,rx1y2:w,rx2y1:v,rx2y2:x}=this,k=l+g,S=f-s-h,M=o+p,E=u-c-m;return context_create(d?"svg:line":y||w||v||x?"svg:path":"svg:rect",a).datum(0).call(applyIndirectStyles,this,r,a).call(applyDirectStyles,this).call(applyChannelStyles,this,n).call(applyTransform,this,{}).call("left"===d?e=>e.attr("x1",k).attr("x2",k).attr("y1",M).attr("y2",E):"right"===d?e=>e.attr("x1",S).attr("x2",S).attr("y1",M).attr("y2",E):"top"===d?e=>e.attr("x1",k).attr("x2",S).attr("y1",M).attr("y2",M):"bottom"===d?e=>e.attr("x1",k).attr("x2",S).attr("y1",E).attr("y2",E):y||w||v||x?e=>e.call(applyRoundedRect,k,M,S,E,this):e=>e.attr("x",k).attr("y",M).attr("width",S-k).attr("height",E-M).attr("rx",b).attr("ry",A)).node()}}const Yo={ariaLabel:"tip",fill:"var(--plot-background)",stroke:"currentColor"},jo=new Set(["geometry","href","src","ariaLabel","scales"]);class Tip extends Mark{constructor(e,t={}){t.tip&&(t={...t,tip:!1}),void 0===t.title&&isIterable(e)&&isTextual(e)&&(t={...t,title:xi});const{x:n,y:r,x1:a,x2:o,y1:s,y2:c,anchor:l,preferredAnchor:f="bottom",monospace:u,fontFamily:d=(u?"ui-monospace, monospace":void 0),fontSize:p,fontStyle:h,fontVariant:m,fontWeight:g,lineHeight:b=1,lineWidth:A=20,frameAnchor:y,format:w,textAnchor:v="start",textOverflow:x,textPadding:k=8,title:S,pointerSize:M=12,pathFilter:E="drop-shadow(0 3px 4px rgba(0,0,0,0.2))"}=t;super(e,{x:{value:null!=a&&null!=o?null:n,scale:"x",optional:!0},y:{value:null!=s&&null!=c?null:r,scale:"y",optional:!0},x1:{value:a,scale:"x",optional:null==o},y1:{value:s,scale:"y",optional:null==c},x2:{value:o,scale:"x",optional:null==a},y2:{value:c,scale:"y",optional:null==s},title:{value:S,optional:!0}},t,Yo),this.anchor=maybeAnchor(l,"anchor"),this.preferredAnchor=maybeAnchor(f,"preferredAnchor"),this.frameAnchor=maybeFrameAnchor(y),this.textAnchor=impliedString(v,"middle"),this.textPadding=+k,this.pointerSize=+M,this.pathFilter=options_string(E),this.lineHeight=+b,this.lineWidth=+A,this.textOverflow=maybeTextOverflow(x),this.monospace=!!u,this.fontFamily=options_string(d),this.fontSize=options_number(p),this.fontStyle=options_string(h),this.fontVariant=options_string(m),this.fontWeight=options_string(g);for(const e in Yo)e in this.channels&&(this[e]=Yo[e]);this.splitLines=splitter(this),this.clipLine=clipper(this),this.format="string"==typeof w||"function"==typeof w?{title:w}:{...w}}render(e,t,n,r,a){const o=this,{x:s,y:c,fx:l,fy:f}=t,{ownerSVGElement:u,document:d}=a,{anchor:p,monospace:h,lineHeight:m,lineWidth:g}=this,{textPadding:b,pointerSize:A,pathFilter:y}=this,{marginTop:w,marginLeft:v}=r,{x1:x,y1:k,x2:S,y2:M,x:E=x??S,y:U=k??M}=n,C=l?l(e.fx)-v:0,R=f?f(e.fy)-w:0,[T,N]=applyFrameAnchor(this,r),I=anchorX(n,T),L=anchorY(n,N),V=h?monospaceWidth:defaultWidth,B=V(Eo);let W,q;"title"in n?(W=getSourceChannels.call(this,{title:n.channels.title},t),q=formatTitle):(W=getSourceChannels.call(this,n.channels,t),q=formatChannels);const F=context_create("svg:g",a).call(applyIndirectStyles,this,r,a).call(applyIndirectTextStyles,this).call(applyTransform,this,{x:E&&s,y:U&&c}).call((r=>r.selectAll().data(e).enter().append("g").attr("transform",(e=>`translate(${Math.round(I(e))},${Math.round(L(e))})`)).call(applyDirectStyles,this).call((e=>e.append("path").attr("filter",y))).call((r=>r.append("text").each((function(r){const a=src_select(this);this.setAttribute("fill","currentColor"),this.setAttribute("fill-opacity",1),this.setAttribute("stroke","none");const s=q.call(o,r,e,W,t,n);if("string"==typeof s)for(const e of o.splitLines(s))renderLine(a,{value:o.clipLine(e)});else{const e=new Set;for(const t of s){const{label:n=""}=t;n&&e.has(n)||(e.add(n),renderLine(a,t))}}}))))));function renderLine(e,{label:t,value:n,color:r,opacity:a}){t??="",n??="";const o=null!=r||null!=a;let s,c=100*g;const[l]=cut(t,c,V,B);if(l>=0)t=t.slice(0,l).trimEnd()+Eo,s=n.trim(),n="";else{(t||!n&&!o)&&(n=" "+n);const[e]=cut(n,c-V(t),V,B);e>=0&&(s=n.trim(),n=n.slice(0,e).trimEnd()+Eo)}const f=e.append("tspan").attr("x",0).attr("dy",`${m}em`).text("​");t&&f.append("tspan").attr("font-weight","bold").text(t),n&&f.append((()=>d.createTextNode(n))),o&&f.append("tspan").text(" ■").attr("fill",r).attr("fill-opacity",a).style("user-select","none"),s&&f.append("title").text(s)}function postrender(){const{width:e,height:t}=r.facet??r;F.selectChildren().each((function(n){let{x:r,width:a,height:s}=this.getBBox();a=Math.round(a),s=Math.round(s);let c=p;if(void 0===c){const r=I(n)+C,l=L(n)+R,f=r+a+A+2*b<e,u=r-a-A-2*b>0,d=l+s+A+2*b<t,p=l-s-A-2*b>0;c=f&&u?d&&p?o.preferredAnchor:p?"bottom":"top":d&&p?f?"left":"right":(f||u)&&(d||p)?`${p?"bottom":"top"}-${f?"left":"right"}`:o.preferredAnchor}const l=this.firstChild,f=this.lastChild;if(l.setAttribute("d",function getPath(e,t,n,r,a){const o=r+2*n,s=a+2*n;switch(e){case"middle":return`M${-o/2},${-s/2}h${o}v${s}h${-o}z`;case"top-left":return`M0,0l${t},${t}h${o-t}v${s}h${-o}z`;case"top":return`M0,0l${t/2},${t/2}h${(o-t)/2}v${s}h${-o}v${-s}h${(o-t)/2}z`;case"top-right":return`M0,0l${-t},${t}h${t-o}v${s}h${o}z`;case"right":return`M0,0l${-t/2},${-t/2}v${t/2-s/2}h${-o}v${s}h${o}v${t/2-s/2}z`;case"bottom-left":return`M0,0l${t},${-t}h${o-t}v${-s}h${-o}z`;case"bottom":return`M0,0l${t/2},${-t/2}h${(o-t)/2}v${-s}h${-o}v${s}h${(o-t)/2}z`;case"bottom-right":return`M0,0l${-t},${-t}h${t-o}v${-s}h${o}z`;case"left":return`M0,0l${t/2},${-t/2}v${t/2-s/2}h${o}v${s}h${-o}v${t/2-s/2}z`}}(c,A,b,a,s)),r)for(const e of f.childNodes)e.setAttribute("x",-r);f.setAttribute("y",+function getLineOffset(e,t,n){return/^top(?:-|$)/.test(e)?.94-n:-.29-t*n}(c,f.childNodes.length,m).toFixed(6)+"em"),f.setAttribute("transform",`translate(${function getTextTranslate(e,t,n,r,a){switch(e){case"middle":return[-r/2,a/2];case"top-left":return[n,t+n];case"top":return[-r/2,t/2+n];case"top-right":return[-r-n,t+n];case"right":return[-t/2-r-n,a/2];case"bottom-left":return[n,-t-n];case"bottom":return[-r/2,-t/2-n];case"bottom-right":return[-r-n,-t-n];case"left":return[n+t/2,a/2]}}(c,A,b,a,s)})`)})),F.attr("visibility",null)}return e.length&&(F.attr("visibility","hidden"),u.isConnected?Promise.resolve().then(postrender):"undefined"!=typeof requestAnimationFrame&&requestAnimationFrame(postrender)),F.node()}}function tip(e,{x:t,y:n,...r}={}){return void 0===r.frameAnchor&&([t,n]=options_maybeTuple(t,n)),new Tip(e,{...r,x:t,y:n})}function getSourceChannels(e,t){const n={};let r=this.format;r=maybeExpandPairedFormat(r,e,"x"),r=maybeExpandPairedFormat(r,e,"y"),this.format=r;for(const t in r){const a=r[t];if(null!==a&&!1!==a)if("fx"===t||"fy"===t)n[t]=!0;else{const r=getSource(e,t);r&&(n[t]=r)}}for(const t in e){if(t in n||t in r||jo.has(t))continue;if(("x"===t||"y"===t)&&e.geometry)continue;const a=getSource(e,t);if(a){if(null==a.scale&&"color"===a.defaultScale)continue;n[t]=a}}this.facet&&(t.fx&&!("fx"in r)&&(n.fx=!0),t.fy&&!("fy"in r)&&(n.fy=!0));for(const e in n){const r=this.format[e];if("string"==typeof r){const a=n[e]?.value??t[e]?.domain()??[];this.format[e]=(isTemporal(a)?Dn:oe)(r)}else if(void 0===r||!0===r){const n=t[e];this.format[e]=n?.bandwidth?inferTickFormat(n,n.domain()):lo}}return n}function maybeExpandPairedFormat(e,t,n){if(!(n in e))return e;const r=`${n}1`,a=`${n}2`;if(!(!(r in e)&&r in t||!(a in e)&&a in t))return e;const o=Object.entries(e),s=e[n];return o.splice(o.findIndex((([e])=>e===n))+1,0,[r,s],[a,s]),Object.fromEntries(o)}function formatTitle(e,t,{title:n}){return this.format.title(n.value[e],e)}function*formatChannels(e,t,n,r,a){for(const o in n){if("fx"===o||"fy"===o){yield{label:formatLabel(r,n,o),value:this.format[o](t[o],e)};continue}if("x1"===o&&"x2"in n)continue;if("y1"===o&&"y2"in n)continue;const s=n[o];if("x2"===o&&"x1"in n)yield{label:formatPairLabel(r,n,"x"),value:formatPair(this.format.x2,n.x1,s,e)};else if("y2"===o&&"y1"in n)yield{label:formatPairLabel(r,n,"y"),value:formatPair(this.format.y2,n.y1,s,e)};else{const t=s.value[e],c=s.scale;if(!defined_defined(t)&&null==c)continue;yield{label:formatLabel(r,n,o),value:this.format[o](t,e),color:"color"===c?a[o][e]:null,opacity:"opacity"===c?a[o][e]:null}}}}function formatPair(e,t,n,r){return n.hint?.length?`${e(n.value[r]-t.value[r],r)}`:`${e(t.value[r],r)}–${e(n.value[r],r)}`}function formatPairLabel(e,t,n){const r=formatLabel(e,t,`${n}1`,n),a=formatLabel(e,t,`${n}2`,n);return r===a?r:`${r}–${a}`}function formatLabel(e,t,n,r=n){const a=t[n],o=e[a?.scale??n];return String(o?.label??a?.label??r)}function plot(e={}){const{facet:t,style:n,title:r,subtitle:a,caption:o,ariaLabel:s,ariaDescription:c}=e,l=maybeClassName(e.className),f=void 0===e.marks?[]:flatMarks(e.marks);f.push(...function inferTips(e){const t=[];for(const n of e){let e=n.tip;if(e){!0===e?e={}:"string"==typeof e&&(e={pointer:e});let{pointer:r,preferredAnchor:a}=e;r=/^x$/i.test(r)?pointerX:/^y$/i.test(r)?pointerY:pointer_pointer,e=r(derive(n,e)),e.title=null,void 0===a&&(e.preferredAnchor=r===pointerY?"left":"bottom");const o=tip(n.data,e);o.facet=n.facet,o.facetAnchor=n.facetAnchor,t.push(o)}}return t}(f));const u=function maybeTopFacet(e,t){if(null==e)return;const{x:n,y:r}=e;if(null==n&&null==r)return;const a=dataify(e.data);if(null==a)throw new Error("missing facet data");const o={};null!=n&&(o.fx=createChannel(a,{value:n,scale:"fx"}));null!=r&&(o.fy=createChannel(a,{value:r,scale:"fy"}));applyScaleTransforms(o,t);const s=facetGroups(a,o);return{channels:o,groups:s,data:e.data}}(t,e),d=new Map;for(const t of f){const n=maybeMarkFacet(t,u,e);n&&d.set(t,n)}const p=new Map;u&&addScaleChannels(p,[u],e),addScaleChannels(p,d,e);const h=flatMarks(function inferAxes(e,t,n){let{projection:r,x:a={},y:o={},fx:s={},fy:c={},axis:l,grid:f,facet:u={},facet:{axis:d=l,grid:p}=u,x:{axis:h=l,grid:m=(null===h?null:f)}=a,y:{axis:g=l,grid:b=(null===g?null:f)}=o,fx:{axis:A=d,grid:y=(null===A?null:p)}=s,fy:{axis:w=d,grid:v=(null===w?null:p)}=c}=n;(r||!options_isScaleOptions(a)&&!hasPositionChannel("x",e))&&(h=m=null);(r||!options_isScaleOptions(o)&&!hasPositionChannel("y",e))&&(g=b=null);t.has("fx")||(A=y=null);t.has("fy")||(w=v=null);void 0===h&&(h=!hasAxis(e,"x"));void 0===g&&(g=!hasAxis(e,"y"));void 0===A&&(A=!hasAxis(e,"fx"));void 0===w&&(w=!hasAxis(e,"fy"));!0===h&&(h="bottom");!0===g&&(g="left");!0===A&&(A="top"===h||null===h?"bottom":"top");!0===w&&(w="right"===g||null===g?"left":"right");const x=[];return maybeGrid(x,v,gridFy,c),maybeAxis(x,w,axisFy,"right","left",u,c),maybeGrid(x,y,gridFx,s),maybeAxis(x,A,axisFx,"top","bottom",u,s),maybeGrid(x,b,gridY,o),maybeAxis(x,g,axisY,"left","right",n,o),maybeGrid(x,m,gridX,a),maybeAxis(x,h,axisX,"bottom","top",n,a),x}(f,p,e));for(const t of h){const n=maybeMarkFacet(t,u,e);n&&d.set(t,n)}f.unshift(...h);let m=createFacets(p,e);if(void 0!==m){const e=u?facetFilter(m,u):void 0;for(const t of f){if(null===t.facet||"super"===t.facet)continue;const n=d.get(t);void 0!==n&&(n.facetsIndex=null!=t.fx||null!=t.fy?facetFilter(m,n):e)}const t=new Set;for(const{facetsIndex:e}of d.values())e?.forEach(((e,n)=>{e?.length>0&&t.add(n)}));m.forEach(0<t.size&&t.size<m.length?(e,n)=>e.empty=!t.has(n):e=>e.empty=!1);for(const e of f)if("exclude"===e.facet){const t=d.get(e);void 0!==t&&(t.facetsIndex=facetExclude(t.facetsIndex))}}for(const t of Ni.keys())options_isScaleOptions(e[t])&&"fx"!==t&&"fy"!==t&&p.set(t,[]);const g=new Map;for(const t of f){if(g.has(t))throw new Error("duplicate mark; each mark must be unique");const{facetsIndex:n,channels:r}=d.get(t)??{},{data:a,facets:o,channels:s}=t.initialize(n,r,e);applyScaleTransforms(s,e),g.set(t,{data:a,facets:o,channels:s})}const b=createScales(addScaleChannels(p,g,e),e),A=function createDimensions(e,t,n={}){let r=.5-fo,a=.5+fo,o=.5+fo,s=.5-fo;for(const{marginTop:e,marginRight:n,marginBottom:c,marginLeft:l}of t)e>r&&(r=e),n>a&&(a=n),c>o&&(o=c),l>s&&(s=l);let{margin:c,marginTop:l=(void 0!==c?c:r),marginRight:f=(void 0!==c?c:a),marginBottom:u=(void 0!==c?c:o),marginLeft:d=(void 0!==c?c:s)}=n;l=+l,f=+f,u=+u,d=+d;let{width:p=640,height:h=autoHeight(e,n,{width:p,marginTopDefault:r,marginRightDefault:a,marginBottomDefault:o,marginLeftDefault:s})+Math.max(0,l-r+u-o)}=n;p=+p,h=+h;const m={width:p,height:h,marginTop:l,marginRight:f,marginBottom:u,marginLeft:d};if(e.fx||e.fy){let{margin:e,marginTop:t=(void 0!==e?e:l),marginRight:r=(void 0!==e?e:f),marginBottom:a=(void 0!==e?e:u),marginLeft:o=(void 0!==e?e:d)}=n.facet??{};t=+t,r=+r,a=+a,o=+o,m.facet={marginTop:t,marginRight:r,marginBottom:a,marginLeft:o}}return m}(b,f,e);!function autoScaleRange(e,t){const{x:n,y:r,fx:a,fy:o}=e,s=a||o?outerDimensions(t):t;a&&autoScaleRangeX(a,s),o&&autoScaleRangeY(o,s);const c=a||o?innerDimensions(e,t):t;n&&autoScaleRangeX(n,c),r&&autoScaleRangeY(r,c)}(b,A);const y=createScaleFunctions(b),{fx:w,fy:v}=y,x=w||v?innerDimensions(b,A):A,k=w||v?function actualDimensions({fx:e,fy:t},n){const{marginTop:r,marginRight:a,marginBottom:o,marginLeft:s,width:c,height:l}=outerDimensions(n),f=e&&outerRange(e),u=t&&outerRange(t);return{marginTop:t?u[0]:r,marginRight:e?c-f[1]:a,marginBottom:t?l-u[1]:o,marginLeft:e?f[0]:s,inset:{marginTop:n.marginTop,marginRight:n.marginRight,marginBottom:n.marginBottom,marginLeft:n.marginLeft},width:c,height:l}}(y,A):A,S=context_createContext(e),M=S.document,E=creator("svg").call(M.documentElement);let U=E;S.ownerSVGElement=E,S.className=l,S.projection=createProjection(e,x),S.path=function(){return path(this.projection??function xyProjection({x:e,y:t}){if(e||t)return e??=e=>e,t??=e=>e,src_transform({point(n,r){this.stream.point(e(n),t(r))}})}(y))},S.filterFacets=(e,t)=>facetFilter(m,{channels:t,groups:facetGroups(e,t)}),S.getMarkState=e=>{const t=g.get(e),n=d.get(e);return{...t,channels:{...t.channels,...n?.channels}}},S.dispatchValue=e=>{U.value!==e&&(U.value=e,U.dispatchEvent(new S.document.defaultView.Event("input",{bubbles:!0})))};const C=new Set;for(const[t,n]of g)if(null!=t.initializer){const r="super"===t.facet?k:x,a=t.initializer(n.data,n.facets,n.channels,y,r,S);if(void 0!==a.data&&(n.data=a.data),void 0!==a.facets&&(n.facets=a.facets),void 0!==a.channels){const{fx:r,fy:o,...s}=a.channels;inferChannelScales(s),Object.assign(n.channels,s);for(const t of Object.values(s)){const{scale:n}=t;null!=n&&((R=Ni.get(n))!==Si&&R!==Ti)&&(applyScaleTransform(t,e),C.add(n))}null==r&&null==o||d.set(t,!0)}}var R;if(C.size){const t=new Map;addScaleChannels(t,g,e,(e=>C.has(e))),addScaleChannels(p,g,e,(e=>C.has(e)));const n=function inheritScaleLabels(e,t){for(const n in e){const r=e[n],a=t[n];void 0===r.label&&a&&(r.label=a.label)}return e}(createScales(t,e),b),{scales:r,...a}=createScaleFunctions(n);Object.assign(b,n),Object.assign(y,a),Object.assign(y.scales,r)}let T,N;void 0!==m&&(T={x:w?.domain(),y:v?.domain()},m=function recreateFacets(e,{x:t,y:n}){return t&&=facetIndex(t),n&&=facetIndex(n),e.filter(t&&n?e=>t.has(e.x)&&n.has(e.y):t?e=>t.has(e.x):e=>n.has(e.y)).sort(t&&n?(e,r)=>t.get(e.x)-t.get(r.x)||n.get(e.y)-n.get(r.y):t?(e,n)=>t.get(e.x)-t.get(n.x):(e,t)=>n.get(e.y)-n.get(t.y))}(m,T),N=function facetTranslator(e,t,{marginTop:n,marginLeft:r}){const a=e?({x:t})=>e(t)-r:()=>0,o=t?({y:e})=>t(e)-n:()=>0;return function(e){"svg"===this.tagName?(this.setAttribute("x",a(e)),this.setAttribute("y",o(e))):this.setAttribute("transform",`translate(${a(e)},${o(e)})`)}}(w,v,A));for(const[e,t]of g)t.values=e.scale(t.channels,y,S);const{width:I,height:L}=A;src_select(E).attr("class",l).attr("fill","currentColor").attr("font-family","system-ui, sans-serif").attr("font-size",10).attr("text-anchor","middle").attr("width",I).attr("height",L).attr("viewBox",`0 0 ${I} ${L}`).attr("aria-label",s).attr("aria-description",c).call((e=>e.append("style").text(`:where(.${l}) {\n  --plot-background: white;\n  display: block;\n  height: auto;\n  height: intrinsic;\n  max-width: 100%;\n}\n:where(.${l} text),\n:where(.${l} tspan) {\n  white-space: pre;\n}`))).call(applyInlineStyles,n);for(const e of f){const{channels:t,values:n,facets:r}=g.get(e);if(void 0===m||"super"===e.facet){let a=null;if(r&&(a=r[0],a=e.filter(a,t,n),0===a.length))continue;const o=e.render(a,y,n,k,S);if(null==o)continue;E.appendChild(o)}else{let a;for(const o of m){if(!(e.facetAnchor?.(m,T,o)??!o.empty))continue;let s=null;if(r){const a=d.has(e);if(s=r[a?o.i:0],s=e.filter(s,t,n),0===s.length)continue;a||s!==r[0]||(B=void 0,W=void 0,s=(V=s).subarray?V.subarray(B,W):V.slice(B,W)),s.fx=o.x,s.fy=o.y,s.fi=o.i}const c=e.render(s,y,n,x,S);if(null!=c){(a??=src_select(E).append("g")).append((()=>c)).datum(o);for(const e of["aria-label","aria-description","aria-hidden","transform"])c.hasAttribute(e)&&(a.attr(e,c.getAttribute(e)),c.removeAttribute(e))}}a?.selectChildren().each(N)}}var V,B,W;const q=function createLegends(e,t,n){const r=[];for(const[a,o]of Do){const s=n[a];if(s?.legend&&a in e){const n=o(e[a],legendOptions(t,e[a],s),(t=>e[t]));null!=n&&r.push(n)}}return r}(b,S,e),{figure:F=null!=r||null!=a||null!=o||q.length>0}=e;F&&(U=M.createElement("figure"),U.className=`${l}-figure`,U.style.maxWidth="initial",null!=r&&U.append(createTitleElement(M,r,"h2")),null!=a&&U.append(createTitleElement(M,a,"h3")),U.append(...q,E),null!=o&&U.append(function createFigcaption(e,t){const n=e.createElement("figcaption");return n.append(t),n}(M,o)),"value"in E&&(U.value=E.value,delete E.value)),U.scale=function exposeScales(e){return t=>{if(!Ni.has(t=`${t}`))throw new Error(`unknown scale: ${t}`);return e[t]}}(y.scales),U.legend=function exposeLegends(e,t,n={}){return(r,a)=>{if(!Do.has(r))throw new Error(`unknown legend type: ${r}`);if(r in e)return Do.get(r)(e[r],legendOptions(t,n[r],a),(t=>e[t]))}}(b,S,e);const D=function consumeWarnings(){const e=Gi;return Gi=0,Ki=void 0,e}();return D>0&&src_select(E).append("text").attr("x",I).attr("y",20).attr("dy","-1em").attr("text-anchor","end").attr("font-family","initial").text("⚠️").append("title").text(`${D.toLocaleString("en-US")} warning${1===D?"":"s"}. Please check the console.`),U}function createTitleElement(e,t,n){if(t.ownerDocument)return t;const r=e.createElement(n);return r.append(t),r}function flatMarks(e){return e.flat(1/0).filter((e=>null!=e)).map(markify)}function markify(e){return"function"==typeof e.render?e:new Render(e)}class Render extends Mark{constructor(e){if("function"!=typeof e)throw new TypeError("invalid mark; missing render function");super(),this.render=e}render(){}}function applyScaleTransforms(e,t){for(const n in e)applyScaleTransform(e[n],t);return e}function applyScaleTransform(e,t){const{scale:n,transform:r=!0}=e;if(null==n||!r)return;const{type:a,percent:o,interval:s,transform:c=(o?e=>null==e?NaN:100*e:maybeIntervalTransform(s,a))}=t[n]??{};null!=c&&(e.value=options_map(e.value,c),e.transform=!1)}function inferChannelScales(e){for(const t in e)inferChannelScale(t,e[t])}function addScaleChannels(e,t,n,r=yes){for(const{channels:a}of t.values())for(const t in a){const o=a[t],{scale:s}=o;if(null!=s&&r(s))if("projection"===s){if(!hasProjection(n)){const t=void 0===n.x?.domain,r=void 0===n.y?.domain;if(t||r){const[n,a]=getGeometryChannels(o);t&&addScaleChannel(e,"x",n),r&&addScaleChannel(e,"y",a)}}}else addScaleChannel(e,s,o)}return e}function addScaleChannel(e,t,n){const r=e.get(t);void 0!==r?r.push(n):e.set(t,[n])}function maybeMarkFacet(e,t,n){if(null===e.facet||"super"===e.facet)return;const{fx:r,fy:a}=e;if(null!=r||null!=a){const t=dataify(e.data??r??a);if(void 0===t)throw new Error(`missing facet data in ${e.ariaLabel}`);if(null===t)return;const o={};return null!=r&&(o.fx=createChannel(t,{value:r,scale:"fx"})),null!=a&&(o.fy=createChannel(t,{value:a,scale:"fy"})),applyScaleTransforms(o,n),{channels:o,groups:facetGroups(t,o)}}if(void 0===t)return;const{channels:o,groups:s,data:c}=t;if("auto"!==e.facet||e.data===c)return{channels:o,groups:s};c.length>0&&(s.size>1||1===s.size&&o.fx&&o.fy&&[...s][0][1].size>1)&&lengthof(dataify(e.data))===lengthof(c)&&warnings_warn(`Warning: the ${e.ariaLabel} mark appears to use faceted data, but isn’t faceted. The mark data has the same length as the facet data and the mark facet option is "auto", but the mark data and facet data are distinct. If this mark should be faceted, set the mark facet option to true; otherwise, suppress this warning by setting the mark facet option to false.`)}function derive(e,t={}){return initializer({...t,x:null,y:null},((t,n,r,a,o,s)=>s.getMarkState(e)))}function maybeAxis(e,t,n,r,a,o,s){if(!t)return;const c=function isBoth(e){return/^\s*both\s*$/i.test(e)}(t);s=function axisOptions(e,t,{line:n=t.line,ticks:r,tickSize:a,tickSpacing:o,tickPadding:s,tickFormat:c,tickRotate:l,fontVariant:f,ariaLabel:u,ariaDescription:d,label:p=t.label,labelAnchor:h,labelArrow:m=t.labelArrow,labelOffset:g}){return{anchor:e,line:n,ticks:r,tickSize:a,tickSpacing:o,tickPadding:s,tickFormat:c,tickRotate:l,fontVariant:f,ariaLabel:u,ariaDescription:d,label:p,labelAnchor:h,labelArrow:m,labelOffset:g}}(c?r:t,o,s);const{line:l}=s;n!==axisY&&n!==axisX||!l||isNone(l)||e.push(function frame_frame(e){return new Frame(e)}(function lineOptions(e){const{anchor:t,line:n}=e;return{anchor:t,facetAnchor:t+"-empty",stroke:!0===n?void 0:n}}(s))),e.push(n(s)),c&&e.push(n({...s,anchor:a,label:null}))}function maybeGrid(e,t,n,r){t&&!isNone(t)&&e.push(n(function gridOptions(e,{stroke:t=(isColor(e)?e:void 0),ticks:n=(isGridTicks(e)?e:void 0),tickSpacing:r,ariaLabel:a,ariaDescription:o}){return{stroke:t,ticks:n,tickSpacing:r,ariaLabel:a,ariaDescription:o}}(t,r)))}function isGridTicks(e){switch(typeof e){case"number":return!0;case"string":return!isColor(e)}return isIterable(e)||"function"==typeof e?.range}function hasAxis(e,t){const n=`${t}-axis `;return e.some((e=>e.ariaLabel?.startsWith(n)))}function hasPositionChannel(e,t){for(const n of t)for(const t in n.channels){const{scale:r}=n.channels[t];if(r===e||"projection"===r)return!0}return!1}function outerRange(e){const t=e.domain();if(0===t.length)return[0,e.bandwidth()];let n=e(t[0]),r=e(t[t.length-1]);return r<n&&([n,r]=[r,n]),[n,r+e.bandwidth()]}function stack_maybeStackY({y:e,y1:t,y2:n,...r}={}){return r=mark_withTip(r,"x"),void 0===t&&void 0===n?function stackY(e={},t={}){1===arguments.length&&([e,t]=mergeOptions(e));const{x1:n,x:r=n,y:a,...o}=t,[s,c,l,f]=stack(r,a,"x","y",e,o);return{...s,x1:n,x:c,y1:l,y2:f,y:options_mid(l,f)}}({y:e,...r}):([t,n]=function options_maybeZero(e,t,n,r=xi){return void 0===t&&void 0===n?(t=0,n=void 0===e?r:e):void 0===t?t=void 0===e?0:e:void 0===n&&(n=void 0===e?0:e),[t,n]}(e,t,n),{...r,y1:t,y2:n})}function mergeOptions(e){const{offset:t,order:n,reverse:r,...a}=e;return[{offset:t,order:n,reverse:r},a]}const zo={length:!0};function stack(e,t=options_one,n,r,{offset:a,order:o,reverse:s},c){if(null===t)throw new Error(`stack requires ${r}`);const l=function maybeZ({z:e,fill:t,stroke:n}={}){return void 0===e&&([e]=options_maybeColorChannel(t)),void 0===e&&([e]=options_maybeColorChannel(n)),e}(c),[f,u]=function options_maybeColumn(e){return null==e?[e]:options_column(e)}(e),[d,p]=options_column(t),[h,m]=options_column(t);return d.hint=h.hint=zo,a=function maybeOffset(e){if(null==e)return;if("function"==typeof e)return e;switch(`${e}`.toLowerCase()){case"expand":case"normalize":return offsetExpand;case"center":case"silhouette":return offsetCenter;case"wiggle":return offsetWiggle}throw new Error(`unknown offset: ${e}`)}(a),o=function stack_maybeOrder(e,t,n){if(void 0===e&&t===offsetWiggle)return orderInsideOut(defined_ascendingDefined);if(null==e)return;if("string"==typeof e){const t=e.startsWith("-"),r=t?descendingDefined:defined_ascendingDefined;switch((t?e.slice(1):e).toLowerCase()){case"value":case n:return function orderY(e){return(t,n,r)=>(t,n)=>e(r[t],r[n])}(r);case"z":return function orderZ(e){return(t,n,r,a)=>(t,n)=>e(a[t],a[n])}(r);case"sum":return function orderSum(e){return orderZDomain(e,((e,t,n,r)=>groupSort(options_range(e),(e=>sum(e,(e=>n[e]))),(e=>r[e]))))}(r);case"appearance":return function orderAppearance(e){return orderZDomain(e,((e,t,n,r)=>groupSort(options_range(e),(e=>t[greatest_greatest(e,(e=>n[e]))]),(e=>r[e]))))}(r);case"inside-out":return orderInsideOut(r)}return orderAccessor(field(e))}if("function"==typeof e)return(1===e.length?orderAccessor:orderComparator)(e);if(options_isArray(e))return function orderGiven(e){return orderZDomain(defined_ascendingDefined,(()=>e))}(e);throw new Error(`invalid order: ${e}`)}(o,a,r),[basic_basic(c,((r,c,f)=>{({data:r,facets:c}=function exclusiveFacets(e,t){if(1===t.length)return{data:e,facets:t};const n=lengthof(e),r=new Uint8Array(n);let a=0;for(const e of t)for(const t of e)r[t]&&++a,r[t]=1;if(0===a)return{data:e,facets:t};const o=(e=slice(e))[yi]=new Uint32Array(n+a);t=t.map((e=>slice(e,Uint32Array)));let s=n;r.fill(0);for(const n of t)for(let t=0,a=n.length;t<a;++t){const a=n[t];r[a]?(n[t]=s,e[s]=e[a],o[s]=a,++s):o[a]=a,r[a]=1}return{data:e,facets:t}}(r,c));const d=null==e?void 0:u(function options_maybeApplyInterval(e,t){const n=maybeIntervalTransform(t?.interval,t?.type);return n?options_map(e,n):e}(options_valueof(r,e),f?.[n])),h=options_valueof(r,t,Float64Array),g=options_valueof(r,l),b=o&&o(r,d,h,g),A=lengthof(r),y=p(new Float64Array(A)),w=m(new Float64Array(A)),v=[];for(const e of c){const t=d?Array.from(group_group(e,(e=>d[e])).values()):[e];if(b)for(const e of t)e.sort(b);for(const e of t){let t=0,n=0;s&&e.reverse();for(const r of e){const e=h[r];e<0?t=w[r]=(y[r]=t)+e:e>0?n=w[r]=(y[r]=n)+e:w[r]=y[r]=n}}v.push(t)}return a&&a(v,y,w,g),{data:r,facets:c}})),f,d,h]}function stack_extent(e,t){let n=0,r=0;for(const a of e){const e=t[a];e<n&&(n=e),e>r&&(r=e)}return[n,r]}function offsetExpand(e,t,n){for(const r of e)for(const e of r){const[r,a]=stack_extent(e,n);for(const o of e){const e=1/(a-r||1);t[o]=e*(t[o]-r),n[o]=e*(n[o]-r)}}}function offsetCenter(e,t,n){for(const r of e){for(const e of r){const[r,a]=stack_extent(e,n);for(const o of e){const e=(a+r)/2;t[o]-=e,n[o]-=e}}offsetZero(r,t,n)}offsetCenterFacets(e,t,n)}function offsetWiggle(e,t,n,r){for(const a of e){const e=new InternMap;let o=0;for(const s of a){let a=-1;const c=s.map((e=>Math.abs(n[e]-t[e]))),l=s.map((o=>{a=r?r[o]:++a;const s=n[o]-t[o],c=e.has(a)?s-e.get(a):0;return e.set(a,s),c})),f=[0,...cumsum(l)];for(const e of s)t[e]+=o,n[e]+=o;const u=sum(c);u&&(o-=sum(c,((e,t)=>(l[t]/2+f[t])*e))/u)}offsetZero(a,t,n)}offsetCenterFacets(e,t,n)}function offsetZero(e,t,n){const r=min(e,(e=>min(e,(e=>t[e]))));for(const a of e)for(const e of a)t[e]-=r,n[e]-=r}function offsetCenterFacets(e,t,n){const r=e.length;if(1===r)return;const a=e.map((e=>e.flat())),o=a.map((e=>(min(e,(e=>t[e]))+max(e,(e=>n[e])))/2)),s=min(o);for(let e=0;e<r;e++){const r=s-o[e];for(const o of a[e])t[o]+=r,n[o]+=r}}function orderInsideOut(e){return orderZDomain(e,((e,t,n,r)=>{const a=options_range(e),o=groupSort(a,(e=>t[greatest_greatest(e,(e=>n[e]))]),(e=>r[e])),s=rollup(a,(e=>sum(e,(e=>n[e]))),(e=>r[e])),c=[],l=[];let f=0;for(const e of o)f<0?(f+=s.get(e),c.push(e)):(f-=s.get(e),l.push(e));return l.reverse().concat(c)}))}function orderAccessor(e){return t=>{const n=options_valueof(t,e);return(e,t)=>defined_ascendingDefined(n[e],n[t])}}function orderComparator(e){return t=>options_isArray(t)?(n,r)=>e(t[n],t[r]):(n,r)=>e(t.get(n),t.get(r))}function orderZDomain(e,t){return(n,r,a,o)=>{if(!o)throw new Error("missing channel: z");const s=new InternMap(t(n,r,a,o).map(((e,t)=>[e,t])));return(t,n)=>e(s.get(o[t]),s.get(o[n]))}}const Po={ariaLabel:"bar"};class AbstractBar extends Mark{constructor(e,t,n={},r=Po){super(e,t,n,r),rectInsets(this,n),rectRadii(this,n)}render(e,t,n,r,a){const{rx:o,ry:s,rx1y1:c,rx1y2:l,rx2y1:f,rx2y2:u}=this,d=this._x(t,n,r),p=this._y(t,n,r),h=this._width(t,n,r),m=this._height(t,n,r);return context_create("svg:g",a).call(applyIndirectStyles,this,r,a).call(this._transform,this,t).call((t=>t.selectAll().data(e).enter().call(c||l||f||u?e=>e.append("path").call(applyDirectStyles,this).call(applyRoundedRect,d,p,add(d,h),add(p,m),this).call(applyChannelStyles,this,n):e=>e.append("rect").call(applyDirectStyles,this).attr("x",d).attr("width",h).attr("y",p).attr("height",m).call(applyAttr,"rx",o).call(applyAttr,"ry",s).call(applyChannelStyles,this,n)))).node()}_x(e,{x:t},{marginLeft:n}){const{insetLeft:r}=this;return t?e=>t[e]+r:n+r}_y(e,{y:t},{marginTop:n}){const{insetTop:r}=this;return t?e=>t[e]+r:n+r}_width({x:e},{x:t},{marginRight:n,marginLeft:r,width:a}){const{insetLeft:o,insetRight:s}=this,c=t&&e?e.bandwidth():a-n-r;return Math.max(0,c-o-s)}_height({y:e},{y:t},{marginTop:n,marginBottom:r,height:a}){const{insetTop:o,insetBottom:s}=this,c=t&&e?e.bandwidth():a-n-r;return Math.max(0,c-o-s)}}function add(e,t){return"function"==typeof e&&"function"==typeof t?n=>e(n)+t(n):"function"==typeof e?n=>e(n)+t:"function"==typeof t?n=>e+t(n):e+t}class BarY extends AbstractBar{constructor(e,t={},n){const{x:r,y1:a,y2:o}=t;super(e,{y1:{value:a,scale:"y"},y2:{value:o,scale:"y"},x:{value:r,scale:"x",type:"band",optional:!0}},t,n)}_transform(e,t,{y:n}){e.call(applyTransform,t,{y:n},0,0)}_y({y:e},{y1:t,y2:n},{marginTop:r}){const{insetTop:a}=this;return isCollapsed(e)?r+a:e=>Math.min(t[e],n[e])+a}_height({y:e},{y1:t,y2:n},{marginTop:r,marginBottom:a,height:o}){const{insetTop:s,insetBottom:c}=this;return isCollapsed(e)?o-r-a-s-c:e=>Math.max(0,Math.abs(n[e]-t[e])-s-c)}}function barY(e,t={}){return function options_hasXY(e){return function options_hasX({x:e,x1:t,x2:n}){return void 0!==e||void 0!==t||void 0!==n}(e)||hasY(e)||void 0!==e.interval}(t)||(t={...t,x:vi,y2:xi}),new BarY(e,stack_maybeStackY(maybeIntervalY(function identity_maybeIdentityY(e={},t="y"){return hasY(e)?e:{...e,[t]:xi}}(t))))}function _getDefaults(){return{async:!1,breaks:!1,extensions:null,gfm:!0,hooks:null,pedantic:!1,renderer:null,silent:!1,tokenizer:null,walkTokens:null}}Mark.prototype.plot=function({marks:e=[],...t}={}){return plot({...t,marks:[...e,this]})};let Qo={async:!1,breaks:!1,extensions:null,gfm:!0,hooks:null,pedantic:!1,renderer:null,silent:!1,tokenizer:null,walkTokens:null};function changeDefaults(e){Qo=e}const Ko={exec:()=>null};function edit(e,t=""){let n="string"==typeof e?e:e.source;const r={replace:(e,t)=>{let a="string"==typeof t?t:t.source;return a=a.replace(Go.caret,"$1"),n=n.replace(e,a),r},getRegex:()=>new RegExp(n,t)};return r}const Go={codeRemoveIndent:/^(?: {1,4}| {0,3}\t)/gm,outputLinkReplace:/\\([\[\]])/g,indentCodeCompensation:/^(\s+)(?:```)/,beginningSpace:/^\s+/,endingHash:/#$/,startingSpaceChar:/^ /,endingSpaceChar:/ $/,nonSpaceChar:/[^ ]/,newLineCharGlobal:/\n/g,tabCharGlobal:/\t/g,multipleSpaceGlobal:/\s+/g,blankLine:/^[ \t]*$/,doubleBlankLine:/\n[ \t]*\n[ \t]*$/,blockquoteStart:/^ {0,3}>/,blockquoteSetextReplace:/\n {0,3}((?:=+|-+) *)(?=\n|$)/g,blockquoteSetextReplace2:/^ {0,3}>[ \t]?/gm,listReplaceTabs:/^\t+/,listReplaceNesting:/^ {1,4}(?=( {4})*[^ ])/g,listIsTask:/^\[[ xX]\] /,listReplaceTask:/^\[[ xX]\] +/,anyLine:/\n.*\n/,hrefBrackets:/^<(.*)>$/,tableDelimiter:/[:|]/,tableAlignChars:/^\||\| *$/g,tableRowBlankLine:/\n[ \t]*$/,tableAlignRight:/^ *-+: *$/,tableAlignCenter:/^ *:-+: *$/,tableAlignLeft:/^ *:-+ *$/,startATag:/^<a /i,endATag:/^<\/a>/i,startPreScriptTag:/^<(pre|code|kbd|script)(\s|>)/i,endPreScriptTag:/^<\/(pre|code|kbd|script)(\s|>)/i,startAngleBracket:/^</,endAngleBracket:/>$/,pedanticHrefTitle:/^([^'"]*[^\s])\s+(['"])(.*)\2/,unicodeAlphaNumeric:/[\p{L}\p{N}]/u,escapeTest:/[&<>"']/,escapeReplace:/[&<>"']/g,escapeTestNoEncode:/[<>"']|&(?!(#\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\w+);)/,escapeReplaceNoEncode:/[<>"']|&(?!(#\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\w+);)/g,unescapeTest:/&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/gi,caret:/(^|[^\[])\^/g,percentDecode:/%25/g,findPipe:/\|/g,splitPipe:/ \|/,slashPipe:/\\\|/g,carriageReturn:/\r\n|\r/g,spaceLine:/^ +$/gm,notSpaceStart:/^\S*/,endingNewline:/\n$/,listItemRegex:e=>new RegExp(`^( {0,3}${e})((?:[\t ][^\\n]*)?(?:\\n|$))`),nextBulletRegex:e=>new RegExp(`^ {0,${Math.min(3,e-1)}}(?:[*+-]|\\d{1,9}[.)])((?:[ \t][^\\n]*)?(?:\\n|$))`),hrRegex:e=>new RegExp(`^ {0,${Math.min(3,e-1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$)`),fencesBeginRegex:e=>new RegExp(`^ {0,${Math.min(3,e-1)}}(?:\`\`\`|~~~)`),headingBeginRegex:e=>new RegExp(`^ {0,${Math.min(3,e-1)}}#`),htmlBeginRegex:e=>new RegExp(`^ {0,${Math.min(3,e-1)}}<(?:[a-z].*>|!--)`,"i")},Xo=/^ {0,3}((?:-[\t ]*){3,}|(?:_[ \t]*){3,}|(?:\*[ \t]*){3,})(?:\n+|$)/,Jo=/(?:[*+-]|\d{1,9}[.)])/,Ho=/^(?!bull |blockCode|fences|blockquote|heading|html|table)((?:.|\n(?!\s*?\n|bull |blockCode|fences|blockquote|heading|html|table))+?)\n {0,3}(=+|-+) *(?:\n+|$)/,_o=edit(Ho).replace(/bull/g,Jo).replace(/blockCode/g,/(?: {4}| {0,3}\t)/).replace(/fences/g,/ {0,3}(?:`{3,}|~{3,})/).replace(/blockquote/g,/ {0,3}>/).replace(/heading/g,/ {0,3}#{1,6}/).replace(/html/g,/ {0,3}<[^\n>]+>\n/).replace(/\|table/g,"").getRegex(),$o=edit(Ho).replace(/bull/g,Jo).replace(/blockCode/g,/(?: {4}| {0,3}\t)/).replace(/fences/g,/ {0,3}(?:`{3,}|~{3,})/).replace(/blockquote/g,/ {0,3}>/).replace(/heading/g,/ {0,3}#{1,6}/).replace(/html/g,/ {0,3}<[^\n>]+>\n/).replace(/table/g,/ {0,3}\|?(?:[:\- ]*\|)+[\:\- ]*\n/).getRegex(),es=/^([^\n]+(?:\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\n)[^\n]+)*)/,ts=/(?!\s*\])(?:\\.|[^\[\]\\])+/,ns=edit(/^ {0,3}\[(label)\]: *(?:\n[ \t]*)?([^<\s][^\s]*|<.*?>)(?:(?: +(?:\n[ \t]*)?| *\n[ \t]*)(title))? *(?:\n+|$)/).replace("label",ts).replace("title",/(?:"(?:\\"?|[^"\\])*"|'[^'\n]*(?:\n[^'\n]+)*\n?'|\([^()]*\))/).getRegex(),rs=edit(/^( {0,3}bull)([ \t][^\n]+?)?(?:\n|$)/).replace(/bull/g,Jo).getRegex(),as="address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|search|section|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul",is=/<!--(?:-?>|[\s\S]*?(?:-->|$))/,os=edit("^ {0,3}(?:<(script|pre|style|textarea)[\\s>][\\s\\S]*?(?:</\\1>[^\\n]*\\n+|$)|comment[^\\n]*(\\n+|$)|<\\?[\\s\\S]*?(?:\\?>\\n*|$)|<![A-Z][\\s\\S]*?(?:>\\n*|$)|<!\\[CDATA\\[[\\s\\S]*?(?:\\]\\]>\\n*|$)|</?(tag)(?: +|\\n|/?>)[\\s\\S]*?(?:(?:\\n[ \t]*)+\\n|$)|<(?!script|pre|style|textarea)([a-z][\\w-]*)(?:attribute)*? */?>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n[ \t]*)+\\n|$)|</(?!script|pre|style|textarea)[a-z][\\w-]*\\s*>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n[ \t]*)+\\n|$))","i").replace("comment",is).replace("tag",as).replace("attribute",/ +[a-zA-Z:_][\w.:-]*(?: *= *"[^"\n]*"| *= *'[^'\n]*'| *= *[^\s"'=<>`]+)?/).getRegex(),ss=edit(es).replace("hr",Xo).replace("heading"," {0,3}#{1,6}(?:\\s|$)").replace("|lheading","").replace("|table","").replace("blockquote"," {0,3}>").replace("fences"," {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list"," {0,3}(?:[*+-]|1[.)]) ").replace("html","</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag",as).getRegex(),cs={blockquote:edit(/^( {0,3}> ?(paragraph|[^\n]*)(?:\n|$))+/).replace("paragraph",ss).getRegex(),code:/^((?: {4}| {0,3}\t)[^\n]+(?:\n(?:[ \t]*(?:\n|$))*)?)+/,def:ns,fences:/^ {0,3}(`{3,}(?=[^`\n]*(?:\n|$))|~{3,})([^\n]*)(?:\n|$)(?:|([\s\S]*?)(?:\n|$))(?: {0,3}\1[~`]* *(?=\n|$)|$)/,heading:/^ {0,3}(#{1,6})(?=\s|$)(.*)(?:\n+|$)/,hr:Xo,html:os,lheading:_o,list:rs,newline:/^(?:[ \t]*(?:\n|$))+/,paragraph:ss,table:Ko,text:/^[^\n]+/},ls=edit("^ *([^\\n ].*)\\n {0,3}((?:\\| *)?:?-+:? *(?:\\| *:?-+:? *)*(?:\\| *)?)(?:\\n((?:(?! *\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\n|$))*)\\n*|$)").replace("hr",Xo).replace("heading"," {0,3}#{1,6}(?:\\s|$)").replace("blockquote"," {0,3}>").replace("code","(?: {4}| {0,3}\t)[^\\n]").replace("fences"," {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list"," {0,3}(?:[*+-]|1[.)]) ").replace("html","</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag",as).getRegex(),fs={...cs,lheading:$o,table:ls,paragraph:edit(es).replace("hr",Xo).replace("heading"," {0,3}#{1,6}(?:\\s|$)").replace("|lheading","").replace("table",ls).replace("blockquote"," {0,3}>").replace("fences"," {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list"," {0,3}(?:[*+-]|1[.)]) ").replace("html","</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag",as).getRegex()},us={...cs,html:edit("^ *(?:comment *(?:\\n|\\s*$)|<(tag)[\\s\\S]+?</\\1> *(?:\\n{2,}|\\s*$)|<tag(?:\"[^\"]*\"|'[^']*'|\\s[^'\"/>\\s]*)*?/?> *(?:\\n{2,}|\\s*$))").replace("comment",is).replace(/tag/g,"(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\b)\\w+(?!:|[^\\w\\s@]*@)\\b").getRegex(),def:/^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +(["(][^\n]+[")]))? *(?:\n+|$)/,heading:/^(#{1,6})(.*)(?:\n+|$)/,fences:Ko,lheading:/^(.+?)\n {0,3}(=+|-+) *(?:\n+|$)/,paragraph:edit(es).replace("hr",Xo).replace("heading"," *#{1,6} *[^\n]").replace("lheading",_o).replace("|table","").replace("blockquote"," {0,3}>").replace("|fences","").replace("|list","").replace("|html","").replace("|tag","").getRegex()},ds=/^( {2,}|\\)\n(?!\s*$)/,ps=/[\p{P}\p{S}]/u,hs=/[\s\p{P}\p{S}]/u,ms=/[^\s\p{P}\p{S}]/u,gs=edit(/^((?![*_])punctSpace)/,"u").replace(/punctSpace/g,hs).getRegex(),bs=/(?!~)[\p{P}\p{S}]/u,As=/^(?:\*+(?:((?!\*)punct)|[^\s*]))|^_+(?:((?!_)punct)|([^\s_]))/,ys=edit(As,"u").replace(/punct/g,ps).getRegex(),ws=edit(As,"u").replace(/punct/g,bs).getRegex(),vs="^[^_*]*?__[^_*]*?\\*[^_*]*?(?=__)|[^*]+(?=[^*])|(?!\\*)punct(\\*+)(?=[\\s]|$)|notPunctSpace(\\*+)(?!\\*)(?=punctSpace|$)|(?!\\*)punctSpace(\\*+)(?=notPunctSpace)|[\\s](\\*+)(?!\\*)(?=punct)|(?!\\*)punct(\\*+)(?!\\*)(?=punct)|notPunctSpace(\\*+)(?=notPunctSpace)",xs=edit(vs,"gu").replace(/notPunctSpace/g,ms).replace(/punctSpace/g,hs).replace(/punct/g,ps).getRegex(),ks=edit(vs,"gu").replace(/notPunctSpace/g,/(?:[^\s\p{P}\p{S}]|~)/u).replace(/punctSpace/g,/(?!~)[\s\p{P}\p{S}]/u).replace(/punct/g,bs).getRegex(),Ss=edit("^[^_*]*?\\*\\*[^_*]*?_[^_*]*?(?=\\*\\*)|[^_]+(?=[^_])|(?!_)punct(_+)(?=[\\s]|$)|notPunctSpace(_+)(?!_)(?=punctSpace|$)|(?!_)punctSpace(_+)(?=notPunctSpace)|[\\s](_+)(?!_)(?=punct)|(?!_)punct(_+)(?!_)(?=punct)","gu").replace(/notPunctSpace/g,ms).replace(/punctSpace/g,hs).replace(/punct/g,ps).getRegex(),Ms=edit(/\\(punct)/,"gu").replace(/punct/g,ps).getRegex(),Es=edit(/^<(scheme:[^\s\x00-\x1f<>]*|email)>/).replace("scheme",/[a-zA-Z][a-zA-Z0-9+.-]{1,31}/).replace("email",/[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/).getRegex(),Us=edit(is).replace("(?:--\x3e|$)","--\x3e").getRegex(),Cs=edit("^comment|^</[a-zA-Z][\\w:-]*\\s*>|^<[a-zA-Z][\\w-]*(?:attribute)*?\\s*/?>|^<\\?[\\s\\S]*?\\?>|^<![a-zA-Z]+\\s[\\s\\S]*?>|^<!\\[CDATA\\[[\\s\\S]*?\\]\\]>").replace("comment",Us).replace("attribute",/\s+[a-zA-Z:_][\w.:-]*(?:\s*=\s*"[^"]*"|\s*=\s*'[^']*'|\s*=\s*[^\s"'=<>`]+)?/).getRegex(),Rs=/(?:\[(?:\\.|[^\[\]\\])*\]|\\.|`[^`]*`|[^\[\]\\`])*?/,Ts=edit(/^!?\[(label)\]\(\s*(href)(?:(?:[ \t]*(?:\n[ \t]*)?)(title))?\s*\)/).replace("label",Rs).replace("href",/<(?:\\.|[^\n<>\\])+>|[^ \t\n\x00-\x1f]*/).replace("title",/"(?:\\"?|[^"\\])*"|'(?:\\'?|[^'\\])*'|\((?:\\\)?|[^)\\])*\)/).getRegex(),Ns=edit(/^!?\[(label)\]\[(ref)\]/).replace("label",Rs).replace("ref",ts).getRegex(),Is=edit(/^!?\[(ref)\](?:\[\])?/).replace("ref",ts).getRegex(),Ls={_backpedal:Ko,anyPunctuation:Ms,autolink:Es,blockSkip:/\[[^[\]]*?\]\((?:\\.|[^\\\(\)]|\((?:\\.|[^\\\(\)])*\))*\)|`[^`]*?`|<[^<>]*?>/g,br:ds,code:/^(`+)([^`]|[^`][\s\S]*?[^`])\1(?!`)/,del:Ko,emStrongLDelim:ys,emStrongRDelimAst:xs,emStrongRDelimUnd:Ss,escape:/^\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/,link:Ts,nolink:Is,punctuation:gs,reflink:Ns,reflinkSearch:edit("reflink|nolink(?!\\()","g").replace("reflink",Ns).replace("nolink",Is).getRegex(),tag:Cs,text:/^(`+|[^`])(?:(?= {2,}\n)|[\s\S]*?(?:(?=[\\<!\[`*_]|\b_|$)|[^ ](?= {2,}\n)))/,url:Ko},Vs={...Ls,link:edit(/^!?\[(label)\]\((.*?)\)/).replace("label",Rs).getRegex(),reflink:edit(/^!?\[(label)\]\s*\[([^\]]*)\]/).replace("label",Rs).getRegex()},Bs={...Ls,emStrongRDelimAst:ks,emStrongLDelim:ws,url:edit(/^((?:ftp|https?):\/\/|www\.)(?:[a-zA-Z0-9\-]+\.?)+[^\s<]*|^email/,"i").replace("email",/[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/).getRegex(),_backpedal:/(?:[^?!.,:;*_'"~()&]+|\([^)]*\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'"~)]+(?!$))+/,del:/^(~~?)(?=[^\s~])((?:\\.|[^\\])*?(?:\\.|[^\s~\\]))\1(?=[^~]|$)/,text:/^([`~]+|[^`~])(?:(?= {2,}\n)|(?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)|[\s\S]*?(?:(?=[\\<!\[`*~_]|\b_|https?:\/\/|ftp:\/\/|www\.|$)|[^ ](?= {2,}\n)|[^a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-](?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)))/},Ws={...Bs,br:edit(ds).replace("{2,}","*").getRegex(),text:edit(Bs.text).replace("\\b_","\\b_| {2,}\\n").replace(/\{2,\}/g,"*").getRegex()},qs={normal:cs,gfm:fs,pedantic:us},Fs={normal:Ls,gfm:Bs,breaks:Ws,pedantic:Vs},Ds={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"},getEscapeReplacement=e=>Ds[e];function marked_esm_escape(e,t){if(t){if(Go.escapeTest.test(e))return e.replace(Go.escapeReplace,getEscapeReplacement)}else if(Go.escapeTestNoEncode.test(e))return e.replace(Go.escapeReplaceNoEncode,getEscapeReplacement);return e}function cleanUrl(e){try{e=encodeURI(e).replace(Go.percentDecode,"%")}catch{return null}return e}function splitCells(e,t){const n=e.replace(Go.findPipe,((e,t,n)=>{let r=!1,a=t;for(;--a>=0&&"\\"===n[a];)r=!r;return r?"|":" |"})),r=n.split(Go.splitPipe);let a=0;if(r[0].trim()||r.shift(),r.length>0&&!r.at(-1)?.trim()&&r.pop(),t)if(r.length>t)r.splice(t);else for(;r.length<t;)r.push("");for(;a<r.length;a++)r[a]=r[a].trim().replace(Go.slashPipe,"|");return r}function rtrim(e,t,n){const r=e.length;if(0===r)return"";let a=0;for(;a<r;){if(e.charAt(r-a-1)!==t)break;a++}return e.slice(0,r-a)}function outputLink(e,t,n,r,a){const o=t.href,s=t.title||null,c=e[1].replace(a.other.outputLinkReplace,"$1");r.state.inLink=!0;const l={type:"!"===e[0].charAt(0)?"image":"link",raw:n,href:o,title:s,text:c,tokens:r.inlineTokens(c)};return r.state.inLink=!1,l}class _Tokenizer{options;rules;lexer;constructor(e){this.options=e||Qo}space(e){const t=this.rules.block.newline.exec(e);if(t&&t[0].length>0)return{type:"space",raw:t[0]}}code(e){const t=this.rules.block.code.exec(e);if(t){const e=t[0].replace(this.rules.other.codeRemoveIndent,"");return{type:"code",raw:t[0],codeBlockStyle:"indented",text:this.options.pedantic?e:rtrim(e,"\n")}}}fences(e){const t=this.rules.block.fences.exec(e);if(t){const e=t[0],n=function indentCodeCompensation(e,t,n){const r=e.match(n.other.indentCodeCompensation);if(null===r)return t;const a=r[1];return t.split("\n").map((e=>{const t=e.match(n.other.beginningSpace);if(null===t)return e;const[r]=t;return r.length>=a.length?e.slice(a.length):e})).join("\n")}(e,t[3]||"",this.rules);return{type:"code",raw:e,lang:t[2]?t[2].trim().replace(this.rules.inline.anyPunctuation,"$1"):t[2],text:n}}}heading(e){const t=this.rules.block.heading.exec(e);if(t){let e=t[2].trim();if(this.rules.other.endingHash.test(e)){const t=rtrim(e,"#");this.options.pedantic?e=t.trim():t&&!this.rules.other.endingSpaceChar.test(t)||(e=t.trim())}return{type:"heading",raw:t[0],depth:t[1].length,text:e,tokens:this.lexer.inline(e)}}}hr(e){const t=this.rules.block.hr.exec(e);if(t)return{type:"hr",raw:rtrim(t[0],"\n")}}blockquote(e){const t=this.rules.block.blockquote.exec(e);if(t){let e=rtrim(t[0],"\n").split("\n"),n="",r="";const a=[];for(;e.length>0;){let t=!1;const o=[];let s;for(s=0;s<e.length;s++)if(this.rules.other.blockquoteStart.test(e[s]))o.push(e[s]),t=!0;else{if(t)break;o.push(e[s])}e=e.slice(s);const c=o.join("\n"),l=c.replace(this.rules.other.blockquoteSetextReplace,"\n    $1").replace(this.rules.other.blockquoteSetextReplace2,"");n=n?`${n}\n${c}`:c,r=r?`${r}\n${l}`:l;const f=this.lexer.state.top;if(this.lexer.state.top=!0,this.lexer.blockTokens(l,a,!0),this.lexer.state.top=f,0===e.length)break;const u=a.at(-1);if("code"===u?.type)break;if("blockquote"===u?.type){const t=u,o=t.raw+"\n"+e.join("\n"),s=this.blockquote(o);a[a.length-1]=s,n=n.substring(0,n.length-t.raw.length)+s.raw,r=r.substring(0,r.length-t.text.length)+s.text;break}if("list"!==u?.type);else{const t=u,o=t.raw+"\n"+e.join("\n"),s=this.list(o);a[a.length-1]=s,n=n.substring(0,n.length-u.raw.length)+s.raw,r=r.substring(0,r.length-t.raw.length)+s.raw,e=o.substring(a.at(-1).raw.length).split("\n")}}return{type:"blockquote",raw:n,tokens:a,text:r}}}list(e){let t=this.rules.block.list.exec(e);if(t){let n=t[1].trim();const r=n.length>1,a={type:"list",raw:"",ordered:r,start:r?+n.slice(0,-1):"",loose:!1,items:[]};n=r?`\\d{1,9}\\${n.slice(-1)}`:`\\${n}`,this.options.pedantic&&(n=r?n:"[*+-]");const o=this.rules.other.listItemRegex(n);let s=!1;for(;e;){let n=!1,r="",c="";if(!(t=o.exec(e)))break;if(this.rules.block.hr.test(e))break;r=t[0],e=e.substring(r.length);let l=t[2].split("\n",1)[0].replace(this.rules.other.listReplaceTabs,(e=>" ".repeat(3*e.length))),f=e.split("\n",1)[0],u=!l.trim(),d=0;if(this.options.pedantic?(d=2,c=l.trimStart()):u?d=t[1].length+1:(d=t[2].search(this.rules.other.nonSpaceChar),d=d>4?1:d,c=l.slice(d),d+=t[1].length),u&&this.rules.other.blankLine.test(f)&&(r+=f+"\n",e=e.substring(f.length+1),n=!0),!n){const t=this.rules.other.nextBulletRegex(d),n=this.rules.other.hrRegex(d),a=this.rules.other.fencesBeginRegex(d),o=this.rules.other.headingBeginRegex(d),s=this.rules.other.htmlBeginRegex(d);for(;e;){const p=e.split("\n",1)[0];let h;if(f=p,this.options.pedantic?(f=f.replace(this.rules.other.listReplaceNesting,"  "),h=f):h=f.replace(this.rules.other.tabCharGlobal,"    "),a.test(f))break;if(o.test(f))break;if(s.test(f))break;if(t.test(f))break;if(n.test(f))break;if(h.search(this.rules.other.nonSpaceChar)>=d||!f.trim())c+="\n"+h.slice(d);else{if(u)break;if(l.replace(this.rules.other.tabCharGlobal,"    ").search(this.rules.other.nonSpaceChar)>=4)break;if(a.test(l))break;if(o.test(l))break;if(n.test(l))break;c+="\n"+f}u||f.trim()||(u=!0),r+=p+"\n",e=e.substring(p.length+1),l=h.slice(d)}}a.loose||(s?a.loose=!0:this.rules.other.doubleBlankLine.test(r)&&(s=!0));let p,h=null;this.options.gfm&&(h=this.rules.other.listIsTask.exec(c),h&&(p="[ ] "!==h[0],c=c.replace(this.rules.other.listReplaceTask,""))),a.items.push({type:"list_item",raw:r,task:!!h,checked:p,loose:!1,text:c,tokens:[]}),a.raw+=r}const c=a.items.at(-1);if(!c)return;c.raw=c.raw.trimEnd(),c.text=c.text.trimEnd(),a.raw=a.raw.trimEnd();for(let e=0;e<a.items.length;e++)if(this.lexer.state.top=!1,a.items[e].tokens=this.lexer.blockTokens(a.items[e].text,[]),!a.loose){const t=a.items[e].tokens.filter((e=>"space"===e.type)),n=t.length>0&&t.some((e=>this.rules.other.anyLine.test(e.raw)));a.loose=n}if(a.loose)for(let e=0;e<a.items.length;e++)a.items[e].loose=!0;return a}}html(e){const t=this.rules.block.html.exec(e);if(t){return{type:"html",block:!0,raw:t[0],pre:"pre"===t[1]||"script"===t[1]||"style"===t[1],text:t[0]}}}def(e){const t=this.rules.block.def.exec(e);if(t){const e=t[1].toLowerCase().replace(this.rules.other.multipleSpaceGlobal," "),n=t[2]?t[2].replace(this.rules.other.hrefBrackets,"$1").replace(this.rules.inline.anyPunctuation,"$1"):"",r=t[3]?t[3].substring(1,t[3].length-1).replace(this.rules.inline.anyPunctuation,"$1"):t[3];return{type:"def",tag:e,raw:t[0],href:n,title:r}}}table(e){const t=this.rules.block.table.exec(e);if(!t)return;if(!this.rules.other.tableDelimiter.test(t[2]))return;const n=splitCells(t[1]),r=t[2].replace(this.rules.other.tableAlignChars,"").split("|"),a=t[3]?.trim()?t[3].replace(this.rules.other.tableRowBlankLine,"").split("\n"):[],o={type:"table",raw:t[0],header:[],align:[],rows:[]};if(n.length===r.length){for(const e of r)this.rules.other.tableAlignRight.test(e)?o.align.push("right"):this.rules.other.tableAlignCenter.test(e)?o.align.push("center"):this.rules.other.tableAlignLeft.test(e)?o.align.push("left"):o.align.push(null);for(let e=0;e<n.length;e++)o.header.push({text:n[e],tokens:this.lexer.inline(n[e]),header:!0,align:o.align[e]});for(const e of a)o.rows.push(splitCells(e,o.header.length).map(((e,t)=>({text:e,tokens:this.lexer.inline(e),header:!1,align:o.align[t]}))));return o}}lheading(e){const t=this.rules.block.lheading.exec(e);if(t)return{type:"heading",raw:t[0],depth:"="===t[2].charAt(0)?1:2,text:t[1],tokens:this.lexer.inline(t[1])}}paragraph(e){const t=this.rules.block.paragraph.exec(e);if(t){const e="\n"===t[1].charAt(t[1].length-1)?t[1].slice(0,-1):t[1];return{type:"paragraph",raw:t[0],text:e,tokens:this.lexer.inline(e)}}}text(e){const t=this.rules.block.text.exec(e);if(t)return{type:"text",raw:t[0],text:t[0],tokens:this.lexer.inline(t[0])}}escape(e){const t=this.rules.inline.escape.exec(e);if(t)return{type:"escape",raw:t[0],text:t[1]}}tag(e){const t=this.rules.inline.tag.exec(e);if(t)return!this.lexer.state.inLink&&this.rules.other.startATag.test(t[0])?this.lexer.state.inLink=!0:this.lexer.state.inLink&&this.rules.other.endATag.test(t[0])&&(this.lexer.state.inLink=!1),!this.lexer.state.inRawBlock&&this.rules.other.startPreScriptTag.test(t[0])?this.lexer.state.inRawBlock=!0:this.lexer.state.inRawBlock&&this.rules.other.endPreScriptTag.test(t[0])&&(this.lexer.state.inRawBlock=!1),{type:"html",raw:t[0],inLink:this.lexer.state.inLink,inRawBlock:this.lexer.state.inRawBlock,block:!1,text:t[0]}}link(e){const t=this.rules.inline.link.exec(e);if(t){const e=t[2].trim();if(!this.options.pedantic&&this.rules.other.startAngleBracket.test(e)){if(!this.rules.other.endAngleBracket.test(e))return;const t=rtrim(e.slice(0,-1),"\\");if((e.length-t.length)%2==0)return}else{const e=function findClosingBracket(e,t){if(-1===e.indexOf(t[1]))return-1;let n=0;for(let r=0;r<e.length;r++)if("\\"===e[r])r++;else if(e[r]===t[0])n++;else if(e[r]===t[1]&&(n--,n<0))return r;return n>0?-2:-1}(t[2],"()");if(-2===e)return;if(e>-1){const n=(0===t[0].indexOf("!")?5:4)+t[1].length+e;t[2]=t[2].substring(0,e),t[0]=t[0].substring(0,n).trim(),t[3]=""}}let n=t[2],r="";if(this.options.pedantic){const e=this.rules.other.pedanticHrefTitle.exec(n);e&&(n=e[1],r=e[3])}else r=t[3]?t[3].slice(1,-1):"";return n=n.trim(),this.rules.other.startAngleBracket.test(n)&&(n=this.options.pedantic&&!this.rules.other.endAngleBracket.test(e)?n.slice(1):n.slice(1,-1)),outputLink(t,{href:n?n.replace(this.rules.inline.anyPunctuation,"$1"):n,title:r?r.replace(this.rules.inline.anyPunctuation,"$1"):r},t[0],this.lexer,this.rules)}}reflink(e,t){let n;if((n=this.rules.inline.reflink.exec(e))||(n=this.rules.inline.nolink.exec(e))){const e=t[(n[2]||n[1]).replace(this.rules.other.multipleSpaceGlobal," ").toLowerCase()];if(!e){const e=n[0].charAt(0);return{type:"text",raw:e,text:e}}return outputLink(n,e,n[0],this.lexer,this.rules)}}emStrong(e,t,n=""){let r=this.rules.inline.emStrongLDelim.exec(e);if(!r)return;if(r[3]&&n.match(this.rules.other.unicodeAlphaNumeric))return;if(!(r[1]||r[2]||"")||!n||this.rules.inline.punctuation.exec(n)){const n=[...r[0]].length-1;let a,o,s=n,c=0;const l="*"===r[0][0]?this.rules.inline.emStrongRDelimAst:this.rules.inline.emStrongRDelimUnd;for(l.lastIndex=0,t=t.slice(-1*e.length+n);null!=(r=l.exec(t));){if(a=r[1]||r[2]||r[3]||r[4]||r[5]||r[6],!a)continue;if(o=[...a].length,r[3]||r[4]){s+=o;continue}if((r[5]||r[6])&&n%3&&!((n+o)%3)){c+=o;continue}if(s-=o,s>0)continue;o=Math.min(o,o+s+c);const t=[...r[0]][0].length,l=e.slice(0,n+r.index+t+o);if(Math.min(n,o)%2){const e=l.slice(1,-1);return{type:"em",raw:l,text:e,tokens:this.lexer.inlineTokens(e)}}const f=l.slice(2,-2);return{type:"strong",raw:l,text:f,tokens:this.lexer.inlineTokens(f)}}}}codespan(e){const t=this.rules.inline.code.exec(e);if(t){let e=t[2].replace(this.rules.other.newLineCharGlobal," ");const n=this.rules.other.nonSpaceChar.test(e),r=this.rules.other.startingSpaceChar.test(e)&&this.rules.other.endingSpaceChar.test(e);return n&&r&&(e=e.substring(1,e.length-1)),{type:"codespan",raw:t[0],text:e}}}br(e){const t=this.rules.inline.br.exec(e);if(t)return{type:"br",raw:t[0]}}del(e){const t=this.rules.inline.del.exec(e);if(t)return{type:"del",raw:t[0],text:t[2],tokens:this.lexer.inlineTokens(t[2])}}autolink(e){const t=this.rules.inline.autolink.exec(e);if(t){let e,n;return"@"===t[2]?(e=t[1],n="mailto:"+e):(e=t[1],n=e),{type:"link",raw:t[0],text:e,href:n,tokens:[{type:"text",raw:e,text:e}]}}}url(e){let t;if(t=this.rules.inline.url.exec(e)){let e,n;if("@"===t[2])e=t[0],n="mailto:"+e;else{let r;do{r=t[0],t[0]=this.rules.inline._backpedal.exec(t[0])?.[0]??""}while(r!==t[0]);e=t[0],n="www."===t[1]?"http://"+t[0]:t[0]}return{type:"link",raw:t[0],text:e,href:n,tokens:[{type:"text",raw:e,text:e}]}}}inlineText(e){const t=this.rules.inline.text.exec(e);if(t){const e=this.lexer.state.inRawBlock;return{type:"text",raw:t[0],text:t[0],escaped:e}}}}class _Lexer{tokens;options;state;tokenizer;inlineQueue;constructor(e){this.tokens=[],this.tokens.links=Object.create(null),this.options=e||Qo,this.options.tokenizer=this.options.tokenizer||new _Tokenizer,this.tokenizer=this.options.tokenizer,this.tokenizer.options=this.options,this.tokenizer.lexer=this,this.inlineQueue=[],this.state={inLink:!1,inRawBlock:!1,top:!0};const t={other:Go,block:qs.normal,inline:Fs.normal};this.options.pedantic?(t.block=qs.pedantic,t.inline=Fs.pedantic):this.options.gfm&&(t.block=qs.gfm,this.options.breaks?t.inline=Fs.breaks:t.inline=Fs.gfm),this.tokenizer.rules=t}static get rules(){return{block:qs,inline:Fs}}static lex(e,t){return new _Lexer(t).lex(e)}static lexInline(e,t){return new _Lexer(t).inlineTokens(e)}lex(e){e=e.replace(Go.carriageReturn,"\n"),this.blockTokens(e,this.tokens);for(let e=0;e<this.inlineQueue.length;e++){const t=this.inlineQueue[e];this.inlineTokens(t.src,t.tokens)}return this.inlineQueue=[],this.tokens}blockTokens(e,t=[],n=!1){for(this.options.pedantic&&(e=e.replace(Go.tabCharGlobal,"    ").replace(Go.spaceLine,""));e;){let r;if(this.options.extensions?.block?.some((n=>!!(r=n.call({lexer:this},e,t))&&(e=e.substring(r.raw.length),t.push(r),!0))))continue;if(r=this.tokenizer.space(e)){e=e.substring(r.raw.length);const n=t.at(-1);1===r.raw.length&&void 0!==n?n.raw+="\n":t.push(r);continue}if(r=this.tokenizer.code(e)){e=e.substring(r.raw.length);const n=t.at(-1);"paragraph"===n?.type||"text"===n?.type?(n.raw+="\n"+r.raw,n.text+="\n"+r.text,this.inlineQueue.at(-1).src=n.text):t.push(r);continue}if(r=this.tokenizer.fences(e)){e=e.substring(r.raw.length),t.push(r);continue}if(r=this.tokenizer.heading(e)){e=e.substring(r.raw.length),t.push(r);continue}if(r=this.tokenizer.hr(e)){e=e.substring(r.raw.length),t.push(r);continue}if(r=this.tokenizer.blockquote(e)){e=e.substring(r.raw.length),t.push(r);continue}if(r=this.tokenizer.list(e)){e=e.substring(r.raw.length),t.push(r);continue}if(r=this.tokenizer.html(e)){e=e.substring(r.raw.length),t.push(r);continue}if(r=this.tokenizer.def(e)){e=e.substring(r.raw.length);const n=t.at(-1);"paragraph"===n?.type||"text"===n?.type?(n.raw+="\n"+r.raw,n.text+="\n"+r.raw,this.inlineQueue.at(-1).src=n.text):this.tokens.links[r.tag]||(this.tokens.links[r.tag]={href:r.href,title:r.title});continue}if(r=this.tokenizer.table(e)){e=e.substring(r.raw.length),t.push(r);continue}if(r=this.tokenizer.lheading(e)){e=e.substring(r.raw.length),t.push(r);continue}let a=e;if(this.options.extensions?.startBlock){let t=1/0;const n=e.slice(1);let r;this.options.extensions.startBlock.forEach((e=>{r=e.call({lexer:this},n),"number"==typeof r&&r>=0&&(t=Math.min(t,r))})),t<1/0&&t>=0&&(a=e.substring(0,t+1))}if(this.state.top&&(r=this.tokenizer.paragraph(a))){const o=t.at(-1);n&&"paragraph"===o?.type?(o.raw+="\n"+r.raw,o.text+="\n"+r.text,this.inlineQueue.pop(),this.inlineQueue.at(-1).src=o.text):t.push(r),n=a.length!==e.length,e=e.substring(r.raw.length)}else if(r=this.tokenizer.text(e)){e=e.substring(r.raw.length);const n=t.at(-1);"text"===n?.type?(n.raw+="\n"+r.raw,n.text+="\n"+r.text,this.inlineQueue.pop(),this.inlineQueue.at(-1).src=n.text):t.push(r)}else if(e){const t="Infinite loop on byte: "+e.charCodeAt(0);if(this.options.silent){console.error(t);break}throw new Error(t)}}return this.state.top=!0,t}inline(e,t=[]){return this.inlineQueue.push({src:e,tokens:t}),t}inlineTokens(e,t=[]){let n=e,r=null;if(this.tokens.links){const e=Object.keys(this.tokens.links);if(e.length>0)for(;null!=(r=this.tokenizer.rules.inline.reflinkSearch.exec(n));)e.includes(r[0].slice(r[0].lastIndexOf("[")+1,-1))&&(n=n.slice(0,r.index)+"["+"a".repeat(r[0].length-2)+"]"+n.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex))}for(;null!=(r=this.tokenizer.rules.inline.anyPunctuation.exec(n));)n=n.slice(0,r.index)+"++"+n.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);for(;null!=(r=this.tokenizer.rules.inline.blockSkip.exec(n));)n=n.slice(0,r.index)+"["+"a".repeat(r[0].length-2)+"]"+n.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);let a=!1,o="";for(;e;){let r;if(a||(o=""),a=!1,this.options.extensions?.inline?.some((n=>!!(r=n.call({lexer:this},e,t))&&(e=e.substring(r.raw.length),t.push(r),!0))))continue;if(r=this.tokenizer.escape(e)){e=e.substring(r.raw.length),t.push(r);continue}if(r=this.tokenizer.tag(e)){e=e.substring(r.raw.length),t.push(r);continue}if(r=this.tokenizer.link(e)){e=e.substring(r.raw.length),t.push(r);continue}if(r=this.tokenizer.reflink(e,this.tokens.links)){e=e.substring(r.raw.length);const n=t.at(-1);"text"===r.type&&"text"===n?.type?(n.raw+=r.raw,n.text+=r.text):t.push(r);continue}if(r=this.tokenizer.emStrong(e,n,o)){e=e.substring(r.raw.length),t.push(r);continue}if(r=this.tokenizer.codespan(e)){e=e.substring(r.raw.length),t.push(r);continue}if(r=this.tokenizer.br(e)){e=e.substring(r.raw.length),t.push(r);continue}if(r=this.tokenizer.del(e)){e=e.substring(r.raw.length),t.push(r);continue}if(r=this.tokenizer.autolink(e)){e=e.substring(r.raw.length),t.push(r);continue}if(!this.state.inLink&&(r=this.tokenizer.url(e))){e=e.substring(r.raw.length),t.push(r);continue}let s=e;if(this.options.extensions?.startInline){let t=1/0;const n=e.slice(1);let r;this.options.extensions.startInline.forEach((e=>{r=e.call({lexer:this},n),"number"==typeof r&&r>=0&&(t=Math.min(t,r))})),t<1/0&&t>=0&&(s=e.substring(0,t+1))}if(r=this.tokenizer.inlineText(s)){e=e.substring(r.raw.length),"_"!==r.raw.slice(-1)&&(o=r.raw.slice(-1)),a=!0;const n=t.at(-1);"text"===n?.type?(n.raw+=r.raw,n.text+=r.text):t.push(r)}else if(e){const t="Infinite loop on byte: "+e.charCodeAt(0);if(this.options.silent){console.error(t);break}throw new Error(t)}}return t}}class _Renderer{options;parser;constructor(e){this.options=e||Qo}space(e){return""}code({text:e,lang:t,escaped:n}){const r=(t||"").match(Go.notSpaceStart)?.[0],a=e.replace(Go.endingNewline,"")+"\n";return r?'<pre><code class="language-'+marked_esm_escape(r)+'">'+(n?a:marked_esm_escape(a,!0))+"</code></pre>\n":"<pre><code>"+(n?a:marked_esm_escape(a,!0))+"</code></pre>\n"}blockquote({tokens:e}){return`<blockquote>\n${this.parser.parse(e)}</blockquote>\n`}html({text:e}){return e}heading({tokens:e,depth:t}){return`<h${t}>${this.parser.parseInline(e)}</h${t}>\n`}hr(e){return"<hr>\n"}list(e){const t=e.ordered,n=e.start;let r="";for(let t=0;t<e.items.length;t++){const n=e.items[t];r+=this.listitem(n)}const a=t?"ol":"ul";return"<"+a+(t&&1!==n?' start="'+n+'"':"")+">\n"+r+"</"+a+">\n"}listitem(e){let t="";if(e.task){const n=this.checkbox({checked:!!e.checked});e.loose?"paragraph"===e.tokens[0]?.type?(e.tokens[0].text=n+" "+e.tokens[0].text,e.tokens[0].tokens&&e.tokens[0].tokens.length>0&&"text"===e.tokens[0].tokens[0].type&&(e.tokens[0].tokens[0].text=n+" "+marked_esm_escape(e.tokens[0].tokens[0].text),e.tokens[0].tokens[0].escaped=!0)):e.tokens.unshift({type:"text",raw:n+" ",text:n+" ",escaped:!0}):t+=n+" "}return t+=this.parser.parse(e.tokens,!!e.loose),`<li>${t}</li>\n`}checkbox({checked:e}){return"<input "+(e?'checked="" ':"")+'disabled="" type="checkbox">'}paragraph({tokens:e}){return`<p>${this.parser.parseInline(e)}</p>\n`}table(e){let t="",n="";for(let t=0;t<e.header.length;t++)n+=this.tablecell(e.header[t]);t+=this.tablerow({text:n});let r="";for(let t=0;t<e.rows.length;t++){const a=e.rows[t];n="";for(let e=0;e<a.length;e++)n+=this.tablecell(a[e]);r+=this.tablerow({text:n})}return r&&(r=`<tbody>${r}</tbody>`),"<table>\n<thead>\n"+t+"</thead>\n"+r+"</table>\n"}tablerow({text:e}){return`<tr>\n${e}</tr>\n`}tablecell(e){const t=this.parser.parseInline(e.tokens),n=e.header?"th":"td";return(e.align?`<${n} align="${e.align}">`:`<${n}>`)+t+`</${n}>\n`}strong({tokens:e}){return`<strong>${this.parser.parseInline(e)}</strong>`}em({tokens:e}){return`<em>${this.parser.parseInline(e)}</em>`}codespan({text:e}){return`<code>${marked_esm_escape(e,!0)}</code>`}br(e){return"<br>"}del({tokens:e}){return`<del>${this.parser.parseInline(e)}</del>`}link({href:e,title:t,tokens:n}){const r=this.parser.parseInline(n),a=cleanUrl(e);if(null===a)return r;let o='<a href="'+(e=a)+'"';return t&&(o+=' title="'+marked_esm_escape(t)+'"'),o+=">"+r+"</a>",o}image({href:e,title:t,text:n,tokens:r}){r&&(n=this.parser.parseInline(r,this.parser.textRenderer));const a=cleanUrl(e);if(null===a)return marked_esm_escape(n);let o=`<img src="${e=a}" alt="${n}"`;return t&&(o+=` title="${marked_esm_escape(t)}"`),o+=">",o}text(e){return"tokens"in e&&e.tokens?this.parser.parseInline(e.tokens):"escaped"in e&&e.escaped?e.text:marked_esm_escape(e.text)}}class _TextRenderer{strong({text:e}){return e}em({text:e}){return e}codespan({text:e}){return e}del({text:e}){return e}html({text:e}){return e}text({text:e}){return e}link({text:e}){return""+e}image({text:e}){return""+e}br(){return""}}class _Parser{options;renderer;textRenderer;constructor(e){this.options=e||Qo,this.options.renderer=this.options.renderer||new _Renderer,this.renderer=this.options.renderer,this.renderer.options=this.options,this.renderer.parser=this,this.textRenderer=new _TextRenderer}static parse(e,t){return new _Parser(t).parse(e)}static parseInline(e,t){return new _Parser(t).parseInline(e)}parse(e,t=!0){let n="";for(let r=0;r<e.length;r++){const a=e[r];if(this.options.extensions?.renderers?.[a.type]){const e=a,t=this.options.extensions.renderers[e.type].call({parser:this},e);if(!1!==t||!["space","hr","heading","code","table","blockquote","list","html","paragraph","text"].includes(e.type)){n+=t||"";continue}}const o=a;switch(o.type){case"space":n+=this.renderer.space(o);continue;case"hr":n+=this.renderer.hr(o);continue;case"heading":n+=this.renderer.heading(o);continue;case"code":n+=this.renderer.code(o);continue;case"table":n+=this.renderer.table(o);continue;case"blockquote":n+=this.renderer.blockquote(o);continue;case"list":n+=this.renderer.list(o);continue;case"html":n+=this.renderer.html(o);continue;case"paragraph":n+=this.renderer.paragraph(o);continue;case"text":{let a=o,s=this.renderer.text(a);for(;r+1<e.length&&"text"===e[r+1].type;)a=e[++r],s+="\n"+this.renderer.text(a);n+=t?this.renderer.paragraph({type:"paragraph",raw:s,text:s,tokens:[{type:"text",raw:s,text:s,escaped:!0}]}):s;continue}default:{const e='Token with "'+o.type+'" type was not found.';if(this.options.silent)return console.error(e),"";throw new Error(e)}}}return n}parseInline(e,t=this.renderer){let n="";for(let r=0;r<e.length;r++){const a=e[r];if(this.options.extensions?.renderers?.[a.type]){const e=this.options.extensions.renderers[a.type].call({parser:this},a);if(!1!==e||!["escape","html","link","image","strong","em","codespan","br","del","text"].includes(a.type)){n+=e||"";continue}}const o=a;switch(o.type){case"escape":case"text":n+=t.text(o);break;case"html":n+=t.html(o);break;case"link":n+=t.link(o);break;case"image":n+=t.image(o);break;case"strong":n+=t.strong(o);break;case"em":n+=t.em(o);break;case"codespan":n+=t.codespan(o);break;case"br":n+=t.br(o);break;case"del":n+=t.del(o);break;default:{const e='Token with "'+o.type+'" type was not found.';if(this.options.silent)return console.error(e),"";throw new Error(e)}}}return n}}class _Hooks{options;block;constructor(e){this.options=e||Qo}static passThroughHooks=new Set(["preprocess","postprocess","processAllTokens"]);preprocess(e){return e}postprocess(e){return e}processAllTokens(e){return e}provideLexer(){return this.block?_Lexer.lex:_Lexer.lexInline}provideParser(){return this.block?_Parser.parse:_Parser.parseInline}}const Zs=new class Marked{defaults={async:!1,breaks:!1,extensions:null,gfm:!0,hooks:null,pedantic:!1,renderer:null,silent:!1,tokenizer:null,walkTokens:null};options=this.setOptions;parse=this.parseMarkdown(!0);parseInline=this.parseMarkdown(!1);Parser=_Parser;Renderer=_Renderer;TextRenderer=_TextRenderer;Lexer=_Lexer;Tokenizer=_Tokenizer;Hooks=_Hooks;constructor(...e){this.use(...e)}walkTokens(e,t){let n=[];for(const r of e)switch(n=n.concat(t.call(this,r)),r.type){case"table":{const e=r;for(const r of e.header)n=n.concat(this.walkTokens(r.tokens,t));for(const r of e.rows)for(const e of r)n=n.concat(this.walkTokens(e.tokens,t));break}case"list":{const e=r;n=n.concat(this.walkTokens(e.items,t));break}default:{const e=r;this.defaults.extensions?.childTokens?.[e.type]?this.defaults.extensions.childTokens[e.type].forEach((r=>{const a=e[r].flat(1/0);n=n.concat(this.walkTokens(a,t))})):e.tokens&&(n=n.concat(this.walkTokens(e.tokens,t)))}}return n}use(...e){const t=this.defaults.extensions||{renderers:{},childTokens:{}};return e.forEach((e=>{const n={...e};if(n.async=this.defaults.async||n.async||!1,e.extensions&&(e.extensions.forEach((e=>{if(!e.name)throw new Error("extension name required");if("renderer"in e){const n=t.renderers[e.name];t.renderers[e.name]=n?function(...t){let r=e.renderer.apply(this,t);return!1===r&&(r=n.apply(this,t)),r}:e.renderer}if("tokenizer"in e){if(!e.level||"block"!==e.level&&"inline"!==e.level)throw new Error("extension level must be 'block' or 'inline'");const n=t[e.level];n?n.unshift(e.tokenizer):t[e.level]=[e.tokenizer],e.start&&("block"===e.level?t.startBlock?t.startBlock.push(e.start):t.startBlock=[e.start]:"inline"===e.level&&(t.startInline?t.startInline.push(e.start):t.startInline=[e.start]))}"childTokens"in e&&e.childTokens&&(t.childTokens[e.name]=e.childTokens)})),n.extensions=t),e.renderer){const t=this.defaults.renderer||new _Renderer(this.defaults);for(const n in e.renderer){if(!(n in t))throw new Error(`renderer '${n}' does not exist`);if(["options","parser"].includes(n))continue;const r=n,a=e.renderer[r],o=t[r];t[r]=(...e)=>{let n=a.apply(t,e);return!1===n&&(n=o.apply(t,e)),n||""}}n.renderer=t}if(e.tokenizer){const t=this.defaults.tokenizer||new _Tokenizer(this.defaults);for(const n in e.tokenizer){if(!(n in t))throw new Error(`tokenizer '${n}' does not exist`);if(["options","rules","lexer"].includes(n))continue;const r=n,a=e.tokenizer[r],o=t[r];t[r]=(...e)=>{let n=a.apply(t,e);return!1===n&&(n=o.apply(t,e)),n}}n.tokenizer=t}if(e.hooks){const t=this.defaults.hooks||new _Hooks;for(const n in e.hooks){if(!(n in t))throw new Error(`hook '${n}' does not exist`);if(["options","block"].includes(n))continue;const r=n,a=e.hooks[r],o=t[r];_Hooks.passThroughHooks.has(n)?t[r]=e=>{if(this.defaults.async)return Promise.resolve(a.call(t,e)).then((e=>o.call(t,e)));const n=a.call(t,e);return o.call(t,n)}:t[r]=(...e)=>{let n=a.apply(t,e);return!1===n&&(n=o.apply(t,e)),n}}n.hooks=t}if(e.walkTokens){const t=this.defaults.walkTokens,r=e.walkTokens;n.walkTokens=function(e){let n=[];return n.push(r.call(this,e)),t&&(n=n.concat(t.call(this,e))),n}}this.defaults={...this.defaults,...n}})),this}setOptions(e){return this.defaults={...this.defaults,...e},this}lexer(e,t){return _Lexer.lex(e,t??this.defaults)}parser(e,t){return _Parser.parse(e,t??this.defaults)}parseMarkdown(e){return(t,n)=>{const r={...n},a={...this.defaults,...r},o=this.onError(!!a.silent,!!a.async);if(!0===this.defaults.async&&!1===r.async)return o(new Error("marked(): The async option was set to true by an extension. Remove async: false from the parse options object to return a Promise."));if(null==t)return o(new Error("marked(): input parameter is undefined or null"));if("string"!=typeof t)return o(new Error("marked(): input parameter is of type "+Object.prototype.toString.call(t)+", string expected"));a.hooks&&(a.hooks.options=a,a.hooks.block=e);const s=a.hooks?a.hooks.provideLexer():e?_Lexer.lex:_Lexer.lexInline,c=a.hooks?a.hooks.provideParser():e?_Parser.parse:_Parser.parseInline;if(a.async)return Promise.resolve(a.hooks?a.hooks.preprocess(t):t).then((e=>s(e,a))).then((e=>a.hooks?a.hooks.processAllTokens(e):e)).then((e=>a.walkTokens?Promise.all(this.walkTokens(e,a.walkTokens)).then((()=>e)):e)).then((e=>c(e,a))).then((e=>a.hooks?a.hooks.postprocess(e):e)).catch(o);try{a.hooks&&(t=a.hooks.preprocess(t));let e=s(t,a);a.hooks&&(e=a.hooks.processAllTokens(e)),a.walkTokens&&this.walkTokens(e,a.walkTokens);let n=c(e,a);return a.hooks&&(n=a.hooks.postprocess(n)),n}catch(e){return o(e)}}}onError(e,t){return n=>{if(n.message+="\nPlease report this to https://github.com/markedjs/marked.",e){const e="<p>An error occurred:</p><pre>"+marked_esm_escape(n.message+"",!0)+"</pre>";return t?Promise.resolve(e):e}if(t)return Promise.reject(n);throw n}}};function marked(e,t){return Zs.parse(e,t)}marked.options=marked.setOptions=function(e){return Zs.setOptions(e),marked.defaults=Zs.defaults,changeDefaults(marked.defaults),marked},marked.getDefaults=_getDefaults,marked.defaults=Qo,marked.use=function(...e){return Zs.use(...e),marked.defaults=Zs.defaults,changeDefaults(marked.defaults),marked},marked.walkTokens=function(e,t){return Zs.walkTokens(e,t)},marked.parseInline=Zs.parseInline,marked.Parser=_Parser,marked.parser=_Parser.parse,marked.Renderer=_Renderer,marked.TextRenderer=_TextRenderer,marked.Lexer=_Lexer,marked.lexer=_Lexer.lex,marked.Tokenizer=_Tokenizer,marked.Hooks=_Hooks,marked.parse=marked;marked.options,marked.setOptions,marked.use,marked.walkTokens,marked.parseInline,_Parser.parse,_Lexer.lex;const Os=marked.parse('<h1>Debriefing Information</h1> <p>Thank you for taking part in our study!</p> <h2>What was this study about?</h2> <ul> <li> <p>The study was designed to test whether the speed of your decisions about reality is influenced by a feature of the environment.</p> </li> <li> <p>Previous studies have shown that people are faster to correctly detect the number of dots presented to them when the number of dots they see and the number of dots seen by a person in a room is the same, compared to when they differ. This effect occurs when the person is presented at the same time with a room containing the dots.</p> </li> <li> <p>Similarly, studies have shown that people react faster to objects appearing in the location that was gazed at, compared to objects appearing in the location that was not gazed at. However, this only happens when the gaze cue (e.g., eyes) is presented a few seconds before the target object.</p> </li> <li> <p>We wanted to test whether one reason for the difference between the two tasks is the use of a word indicating who needs to respond. In the first task (with dots and a room) participants are shown a "YOU" to indicate they need to judge what they see. This may lead to participants realising that there is another perspective, aside from their own, that could be taken. No such indicator is present in the second type of experiment (with the eyes).</p> </li> <li> <p>Thus, for this study we assigned participants to one of two groups. One group received an indicator - "YOU“ that may help lead to the realisation that another perspective is possible and a second group received an indicator "NOW“ that should not have had this effect.</p> </li> </ul> <h2>Visualisation of your data</h2> '),Ys=marked.parse("<p>The graph indicates how long it took for you to respond when the person in the room saw the same number of dots as you (the 'consistent' bar in the graph ) and how long it took for you to respond when the person in the room saw a different number of dots ('inconsistent bar').</p> <p>Previous research indicates that people tend to be faster to respond in the 'consistent' conditions of the experiment. We're investigating how the word you saw ('NOW' or 'YOU') and the time between the appearance of the person in the room and the appearance of the dots can influence this.</p> "),js=marked.parse("<h2>Further Information</h2> <p>If you would like to know more about the study you can also contact Edward Legg (edward.legg@uniri.hr) for further information.</p> ");var zs=__webpack_require__(5072),Ps=__webpack_require__.n(zs),Qs=__webpack_require__(7825),Ks=__webpack_require__.n(Qs),Gs=__webpack_require__(7659),Xs=__webpack_require__.n(Gs),Js=__webpack_require__(5056),Hs=__webpack_require__.n(Js),_s=__webpack_require__(540),$s=__webpack_require__.n(_s),ec=__webpack_require__(1113),tc=__webpack_require__.n(ec),nc=__webpack_require__(7568),rc={};rc.styleTagTransform=tc(),rc.setAttributes=Hs(),rc.insert=Xs().bind(null,"head"),rc.domAPI=Ks(),rc.insertStyleElement=$s();Ps()(nc.A,rc);nc.A&&nc.A.locals&&nc.A.locals;var ac=__webpack_require__(9829),ic={};ic.styleTagTransform=tc(),ic.setAttributes=Hs(),ic.insert=Xs().bind(null,"head"),ic.domAPI=Ks(),ic.insertStyleElement=$s();Ps()(ac.A,ic);ac.A&&ac.A.locals&&ac.A.locals;function textRender(e,t){const n=document.createElement("div");n.innerHTML=e,t.append(n)}function createPlot(e){document.body.click(),window.onbeforeunload=function(){return"Are you sure you want to leave?"};let t=e.results?e.results:[{version:"consistent",rt:512},{version:"inconsistent",rt:538}],n=e.results?"The graph below represents your response times during this experiment":"We were unable to create a graph based on your data. The graph below reflects one possible outcome.",r=document.createElement("p").innerText=n,a=barY(t,{x:"version",y:"rt"}).plot();const o=document.createElement("div");o.className="instructions",textRender(Os,o),o.append(r),o.append(a),textRender(Ys,o),textRender(js,o),document.body.append(o),function redirectLink(){let e=document.createElement("div");e.className="redirect-widget";let t=document.createElement("p").innerText="Clicking will return you to Prolific",n=document.createElement("button");n.className="redirect-link",n.innerText="Confirm Completion",n.onclick=()=>{window.onbeforeunload=function(){},jatos.endStudyAndRedirect("https://app.prolific.com/submissions/complete?cc=CKSZRF87")},e.append(n),e.append(t),document.body.append(e)}()}export{createPlot as default};